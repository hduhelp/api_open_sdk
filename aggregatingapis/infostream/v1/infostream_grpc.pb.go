// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: aggregatingapis/infostream/v1/infostream.proto

package infostreamv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// InfostreamServiceClient is the client API for InfostreamService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InfostreamServiceClient interface {
	GetInfostream(ctx context.Context, in *GetInfostreamRequest, opts ...grpc.CallOption) (*GetInfostreamResponse, error)
}

type infostreamServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInfostreamServiceClient(cc grpc.ClientConnInterface) InfostreamServiceClient {
	return &infostreamServiceClient{cc}
}

func (c *infostreamServiceClient) GetInfostream(ctx context.Context, in *GetInfostreamRequest, opts ...grpc.CallOption) (*GetInfostreamResponse, error) {
	out := new(GetInfostreamResponse)
	err := c.cc.Invoke(ctx, "/aggregatingapis.infostream.v1.InfostreamService/GetInfostream", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InfostreamServiceServer is the server API for InfostreamService service.
// All implementations must embed UnimplementedInfostreamServiceServer
// for forward compatibility
type InfostreamServiceServer interface {
	GetInfostream(context.Context, *GetInfostreamRequest) (*GetInfostreamResponse, error)
	mustEmbedUnimplementedInfostreamServiceServer()
}

// UnimplementedInfostreamServiceServer must be embedded to have forward compatible implementations.
type UnimplementedInfostreamServiceServer struct {
}

func (UnimplementedInfostreamServiceServer) GetInfostream(context.Context, *GetInfostreamRequest) (*GetInfostreamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInfostream not implemented")
}
func (UnimplementedInfostreamServiceServer) mustEmbedUnimplementedInfostreamServiceServer() {}

// UnsafeInfostreamServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InfostreamServiceServer will
// result in compilation errors.
type UnsafeInfostreamServiceServer interface {
	mustEmbedUnimplementedInfostreamServiceServer()
}

func RegisterInfostreamServiceServer(s grpc.ServiceRegistrar, srv InfostreamServiceServer) {
	s.RegisterService(&InfostreamService_ServiceDesc, srv)
}

func _InfostreamService_GetInfostream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInfostreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfostreamServiceServer).GetInfostream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aggregatingapis.infostream.v1.InfostreamService/GetInfostream",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfostreamServiceServer).GetInfostream(ctx, req.(*GetInfostreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InfostreamService_ServiceDesc is the grpc.ServiceDesc for InfostreamService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InfostreamService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "aggregatingapis.infostream.v1.InfostreamService",
	HandlerType: (*InfostreamServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetInfostream",
			Handler:    _InfostreamService_GetInfostream_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "aggregatingapis/infostream/v1/infostream.proto",
}
