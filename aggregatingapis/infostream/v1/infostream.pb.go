// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        (unknown)
// source: aggregatingapis/infostream/v1/infostream.proto

package infostreamv1

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetInfoStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StaffId string `protobuf:"bytes,1,opt,name=staffId,proto3" json:"staffId,omitempty"`
}

func (x *GetInfoStreamRequest) Reset() {
	*x = GetInfoStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aggregatingapis_infostream_v1_infostream_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInfoStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInfoStreamRequest) ProtoMessage() {}

func (x *GetInfoStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aggregatingapis_infostream_v1_infostream_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInfoStreamRequest.ProtoReflect.Descriptor instead.
func (*GetInfoStreamRequest) Descriptor() ([]byte, []int) {
	return file_aggregatingapis_infostream_v1_infostream_proto_rawDescGZIP(), []int{0}
}

func (x *GetInfoStreamRequest) GetStaffId() string {
	if x != nil {
		return x.StaffId
	}
	return ""
}

type GetInfoStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error int32           `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Msg   string          `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data  *InfoStreamData `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetInfoStreamResponse) Reset() {
	*x = GetInfoStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aggregatingapis_infostream_v1_infostream_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInfoStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInfoStreamResponse) ProtoMessage() {}

func (x *GetInfoStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aggregatingapis_infostream_v1_infostream_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInfoStreamResponse.ProtoReflect.Descriptor instead.
func (*GetInfoStreamResponse) Descriptor() ([]byte, []int) {
	return file_aggregatingapis_infostream_v1_infostream_proto_rawDescGZIP(), []int{1}
}

func (x *GetInfoStreamResponse) GetError() int32 {
	if x != nil {
		return x.Error
	}
	return 0
}

func (x *GetInfoStreamResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetInfoStreamResponse) GetData() *InfoStreamData {
	if x != nil {
		return x.Data
	}
	return nil
}

type InfoStreamData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Weather  *WeatherResp  `protobuf:"bytes,1,opt,name=weather,proto3" json:"weather,omitempty"`
	Schedule *ScheduleResp `protobuf:"bytes,2,opt,name=schedule,proto3" json:"schedule,omitempty"`
	Exam     *ExamResp     `protobuf:"bytes,3,opt,name=exam,proto3" json:"exam,omitempty"`
	Score    *ScoreResp    `protobuf:"bytes,4,opt,name=score,proto3" json:"score,omitempty"`
	Sunrun   *SunRunResp   `protobuf:"bytes,5,opt,name=sunrun,proto3" json:"sunrun,omitempty"`
	Card     *CardResp     `protobuf:"bytes,6,opt,name=card,proto3" json:"card,omitempty"`
	Electric *ElectricResp `protobuf:"bytes,7,opt,name=electric,proto3" json:"electric,omitempty"`
}

func (x *InfoStreamData) Reset() {
	*x = InfoStreamData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aggregatingapis_infostream_v1_infostream_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InfoStreamData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InfoStreamData) ProtoMessage() {}

func (x *InfoStreamData) ProtoReflect() protoreflect.Message {
	mi := &file_aggregatingapis_infostream_v1_infostream_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InfoStreamData.ProtoReflect.Descriptor instead.
func (*InfoStreamData) Descriptor() ([]byte, []int) {
	return file_aggregatingapis_infostream_v1_infostream_proto_rawDescGZIP(), []int{2}
}

func (x *InfoStreamData) GetWeather() *WeatherResp {
	if x != nil {
		return x.Weather
	}
	return nil
}

func (x *InfoStreamData) GetSchedule() *ScheduleResp {
	if x != nil {
		return x.Schedule
	}
	return nil
}

func (x *InfoStreamData) GetExam() *ExamResp {
	if x != nil {
		return x.Exam
	}
	return nil
}

func (x *InfoStreamData) GetScore() *ScoreResp {
	if x != nil {
		return x.Score
	}
	return nil
}

func (x *InfoStreamData) GetSunrun() *SunRunResp {
	if x != nil {
		return x.Sunrun
	}
	return nil
}

func (x *InfoStreamData) GetCard() *CardResp {
	if x != nil {
		return x.Card
	}
	return nil
}

func (x *InfoStreamData) GetElectric() *ElectricResp {
	if x != nil {
		return x.Electric
	}
	return nil
}

type WeatherResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Available bool         `protobuf:"varint,1,opt,name=available,proto3" json:"available,omitempty"`
	Data      *WeatherData `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *WeatherResp) Reset() {
	*x = WeatherResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aggregatingapis_infostream_v1_infostream_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WeatherResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WeatherResp) ProtoMessage() {}

func (x *WeatherResp) ProtoReflect() protoreflect.Message {
	mi := &file_aggregatingapis_infostream_v1_infostream_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WeatherResp.ProtoReflect.Descriptor instead.
func (*WeatherResp) Descriptor() ([]byte, []int) {
	return file_aggregatingapis_infostream_v1_infostream_proto_rawDescGZIP(), []int{3}
}

func (x *WeatherResp) GetAvailable() bool {
	if x != nil {
		return x.Available
	}
	return false
}

func (x *WeatherResp) GetData() *WeatherData {
	if x != nil {
		return x.Data
	}
	return nil
}

type WeatherData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Aqi            int32   `protobuf:"varint,1,opt,name=aqi,proto3" json:"aqi,omitempty"`
	Desc           string  `protobuf:"bytes,2,opt,name=desc,proto3" json:"desc,omitempty"`
	SkyconNow      string  `protobuf:"bytes,3,opt,name=skyconNow,proto3" json:"skyconNow,omitempty"`
	IsRain         bool    `protobuf:"varint,4,opt,name=isRain,proto3" json:"isRain,omitempty"`
	WillStop       bool    `protobuf:"varint,5,opt,name=willStop,proto3" json:"willStop,omitempty"`
	WillRain       bool    `protobuf:"varint,6,opt,name=willRain,proto3" json:"willRain,omitempty"`
	RainContinue   int32   `protobuf:"varint,7,opt,name=RainContinue,proto3" json:"RainContinue,omitempty"`
	RainCome       int32   `protobuf:"varint,8,opt,name=RainCome,proto3" json:"RainCome,omitempty"`
	TemperatureMax float32 `protobuf:"fixed32,9,opt,name=temperatureMax,proto3" json:"temperatureMax,omitempty"`
	TemperatureMin float32 `protobuf:"fixed32,10,opt,name=temperatureMin,proto3" json:"temperatureMin,omitempty"`
	TemperatureNow float32 `protobuf:"fixed32,11,opt,name=temperatureNow,proto3" json:"temperatureNow,omitempty"`
	Timestamp      int32   `protobuf:"varint,12,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *WeatherData) Reset() {
	*x = WeatherData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aggregatingapis_infostream_v1_infostream_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WeatherData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WeatherData) ProtoMessage() {}

func (x *WeatherData) ProtoReflect() protoreflect.Message {
	mi := &file_aggregatingapis_infostream_v1_infostream_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WeatherData.ProtoReflect.Descriptor instead.
func (*WeatherData) Descriptor() ([]byte, []int) {
	return file_aggregatingapis_infostream_v1_infostream_proto_rawDescGZIP(), []int{4}
}

func (x *WeatherData) GetAqi() int32 {
	if x != nil {
		return x.Aqi
	}
	return 0
}

func (x *WeatherData) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *WeatherData) GetSkyconNow() string {
	if x != nil {
		return x.SkyconNow
	}
	return ""
}

func (x *WeatherData) GetIsRain() bool {
	if x != nil {
		return x.IsRain
	}
	return false
}

func (x *WeatherData) GetWillStop() bool {
	if x != nil {
		return x.WillStop
	}
	return false
}

func (x *WeatherData) GetWillRain() bool {
	if x != nil {
		return x.WillRain
	}
	return false
}

func (x *WeatherData) GetRainContinue() int32 {
	if x != nil {
		return x.RainContinue
	}
	return 0
}

func (x *WeatherData) GetRainCome() int32 {
	if x != nil {
		return x.RainCome
	}
	return 0
}

func (x *WeatherData) GetTemperatureMax() float32 {
	if x != nil {
		return x.TemperatureMax
	}
	return 0
}

func (x *WeatherData) GetTemperatureMin() float32 {
	if x != nil {
		return x.TemperatureMin
	}
	return 0
}

func (x *WeatherData) GetTemperatureNow() float32 {
	if x != nil {
		return x.TemperatureNow
	}
	return 0
}

func (x *WeatherData) GetTimestamp() int32 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type ScheduleResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Available bool            `protobuf:"varint,1,opt,name=available,proto3" json:"available,omitempty"`
	Today     []*ScheduleData `protobuf:"bytes,2,rep,name=today,proto3" json:"today,omitempty"`
	Tomorrow  []*ScheduleData `protobuf:"bytes,3,rep,name=tomorrow,proto3" json:"tomorrow,omitempty"`
}

func (x *ScheduleResp) Reset() {
	*x = ScheduleResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aggregatingapis_infostream_v1_infostream_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScheduleResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduleResp) ProtoMessage() {}

func (x *ScheduleResp) ProtoReflect() protoreflect.Message {
	mi := &file_aggregatingapis_infostream_v1_infostream_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduleResp.ProtoReflect.Descriptor instead.
func (*ScheduleResp) Descriptor() ([]byte, []int) {
	return file_aggregatingapis_infostream_v1_infostream_proto_rawDescGZIP(), []int{5}
}

func (x *ScheduleResp) GetAvailable() bool {
	if x != nil {
		return x.Available
	}
	return false
}

func (x *ScheduleResp) GetToday() []*ScheduleData {
	if x != nil {
		return x.Today
	}
	return nil
}

func (x *ScheduleResp) GetTomorrow() []*ScheduleData {
	if x != nil {
		return x.Tomorrow
	}
	return nil
}

type ScheduleData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartSection int32  `protobuf:"varint,1,opt,name=startSection,proto3" json:"startSection,omitempty"`
	EndSection   int32  `protobuf:"varint,2,opt,name=endSection,proto3" json:"endSection,omitempty"`
	StartTime    string `protobuf:"bytes,3,opt,name=startTime,proto3" json:"startTime,omitempty"`
	EndTime      string `protobuf:"bytes,4,opt,name=endTime,proto3" json:"endTime,omitempty"`
	CourseName   string `protobuf:"bytes,5,opt,name=courseName,proto3" json:"courseName,omitempty"`
	Classroom    string `protobuf:"bytes,6,opt,name=classroom,proto3" json:"classroom,omitempty"`
	Teacher      string `protobuf:"bytes,7,opt,name=teacher,proto3" json:"teacher,omitempty"`
	Duration     string `protobuf:"bytes,8,opt,name=duration,proto3" json:"duration,omitempty"`
}

func (x *ScheduleData) Reset() {
	*x = ScheduleData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aggregatingapis_infostream_v1_infostream_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScheduleData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduleData) ProtoMessage() {}

func (x *ScheduleData) ProtoReflect() protoreflect.Message {
	mi := &file_aggregatingapis_infostream_v1_infostream_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduleData.ProtoReflect.Descriptor instead.
func (*ScheduleData) Descriptor() ([]byte, []int) {
	return file_aggregatingapis_infostream_v1_infostream_proto_rawDescGZIP(), []int{6}
}

func (x *ScheduleData) GetStartSection() int32 {
	if x != nil {
		return x.StartSection
	}
	return 0
}

func (x *ScheduleData) GetEndSection() int32 {
	if x != nil {
		return x.EndSection
	}
	return 0
}

func (x *ScheduleData) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *ScheduleData) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *ScheduleData) GetCourseName() string {
	if x != nil {
		return x.CourseName
	}
	return ""
}

func (x *ScheduleData) GetClassroom() string {
	if x != nil {
		return x.Classroom
	}
	return ""
}

func (x *ScheduleData) GetTeacher() string {
	if x != nil {
		return x.Teacher
	}
	return ""
}

func (x *ScheduleData) GetDuration() string {
	if x != nil {
		return x.Duration
	}
	return ""
}

type ExamResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Available bool        `protobuf:"varint,1,opt,name=available,proto3" json:"available,omitempty"`
	Data      []*ExamData `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *ExamResp) Reset() {
	*x = ExamResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aggregatingapis_infostream_v1_infostream_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExamResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExamResp) ProtoMessage() {}

func (x *ExamResp) ProtoReflect() protoreflect.Message {
	mi := &file_aggregatingapis_infostream_v1_infostream_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExamResp.ProtoReflect.Descriptor instead.
func (*ExamResp) Descriptor() ([]byte, []int) {
	return file_aggregatingapis_infostream_v1_infostream_proto_rawDescGZIP(), []int{7}
}

func (x *ExamResp) GetAvailable() bool {
	if x != nil {
		return x.Available
	}
	return false
}

func (x *ExamResp) GetData() []*ExamData {
	if x != nil {
		return x.Data
	}
	return nil
}

type ExamData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Classroom  string `protobuf:"bytes,1,opt,name=classroom,proto3" json:"classroom,omitempty"`
	Course     string `protobuf:"bytes,2,opt,name=course,proto3" json:"course,omitempty"`
	ExamTime   string `protobuf:"bytes,3,opt,name=examTime,proto3" json:"examTime,omitempty"`
	ExamType   string `protobuf:"bytes,4,opt,name=examType,proto3" json:"examType,omitempty"`
	SchoolYear string `protobuf:"bytes,5,opt,name=schoolYear,proto3" json:"schoolYear,omitempty"`
	Seat       string `protobuf:"bytes,6,opt,name=seat,proto3" json:"seat,omitempty"`
	SelectCode string `protobuf:"bytes,7,opt,name=selectCode,proto3" json:"selectCode,omitempty"`
	Semester   string `protobuf:"bytes,8,opt,name=semester,proto3" json:"semester,omitempty"`
	StaffId    string `protobuf:"bytes,9,opt,name=staffId,proto3" json:"staffId,omitempty"`
}

func (x *ExamData) Reset() {
	*x = ExamData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aggregatingapis_infostream_v1_infostream_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExamData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExamData) ProtoMessage() {}

func (x *ExamData) ProtoReflect() protoreflect.Message {
	mi := &file_aggregatingapis_infostream_v1_infostream_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExamData.ProtoReflect.Descriptor instead.
func (*ExamData) Descriptor() ([]byte, []int) {
	return file_aggregatingapis_infostream_v1_infostream_proto_rawDescGZIP(), []int{8}
}

func (x *ExamData) GetClassroom() string {
	if x != nil {
		return x.Classroom
	}
	return ""
}

func (x *ExamData) GetCourse() string {
	if x != nil {
		return x.Course
	}
	return ""
}

func (x *ExamData) GetExamTime() string {
	if x != nil {
		return x.ExamTime
	}
	return ""
}

func (x *ExamData) GetExamType() string {
	if x != nil {
		return x.ExamType
	}
	return ""
}

func (x *ExamData) GetSchoolYear() string {
	if x != nil {
		return x.SchoolYear
	}
	return ""
}

func (x *ExamData) GetSeat() string {
	if x != nil {
		return x.Seat
	}
	return ""
}

func (x *ExamData) GetSelectCode() string {
	if x != nil {
		return x.SelectCode
	}
	return ""
}

func (x *ExamData) GetSemester() string {
	if x != nil {
		return x.Semester
	}
	return ""
}

func (x *ExamData) GetStaffId() string {
	if x != nil {
		return x.StaffId
	}
	return ""
}

type ScoreResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Available bool         `protobuf:"varint,1,opt,name=available,proto3" json:"available,omitempty"`
	Data      []*ScoreData `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *ScoreResp) Reset() {
	*x = ScoreResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aggregatingapis_infostream_v1_infostream_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScoreResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScoreResp) ProtoMessage() {}

func (x *ScoreResp) ProtoReflect() protoreflect.Message {
	mi := &file_aggregatingapis_infostream_v1_infostream_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScoreResp.ProtoReflect.Descriptor instead.
func (*ScoreResp) Descriptor() ([]byte, []int) {
	return file_aggregatingapis_infostream_v1_infostream_proto_rawDescGZIP(), []int{9}
}

func (x *ScoreResp) GetAvailable() bool {
	if x != nil {
		return x.Available
	}
	return false
}

func (x *ScoreResp) GetData() []*ScoreData {
	if x != nil {
		return x.Data
	}
	return nil
}

type ScoreData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//学年
	SchoolYear string `protobuf:"bytes,1,opt,name=schoolYear,proto3" json:"schoolYear,omitempty"`
	//学期
	Semester string `protobuf:"bytes,2,opt,name=semester,proto3" json:"semester,omitempty"`
	//选课号
	SelectCode string `protobuf:"bytes,3,opt,name=selectCode,proto3" json:"selectCode,omitempty"`
	//最后分数
	Score string `protobuf:"bytes,4,opt,name=score,proto3" json:"score,omitempty"`
	//平时分
	ScoreDaily string `protobuf:"bytes,5,opt,name=scoreDaily,proto3" json:"scoreDaily,omitempty"`
	//期中分数
	ScoreMidTerm string `protobuf:"bytes,6,opt,name=scoreMidTerm,proto3" json:"scoreMidTerm,omitempty"`
	//期末分数
	ScoreFinal string `protobuf:"bytes,7,opt,name=scoreFinal,proto3" json:"scoreFinal,omitempty"`
	//补考分数
	ScoreSubstitute string `protobuf:"bytes,8,opt,name=scoreSubstitute,proto3" json:"scoreSubstitute,omitempty"`
	//实验分数
	ScorePractice string `protobuf:"bytes,9,opt,name=scorePractice,proto3" json:"scorePractice,omitempty"`
	//课程号
	CourseCode string `protobuf:"bytes,10,opt,name=courseCode,proto3" json:"courseCode,omitempty"`
	//课程名
	Course string `protobuf:"bytes,11,opt,name=course,proto3" json:"course,omitempty"`
	//学号
	StaffId string `protobuf:"bytes,12,opt,name=staffId,proto3" json:"staffId,omitempty"`
	//姓名
	StaffName string `protobuf:"bytes,13,opt,name=staffName,proto3" json:"staffName,omitempty"`
	//学分
	Credit string `protobuf:"bytes,14,opt,name=credit,proto3" json:"credit,omitempty"`
	//GPA
	GPA string `protobuf:"bytes,15,opt,name=GPA,proto3" json:"GPA,omitempty"`
}

func (x *ScoreData) Reset() {
	*x = ScoreData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aggregatingapis_infostream_v1_infostream_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScoreData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScoreData) ProtoMessage() {}

func (x *ScoreData) ProtoReflect() protoreflect.Message {
	mi := &file_aggregatingapis_infostream_v1_infostream_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScoreData.ProtoReflect.Descriptor instead.
func (*ScoreData) Descriptor() ([]byte, []int) {
	return file_aggregatingapis_infostream_v1_infostream_proto_rawDescGZIP(), []int{10}
}

func (x *ScoreData) GetSchoolYear() string {
	if x != nil {
		return x.SchoolYear
	}
	return ""
}

func (x *ScoreData) GetSemester() string {
	if x != nil {
		return x.Semester
	}
	return ""
}

func (x *ScoreData) GetSelectCode() string {
	if x != nil {
		return x.SelectCode
	}
	return ""
}

func (x *ScoreData) GetScore() string {
	if x != nil {
		return x.Score
	}
	return ""
}

func (x *ScoreData) GetScoreDaily() string {
	if x != nil {
		return x.ScoreDaily
	}
	return ""
}

func (x *ScoreData) GetScoreMidTerm() string {
	if x != nil {
		return x.ScoreMidTerm
	}
	return ""
}

func (x *ScoreData) GetScoreFinal() string {
	if x != nil {
		return x.ScoreFinal
	}
	return ""
}

func (x *ScoreData) GetScoreSubstitute() string {
	if x != nil {
		return x.ScoreSubstitute
	}
	return ""
}

func (x *ScoreData) GetScorePractice() string {
	if x != nil {
		return x.ScorePractice
	}
	return ""
}

func (x *ScoreData) GetCourseCode() string {
	if x != nil {
		return x.CourseCode
	}
	return ""
}

func (x *ScoreData) GetCourse() string {
	if x != nil {
		return x.Course
	}
	return ""
}

func (x *ScoreData) GetStaffId() string {
	if x != nil {
		return x.StaffId
	}
	return ""
}

func (x *ScoreData) GetStaffName() string {
	if x != nil {
		return x.StaffName
	}
	return ""
}

func (x *ScoreData) GetCredit() string {
	if x != nil {
		return x.Credit
	}
	return ""
}

func (x *ScoreData) GetGPA() string {
	if x != nil {
		return x.GPA
	}
	return ""
}

type SunRunResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Available bool        `protobuf:"varint,1,opt,name=available,proto3" json:"available,omitempty"`
	Data      *SunRunData `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *SunRunResp) Reset() {
	*x = SunRunResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aggregatingapis_infostream_v1_infostream_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SunRunResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SunRunResp) ProtoMessage() {}

func (x *SunRunResp) ProtoReflect() protoreflect.Message {
	mi := &file_aggregatingapis_infostream_v1_infostream_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SunRunResp.ProtoReflect.Descriptor instead.
func (*SunRunResp) Descriptor() ([]byte, []int) {
	return file_aggregatingapis_infostream_v1_infostream_proto_rawDescGZIP(), []int{11}
}

func (x *SunRunResp) GetAvailable() bool {
	if x != nil {
		return x.Available
	}
	return false
}

func (x *SunRunResp) GetData() *SunRunData {
	if x != nil {
		return x.Data
	}
	return nil
}

type SunRunData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AmMileage     int32   `protobuf:"varint,1,opt,name=amMileage,proto3" json:"amMileage,omitempty"`
	AmSpeed       float64 `protobuf:"fixed64,2,opt,name=amSpeed,proto3" json:"amSpeed,omitempty"`
	CreatedAt     string  `protobuf:"bytes,3,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	DataUpdatedAt string  `protobuf:"bytes,4,opt,name=dataUpdatedAt,proto3" json:"dataUpdatedAt,omitempty"`
	Date          string  `protobuf:"bytes,5,opt,name=date,proto3" json:"date,omitempty"`
	Days          int32   `protobuf:"varint,6,opt,name=days,proto3" json:"days,omitempty"`
	FinalTimes    int32   `protobuf:"varint,7,opt,name=finalTimes,proto3" json:"finalTimes,omitempty"`
	Name          string  `protobuf:"bytes,8,opt,name=name,proto3" json:"name,omitempty"`
	PmMileage     int32   `protobuf:"varint,9,opt,name=pmMileage,proto3" json:"pmMileage,omitempty"`
	PmSpeed       float64 `protobuf:"fixed64,10,opt,name=pmSpeed,proto3" json:"pmSpeed,omitempty"`
	Rand          int32   `protobuf:"varint,11,opt,name=rand,proto3" json:"rand,omitempty"`
	Sex           string  `protobuf:"bytes,12,opt,name=sex,proto3" json:"sex,omitempty"`
	Speed         float64 `protobuf:"fixed64,13,opt,name=speed,proto3" json:"speed,omitempty"`
	TotalMileages int32   `protobuf:"varint,14,opt,name=totalMileages,proto3" json:"totalMileages,omitempty"`
	UpdatedAt     string  `protobuf:"bytes,15,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	ValidMileages int32   `protobuf:"varint,16,opt,name=validMileages,proto3" json:"validMileages,omitempty"`
	ValidTimes    int32   `protobuf:"varint,17,opt,name=validTimes,proto3" json:"validTimes,omitempty"`
	Code          string  `protobuf:"bytes,18,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *SunRunData) Reset() {
	*x = SunRunData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aggregatingapis_infostream_v1_infostream_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SunRunData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SunRunData) ProtoMessage() {}

func (x *SunRunData) ProtoReflect() protoreflect.Message {
	mi := &file_aggregatingapis_infostream_v1_infostream_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SunRunData.ProtoReflect.Descriptor instead.
func (*SunRunData) Descriptor() ([]byte, []int) {
	return file_aggregatingapis_infostream_v1_infostream_proto_rawDescGZIP(), []int{12}
}

func (x *SunRunData) GetAmMileage() int32 {
	if x != nil {
		return x.AmMileage
	}
	return 0
}

func (x *SunRunData) GetAmSpeed() float64 {
	if x != nil {
		return x.AmSpeed
	}
	return 0
}

func (x *SunRunData) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *SunRunData) GetDataUpdatedAt() string {
	if x != nil {
		return x.DataUpdatedAt
	}
	return ""
}

func (x *SunRunData) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *SunRunData) GetDays() int32 {
	if x != nil {
		return x.Days
	}
	return 0
}

func (x *SunRunData) GetFinalTimes() int32 {
	if x != nil {
		return x.FinalTimes
	}
	return 0
}

func (x *SunRunData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SunRunData) GetPmMileage() int32 {
	if x != nil {
		return x.PmMileage
	}
	return 0
}

func (x *SunRunData) GetPmSpeed() float64 {
	if x != nil {
		return x.PmSpeed
	}
	return 0
}

func (x *SunRunData) GetRand() int32 {
	if x != nil {
		return x.Rand
	}
	return 0
}

func (x *SunRunData) GetSex() string {
	if x != nil {
		return x.Sex
	}
	return ""
}

func (x *SunRunData) GetSpeed() float64 {
	if x != nil {
		return x.Speed
	}
	return 0
}

func (x *SunRunData) GetTotalMileages() int32 {
	if x != nil {
		return x.TotalMileages
	}
	return 0
}

func (x *SunRunData) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *SunRunData) GetValidMileages() int32 {
	if x != nil {
		return x.ValidMileages
	}
	return 0
}

func (x *SunRunData) GetValidTimes() int32 {
	if x != nil {
		return x.ValidTimes
	}
	return 0
}

func (x *SunRunData) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type CardResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Available bool    `protobuf:"varint,1,opt,name=available,proto3" json:"available,omitempty"`
	Data      float32 `protobuf:"fixed32,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CardResp) Reset() {
	*x = CardResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aggregatingapis_infostream_v1_infostream_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardResp) ProtoMessage() {}

func (x *CardResp) ProtoReflect() protoreflect.Message {
	mi := &file_aggregatingapis_infostream_v1_infostream_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardResp.ProtoReflect.Descriptor instead.
func (*CardResp) Descriptor() ([]byte, []int) {
	return file_aggregatingapis_infostream_v1_infostream_proto_rawDescGZIP(), []int{13}
}

func (x *CardResp) GetAvailable() bool {
	if x != nil {
		return x.Available
	}
	return false
}

func (x *CardResp) GetData() float32 {
	if x != nil {
		return x.Data
	}
	return 0
}

type ElectricResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Available bool          `protobuf:"varint,1,opt,name=available,proto3" json:"available,omitempty"`
	Data      *ElectricData `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ElectricResp) Reset() {
	*x = ElectricResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aggregatingapis_infostream_v1_infostream_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElectricResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElectricResp) ProtoMessage() {}

func (x *ElectricResp) ProtoReflect() protoreflect.Message {
	mi := &file_aggregatingapis_infostream_v1_infostream_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElectricResp.ProtoReflect.Descriptor instead.
func (*ElectricResp) Descriptor() ([]byte, []int) {
	return file_aggregatingapis_infostream_v1_infostream_proto_rawDescGZIP(), []int{14}
}

func (x *ElectricResp) GetAvailable() bool {
	if x != nil {
		return x.Available
	}
	return false
}

func (x *ElectricResp) GetData() *ElectricData {
	if x != nil {
		return x.Data
	}
	return nil
}

type ElectricData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fee      string `protobuf:"bytes,1,opt,name=fee,proto3" json:"fee,omitempty"`
	RoomId   string `protobuf:"bytes,2,opt,name=roomId,proto3" json:"roomId,omitempty"`
	RoomName string `protobuf:"bytes,3,opt,name=roomName,proto3" json:"roomName,omitempty"`
}

func (x *ElectricData) Reset() {
	*x = ElectricData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aggregatingapis_infostream_v1_infostream_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElectricData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElectricData) ProtoMessage() {}

func (x *ElectricData) ProtoReflect() protoreflect.Message {
	mi := &file_aggregatingapis_infostream_v1_infostream_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElectricData.ProtoReflect.Descriptor instead.
func (*ElectricData) Descriptor() ([]byte, []int) {
	return file_aggregatingapis_infostream_v1_infostream_proto_rawDescGZIP(), []int{15}
}

func (x *ElectricData) GetFee() string {
	if x != nil {
		return x.Fee
	}
	return ""
}

func (x *ElectricData) GetRoomId() string {
	if x != nil {
		return x.RoomId
	}
	return ""
}

func (x *ElectricData) GetRoomName() string {
	if x != nil {
		return x.RoomName
	}
	return ""
}

var File_aggregatingapis_infostream_v1_infostream_proto protoreflect.FileDescriptor

var file_aggregatingapis_infostream_v1_infostream_proto_rawDesc = []byte{
	0x0a, 0x2e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x61, 0x70, 0x69,
	0x73, 0x2f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2f, 0x76, 0x31, 0x2f,
	0x69, 0x6e, 0x66, 0x6f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x1d, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x1a,
	0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x30, 0x0a,
	0x14, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x66, 0x66, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x74, 0x61, 0x66, 0x66, 0x49, 0x64, 0x22,
	0x82, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73,
	0x67, 0x12, 0x41, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x6e, 0x66, 0x6f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0xe5, 0x03, 0x0a, 0x0e, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x12, 0x44, 0x0a, 0x07, 0x77, 0x65, 0x61, 0x74, 0x68,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x52, 0x07, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x12, 0x47, 0x0a,
	0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x52, 0x08, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x3b, 0x0a, 0x04, 0x65, 0x78, 0x61, 0x6d, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x52, 0x04, 0x65,
	0x78, 0x61, 0x6d, 0x12, 0x3e, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x52, 0x05, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x12, 0x41, 0x0a, 0x06, 0x73, 0x75, 0x6e, 0x72, 0x75, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x6e, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x52, 0x06,
	0x73, 0x75, 0x6e, 0x72, 0x75, 0x6e, 0x12, 0x3b, 0x0a, 0x04, 0x63, 0x61, 0x72, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x52, 0x04, 0x63,
	0x61, 0x72, 0x64, 0x12, 0x47, 0x0a, 0x08, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x52, 0x65,
	0x73, 0x70, 0x52, 0x08, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x22, 0x6b, 0x0a, 0x0b,
	0x57, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x61,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x3e, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xf7, 0x02, 0x0a, 0x0b, 0x57, 0x65,
	0x61, 0x74, 0x68, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x71, 0x69,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x61, 0x71, 0x69, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x65, 0x73, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12,
	0x1c, 0x0a, 0x09, 0x73, 0x6b, 0x79, 0x63, 0x6f, 0x6e, 0x4e, 0x6f, 0x77, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x6b, 0x79, 0x63, 0x6f, 0x6e, 0x4e, 0x6f, 0x77, 0x12, 0x16, 0x0a,
	0x06, 0x69, 0x73, 0x52, 0x61, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69,
	0x73, 0x52, 0x61, 0x69, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x77, 0x69, 0x6c, 0x6c, 0x53, 0x74, 0x6f,
	0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x77, 0x69, 0x6c, 0x6c, 0x53, 0x74, 0x6f,
	0x70, 0x12, 0x1a, 0x0a, 0x08, 0x77, 0x69, 0x6c, 0x6c, 0x52, 0x61, 0x69, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x77, 0x69, 0x6c, 0x6c, 0x52, 0x61, 0x69, 0x6e, 0x12, 0x22, 0x0a,
	0x0c, 0x52, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x52, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6d, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x52, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6d, 0x65, 0x12, 0x26, 0x0a,
	0x0e, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4d, 0x61, 0x78, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x4d, 0x61, 0x78, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x4d, 0x69, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x74,
	0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4d, 0x69, 0x6e, 0x12, 0x26, 0x0a,
	0x0e, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4e, 0x6f, 0x77, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x4e, 0x6f, 0x77, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x22, 0xb8, 0x01, 0x0a, 0x0c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x41, 0x0a, 0x05, 0x74, 0x6f, 0x64, 0x61, 0x79, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05,
	0x74, 0x6f, 0x64, 0x61, 0x79, 0x12, 0x47, 0x0a, 0x08, 0x74, 0x6f, 0x6d, 0x6f, 0x72, 0x72, 0x6f,
	0x77, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x74, 0x6f, 0x6d, 0x6f, 0x72, 0x72, 0x6f, 0x77, 0x22, 0xfe,
	0x01, 0x0a, 0x0c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x22, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x53, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x6e, 0x64, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x65, 0x6e, 0x64, 0x53, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63,
	0x6f, 0x75, 0x72, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x72, 0x6f, 0x6f, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x72, 0x6f, 0x6f, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x65, 0x61,
	0x63, 0x68, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x65, 0x61, 0x63,
	0x68, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x65, 0x0a, 0x08, 0x45, 0x78, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x61,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x3b, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x82, 0x02, 0x0a, 0x08, 0x45, 0x78, 0x61, 0x6d, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x72, 0x6f, 0x6f, 0x6d,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x72, 0x6f, 0x6f,
	0x6d, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x61,
	0x6d, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x78, 0x61,
	0x6d, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x61, 0x6d, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x78, 0x61, 0x6d, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x59, 0x65, 0x61, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x59, 0x65, 0x61,
	0x72, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x65, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x73, 0x65, 0x61, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x6d, 0x65, 0x73, 0x74, 0x65,
	0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x6d, 0x65, 0x73, 0x74, 0x65,
	0x72, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x66, 0x66, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x73, 0x74, 0x61, 0x66, 0x66, 0x49, 0x64, 0x22, 0x67, 0x0a, 0x09, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x3c, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0xcb, 0x03, 0x0a, 0x09, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x59, 0x65, 0x61, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x59, 0x65,
	0x61, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x6d, 0x65, 0x73, 0x74, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x6d, 0x65, 0x73, 0x74, 0x65, 0x72, 0x12, 0x1e,
	0x0a, 0x0a, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x44, 0x61, 0x69,
	0x6c, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x44,
	0x61, 0x69, 0x6c, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x4d, 0x69, 0x64,
	0x54, 0x65, 0x72, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x4d, 0x69, 0x64, 0x54, 0x65, 0x72, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x53, 0x75, 0x62, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x53, 0x75, 0x62, 0x73, 0x74, 0x69, 0x74, 0x75,
	0x74, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x50, 0x72, 0x61, 0x63, 0x74,
	0x69, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x75, 0x72,
	0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f,
	0x75, 0x72, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x75, 0x72,
	0x73, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x66, 0x66, 0x49, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x73, 0x74, 0x61, 0x66, 0x66, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74,
	0x61, 0x66, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x66, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x72, 0x65, 0x64,
	0x69, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x47, 0x50, 0x41, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x47,
	0x50, 0x41, 0x22, 0x69, 0x0a, 0x0a, 0x53, 0x75, 0x6e, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x1c, 0x0a, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x3d,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x69,
	0x6e, 0x66, 0x6f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x6e,
	0x52, 0x75, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xf6, 0x03,
	0x0a, 0x0a, 0x53, 0x75, 0x6e, 0x52, 0x75, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09,
	0x61, 0x6d, 0x4d, 0x69, 0x6c, 0x65, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x61, 0x6d, 0x4d, 0x69, 0x6c, 0x65, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x6d,
	0x53, 0x70, 0x65, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x61, 0x6d, 0x53,
	0x70, 0x65, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x61, 0x79, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x64, 0x61, 0x79, 0x73,
	0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x6d, 0x4d, 0x69, 0x6c, 0x65, 0x61, 0x67,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x6d, 0x4d, 0x69, 0x6c, 0x65, 0x61,
	0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x6d, 0x53, 0x70, 0x65, 0x65, 0x64, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x07, 0x70, 0x6d, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x72, 0x61, 0x6e, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x64,
	0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x78, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73,
	0x65, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x4d, 0x69, 0x6c, 0x65, 0x61, 0x67, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x69, 0x6c, 0x65, 0x61, 0x67, 0x65, 0x73, 0x12, 0x1c,
	0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x24, 0x0a, 0x0d,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x69, 0x6c, 0x65, 0x61, 0x67, 0x65, 0x73, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x69, 0x6c, 0x65, 0x61, 0x67,
	0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x3c, 0x0a, 0x08, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x6d, 0x0a, 0x0c, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x3f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x54, 0x0a, 0x0c, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x66, 0x65, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x72, 0x6f, 0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x72, 0x6f, 0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x32, 0xa8, 0x01, 0x0a, 0x11, 0x49, 0x6e,
	0x66, 0x6f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x92, 0x01, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x12, 0x33, 0x2e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x16, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x10, 0x12, 0x0e, 0x2f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x2f, 0x76, 0x31, 0x42, 0x96, 0x02, 0x0a, 0x21, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x66,
	0x6f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x42, 0x0f, 0x49, 0x6e, 0x66, 0x6f,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x4a, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x68, 0x64, 0x75, 0x68, 0x65, 0x6c,
	0x70, 0x2f, 0x61, 0x70, 0x69, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x73, 0x64, 0x6b, 0x2f, 0x61,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x69,
	0x6e, 0x66, 0x6f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2f, 0x76, 0x31, 0x3b, 0x69, 0x6e, 0x66,
	0x6f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x41, 0x49, 0x58, 0xaa,
	0x02, 0x1d, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x56, 0x31, 0xca,
	0x02, 0x1d, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x61, 0x70, 0x69,
	0x73, 0x5c, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5c, 0x56, 0x31, 0xe2,
	0x02, 0x29, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x61, 0x70, 0x69,
	0x73, 0x5c, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5c, 0x56, 0x31, 0x5c,
	0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x1f, 0x41, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x61, 0x70, 0x69, 0x73, 0x3a, 0x3a, 0x49,
	0x6e, 0x66, 0x6f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_aggregatingapis_infostream_v1_infostream_proto_rawDescOnce sync.Once
	file_aggregatingapis_infostream_v1_infostream_proto_rawDescData = file_aggregatingapis_infostream_v1_infostream_proto_rawDesc
)

func file_aggregatingapis_infostream_v1_infostream_proto_rawDescGZIP() []byte {
	file_aggregatingapis_infostream_v1_infostream_proto_rawDescOnce.Do(func() {
		file_aggregatingapis_infostream_v1_infostream_proto_rawDescData = protoimpl.X.CompressGZIP(file_aggregatingapis_infostream_v1_infostream_proto_rawDescData)
	})
	return file_aggregatingapis_infostream_v1_infostream_proto_rawDescData
}

var file_aggregatingapis_infostream_v1_infostream_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_aggregatingapis_infostream_v1_infostream_proto_goTypes = []interface{}{
	(*GetInfoStreamRequest)(nil),  // 0: aggregatingapis.infostream.v1.GetInfoStreamRequest
	(*GetInfoStreamResponse)(nil), // 1: aggregatingapis.infostream.v1.GetInfoStreamResponse
	(*InfoStreamData)(nil),        // 2: aggregatingapis.infostream.v1.InfoStreamData
	(*WeatherResp)(nil),           // 3: aggregatingapis.infostream.v1.WeatherResp
	(*WeatherData)(nil),           // 4: aggregatingapis.infostream.v1.WeatherData
	(*ScheduleResp)(nil),          // 5: aggregatingapis.infostream.v1.ScheduleResp
	(*ScheduleData)(nil),          // 6: aggregatingapis.infostream.v1.ScheduleData
	(*ExamResp)(nil),              // 7: aggregatingapis.infostream.v1.ExamResp
	(*ExamData)(nil),              // 8: aggregatingapis.infostream.v1.ExamData
	(*ScoreResp)(nil),             // 9: aggregatingapis.infostream.v1.ScoreResp
	(*ScoreData)(nil),             // 10: aggregatingapis.infostream.v1.ScoreData
	(*SunRunResp)(nil),            // 11: aggregatingapis.infostream.v1.SunRunResp
	(*SunRunData)(nil),            // 12: aggregatingapis.infostream.v1.SunRunData
	(*CardResp)(nil),              // 13: aggregatingapis.infostream.v1.CardResp
	(*ElectricResp)(nil),          // 14: aggregatingapis.infostream.v1.ElectricResp
	(*ElectricData)(nil),          // 15: aggregatingapis.infostream.v1.ElectricData
}
var file_aggregatingapis_infostream_v1_infostream_proto_depIdxs = []int32{
	2,  // 0: aggregatingapis.infostream.v1.GetInfoStreamResponse.data:type_name -> aggregatingapis.infostream.v1.InfoStreamData
	3,  // 1: aggregatingapis.infostream.v1.InfoStreamData.weather:type_name -> aggregatingapis.infostream.v1.WeatherResp
	5,  // 2: aggregatingapis.infostream.v1.InfoStreamData.schedule:type_name -> aggregatingapis.infostream.v1.ScheduleResp
	7,  // 3: aggregatingapis.infostream.v1.InfoStreamData.exam:type_name -> aggregatingapis.infostream.v1.ExamResp
	9,  // 4: aggregatingapis.infostream.v1.InfoStreamData.score:type_name -> aggregatingapis.infostream.v1.ScoreResp
	11, // 5: aggregatingapis.infostream.v1.InfoStreamData.sunrun:type_name -> aggregatingapis.infostream.v1.SunRunResp
	13, // 6: aggregatingapis.infostream.v1.InfoStreamData.card:type_name -> aggregatingapis.infostream.v1.CardResp
	14, // 7: aggregatingapis.infostream.v1.InfoStreamData.electric:type_name -> aggregatingapis.infostream.v1.ElectricResp
	4,  // 8: aggregatingapis.infostream.v1.WeatherResp.data:type_name -> aggregatingapis.infostream.v1.WeatherData
	6,  // 9: aggregatingapis.infostream.v1.ScheduleResp.today:type_name -> aggregatingapis.infostream.v1.ScheduleData
	6,  // 10: aggregatingapis.infostream.v1.ScheduleResp.tomorrow:type_name -> aggregatingapis.infostream.v1.ScheduleData
	8,  // 11: aggregatingapis.infostream.v1.ExamResp.data:type_name -> aggregatingapis.infostream.v1.ExamData
	10, // 12: aggregatingapis.infostream.v1.ScoreResp.data:type_name -> aggregatingapis.infostream.v1.ScoreData
	12, // 13: aggregatingapis.infostream.v1.SunRunResp.data:type_name -> aggregatingapis.infostream.v1.SunRunData
	15, // 14: aggregatingapis.infostream.v1.ElectricResp.data:type_name -> aggregatingapis.infostream.v1.ElectricData
	0,  // 15: aggregatingapis.infostream.v1.InfoStreamService.GetInfoStream:input_type -> aggregatingapis.infostream.v1.GetInfoStreamRequest
	1,  // 16: aggregatingapis.infostream.v1.InfoStreamService.GetInfoStream:output_type -> aggregatingapis.infostream.v1.GetInfoStreamResponse
	16, // [16:17] is the sub-list for method output_type
	15, // [15:16] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_aggregatingapis_infostream_v1_infostream_proto_init() }
func file_aggregatingapis_infostream_v1_infostream_proto_init() {
	if File_aggregatingapis_infostream_v1_infostream_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_aggregatingapis_infostream_v1_infostream_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInfoStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aggregatingapis_infostream_v1_infostream_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInfoStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aggregatingapis_infostream_v1_infostream_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InfoStreamData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aggregatingapis_infostream_v1_infostream_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WeatherResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aggregatingapis_infostream_v1_infostream_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WeatherData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aggregatingapis_infostream_v1_infostream_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScheduleResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aggregatingapis_infostream_v1_infostream_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScheduleData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aggregatingapis_infostream_v1_infostream_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExamResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aggregatingapis_infostream_v1_infostream_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExamData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aggregatingapis_infostream_v1_infostream_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScoreResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aggregatingapis_infostream_v1_infostream_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScoreData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aggregatingapis_infostream_v1_infostream_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SunRunResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aggregatingapis_infostream_v1_infostream_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SunRunData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aggregatingapis_infostream_v1_infostream_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aggregatingapis_infostream_v1_infostream_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElectricResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aggregatingapis_infostream_v1_infostream_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElectricData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_aggregatingapis_infostream_v1_infostream_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_aggregatingapis_infostream_v1_infostream_proto_goTypes,
		DependencyIndexes: file_aggregatingapis_infostream_v1_infostream_proto_depIdxs,
		MessageInfos:      file_aggregatingapis_infostream_v1_infostream_proto_msgTypes,
	}.Build()
	File_aggregatingapis_infostream_v1_infostream_proto = out.File
	file_aggregatingapis_infostream_v1_infostream_proto_rawDesc = nil
	file_aggregatingapis_infostream_v1_infostream_proto_goTypes = nil
	file_aggregatingapis_infostream_v1_infostream_proto_depIdxs = nil
}
