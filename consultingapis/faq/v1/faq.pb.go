// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1-devel
// 	protoc        (unknown)
// source: consultingapis/faq/v1/faq.proto

package faqv1

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateFAQRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *FAQInfo `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CreateFAQRequest) Reset() {
	*x = CreateFAQRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consultingapis_faq_v1_faq_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateFAQRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFAQRequest) ProtoMessage() {}

func (x *CreateFAQRequest) ProtoReflect() protoreflect.Message {
	mi := &file_consultingapis_faq_v1_faq_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFAQRequest.ProtoReflect.Descriptor instead.
func (*CreateFAQRequest) Descriptor() ([]byte, []int) {
	return file_consultingapis_faq_v1_faq_proto_rawDescGZIP(), []int{0}
}

func (x *CreateFAQRequest) GetData() *FAQInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type CreateFAQResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error int32  `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Msg   string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data  *FAQ   `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CreateFAQResponse) Reset() {
	*x = CreateFAQResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consultingapis_faq_v1_faq_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateFAQResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFAQResponse) ProtoMessage() {}

func (x *CreateFAQResponse) ProtoReflect() protoreflect.Message {
	mi := &file_consultingapis_faq_v1_faq_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFAQResponse.ProtoReflect.Descriptor instead.
func (*CreateFAQResponse) Descriptor() ([]byte, []int) {
	return file_consultingapis_faq_v1_faq_proto_rawDescGZIP(), []int{1}
}

func (x *CreateFAQResponse) GetError() int32 {
	if x != nil {
		return x.Error
	}
	return 0
}

func (x *CreateFAQResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *CreateFAQResponse) GetData() *FAQ {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetFAQRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FaqId string `protobuf:"bytes,1,opt,name=faq_id,json=faqId,proto3" json:"faq_id,omitempty"`
}

func (x *GetFAQRequest) Reset() {
	*x = GetFAQRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consultingapis_faq_v1_faq_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFAQRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFAQRequest) ProtoMessage() {}

func (x *GetFAQRequest) ProtoReflect() protoreflect.Message {
	mi := &file_consultingapis_faq_v1_faq_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFAQRequest.ProtoReflect.Descriptor instead.
func (*GetFAQRequest) Descriptor() ([]byte, []int) {
	return file_consultingapis_faq_v1_faq_proto_rawDescGZIP(), []int{2}
}

func (x *GetFAQRequest) GetFaqId() string {
	if x != nil {
		return x.FaqId
	}
	return ""
}

type GetFAQResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error int32  `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Msg   string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data  *FAQ   `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetFAQResponse) Reset() {
	*x = GetFAQResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consultingapis_faq_v1_faq_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFAQResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFAQResponse) ProtoMessage() {}

func (x *GetFAQResponse) ProtoReflect() protoreflect.Message {
	mi := &file_consultingapis_faq_v1_faq_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFAQResponse.ProtoReflect.Descriptor instead.
func (*GetFAQResponse) Descriptor() ([]byte, []int) {
	return file_consultingapis_faq_v1_faq_proto_rawDescGZIP(), []int{3}
}

func (x *GetFAQResponse) GetError() int32 {
	if x != nil {
		return x.Error
	}
	return 0
}

func (x *GetFAQResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetFAQResponse) GetData() *FAQ {
	if x != nil {
		return x.Data
	}
	return nil
}

type UpdateFAQRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FaqId string   `protobuf:"bytes,1,opt,name=faq_id,json=faqId,proto3" json:"faq_id,omitempty"`
	Data  *FAQInfo `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *UpdateFAQRequest) Reset() {
	*x = UpdateFAQRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consultingapis_faq_v1_faq_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateFAQRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFAQRequest) ProtoMessage() {}

func (x *UpdateFAQRequest) ProtoReflect() protoreflect.Message {
	mi := &file_consultingapis_faq_v1_faq_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFAQRequest.ProtoReflect.Descriptor instead.
func (*UpdateFAQRequest) Descriptor() ([]byte, []int) {
	return file_consultingapis_faq_v1_faq_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateFAQRequest) GetFaqId() string {
	if x != nil {
		return x.FaqId
	}
	return ""
}

func (x *UpdateFAQRequest) GetData() *FAQInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type UpdateFAQResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error int32  `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Msg   string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data  *FAQ   `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *UpdateFAQResponse) Reset() {
	*x = UpdateFAQResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consultingapis_faq_v1_faq_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateFAQResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFAQResponse) ProtoMessage() {}

func (x *UpdateFAQResponse) ProtoReflect() protoreflect.Message {
	mi := &file_consultingapis_faq_v1_faq_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFAQResponse.ProtoReflect.Descriptor instead.
func (*UpdateFAQResponse) Descriptor() ([]byte, []int) {
	return file_consultingapis_faq_v1_faq_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateFAQResponse) GetError() int32 {
	if x != nil {
		return x.Error
	}
	return 0
}

func (x *UpdateFAQResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *UpdateFAQResponse) GetData() *FAQ {
	if x != nil {
		return x.Data
	}
	return nil
}

type DeleteFAQRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FaqId string `protobuf:"bytes,1,opt,name=faq_id,json=faqId,proto3" json:"faq_id,omitempty"`
}

func (x *DeleteFAQRequest) Reset() {
	*x = DeleteFAQRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consultingapis_faq_v1_faq_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteFAQRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFAQRequest) ProtoMessage() {}

func (x *DeleteFAQRequest) ProtoReflect() protoreflect.Message {
	mi := &file_consultingapis_faq_v1_faq_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFAQRequest.ProtoReflect.Descriptor instead.
func (*DeleteFAQRequest) Descriptor() ([]byte, []int) {
	return file_consultingapis_faq_v1_faq_proto_rawDescGZIP(), []int{6}
}

func (x *DeleteFAQRequest) GetFaqId() string {
	if x != nil {
		return x.FaqId
	}
	return ""
}

type DeleteFAQResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error int32  `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Msg   string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *DeleteFAQResponse) Reset() {
	*x = DeleteFAQResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consultingapis_faq_v1_faq_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteFAQResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFAQResponse) ProtoMessage() {}

func (x *DeleteFAQResponse) ProtoReflect() protoreflect.Message {
	mi := &file_consultingapis_faq_v1_faq_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFAQResponse.ProtoReflect.Descriptor instead.
func (*DeleteFAQResponse) Descriptor() ([]byte, []int) {
	return file_consultingapis_faq_v1_faq_proto_rawDescGZIP(), []int{7}
}

func (x *DeleteFAQResponse) GetError() int32 {
	if x != nil {
		return x.Error
	}
	return 0
}

func (x *DeleteFAQResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type FAQUpdateInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FaqId string   `protobuf:"bytes,1,opt,name=faq_id,json=faqId,proto3" json:"faq_id,omitempty"`
	Info  *FAQInfo `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *FAQUpdateInfo) Reset() {
	*x = FAQUpdateInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consultingapis_faq_v1_faq_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FAQUpdateInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FAQUpdateInfo) ProtoMessage() {}

func (x *FAQUpdateInfo) ProtoReflect() protoreflect.Message {
	mi := &file_consultingapis_faq_v1_faq_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FAQUpdateInfo.ProtoReflect.Descriptor instead.
func (*FAQUpdateInfo) Descriptor() ([]byte, []int) {
	return file_consultingapis_faq_v1_faq_proto_rawDescGZIP(), []int{8}
}

func (x *FAQUpdateInfo) GetFaqId() string {
	if x != nil {
		return x.FaqId
	}
	return ""
}

func (x *FAQUpdateInfo) GetInfo() *FAQInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type FAQInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CategoryId     string   `protobuf:"bytes,1,opt,name=category_id,json=categoryId,proto3" json:"category_id,omitempty"`
	Question       string   `protobuf:"bytes,2,opt,name=question,proto3" json:"question,omitempty"`
	Answer         string   `protobuf:"bytes,3,opt,name=answer,proto3" json:"answer,omitempty"`
	AnswerRichtext string   `protobuf:"bytes,4,opt,name=answer_richtext,json=answerRichtext,proto3" json:"answer_richtext,omitempty"`
	Tags           []string `protobuf:"bytes,5,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *FAQInfo) Reset() {
	*x = FAQInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consultingapis_faq_v1_faq_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FAQInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FAQInfo) ProtoMessage() {}

func (x *FAQInfo) ProtoReflect() protoreflect.Message {
	mi := &file_consultingapis_faq_v1_faq_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FAQInfo.ProtoReflect.Descriptor instead.
func (*FAQInfo) Descriptor() ([]byte, []int) {
	return file_consultingapis_faq_v1_faq_proto_rawDescGZIP(), []int{9}
}

func (x *FAQInfo) GetCategoryId() string {
	if x != nil {
		return x.CategoryId
	}
	return ""
}

func (x *FAQInfo) GetQuestion() string {
	if x != nil {
		return x.Question
	}
	return ""
}

func (x *FAQInfo) GetAnswer() string {
	if x != nil {
		return x.Answer
	}
	return ""
}

func (x *FAQInfo) GetAnswerRichtext() string {
	if x != nil {
		return x.AnswerRichtext
	}
	return ""
}

func (x *FAQInfo) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type GetFAQImageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FaqId    string `protobuf:"bytes,1,opt,name=faq_id,json=faqId,proto3" json:"faq_id,omitempty"`
	ImageKey string `protobuf:"bytes,2,opt,name=image_key,json=imageKey,proto3" json:"image_key,omitempty"`
}

func (x *GetFAQImageRequest) Reset() {
	*x = GetFAQImageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consultingapis_faq_v1_faq_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFAQImageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFAQImageRequest) ProtoMessage() {}

func (x *GetFAQImageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_consultingapis_faq_v1_faq_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFAQImageRequest.ProtoReflect.Descriptor instead.
func (*GetFAQImageRequest) Descriptor() ([]byte, []int) {
	return file_consultingapis_faq_v1_faq_proto_rawDescGZIP(), []int{10}
}

func (x *GetFAQImageRequest) GetFaqId() string {
	if x != nil {
		return x.FaqId
	}
	return ""
}

func (x *GetFAQImageRequest) GetImageKey() string {
	if x != nil {
		return x.ImageKey
	}
	return ""
}

type GetFAQImageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Image []byte `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
}

func (x *GetFAQImageResponse) Reset() {
	*x = GetFAQImageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consultingapis_faq_v1_faq_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFAQImageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFAQImageResponse) ProtoMessage() {}

func (x *GetFAQImageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_consultingapis_faq_v1_faq_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFAQImageResponse.ProtoReflect.Descriptor instead.
func (*GetFAQImageResponse) Descriptor() ([]byte, []int) {
	return file_consultingapis_faq_v1_faq_proto_rawDescGZIP(), []int{11}
}

func (x *GetFAQImageResponse) GetImage() []byte {
	if x != nil {
		return x.Image
	}
	return nil
}

type SearchFAQAnswerRichtextRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *SearchFAQAnswerRichtextRequest) Reset() {
	*x = SearchFAQAnswerRichtextRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consultingapis_faq_v1_faq_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchFAQAnswerRichtextRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchFAQAnswerRichtextRequest) ProtoMessage() {}

func (x *SearchFAQAnswerRichtextRequest) ProtoReflect() protoreflect.Message {
	mi := &file_consultingapis_faq_v1_faq_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchFAQAnswerRichtextRequest.ProtoReflect.Descriptor instead.
func (*SearchFAQAnswerRichtextRequest) Descriptor() ([]byte, []int) {
	return file_consultingapis_faq_v1_faq_proto_rawDescGZIP(), []int{12}
}

func (x *SearchFAQAnswerRichtextRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type SearchFAQAnswerRichtextResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FaqId  string            `protobuf:"bytes,1,opt,name=faq_id,json=faqId,proto3" json:"faq_id,omitempty"`
	Answer []*AnswerRichtext `protobuf:"bytes,2,rep,name=answer,proto3" json:"answer,omitempty"`
}

func (x *SearchFAQAnswerRichtextResponse) Reset() {
	*x = SearchFAQAnswerRichtextResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consultingapis_faq_v1_faq_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchFAQAnswerRichtextResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchFAQAnswerRichtextResponse) ProtoMessage() {}

func (x *SearchFAQAnswerRichtextResponse) ProtoReflect() protoreflect.Message {
	mi := &file_consultingapis_faq_v1_faq_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchFAQAnswerRichtextResponse.ProtoReflect.Descriptor instead.
func (*SearchFAQAnswerRichtextResponse) Descriptor() ([]byte, []int) {
	return file_consultingapis_faq_v1_faq_proto_rawDescGZIP(), []int{13}
}

func (x *SearchFAQAnswerRichtextResponse) GetFaqId() string {
	if x != nil {
		return x.FaqId
	}
	return ""
}

func (x *SearchFAQAnswerRichtextResponse) GetAnswer() []*AnswerRichtext {
	if x != nil {
		return x.Answer
	}
	return nil
}

type FAQ struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FaqId          string      `protobuf:"bytes,1,opt,name=faq_id,json=faqId,proto3" json:"faq_id,omitempty"`
	Id             string      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	HelpdeskId     string      `protobuf:"bytes,3,opt,name=helpdesk_id,json=helpdeskId,proto3" json:"helpdesk_id,omitempty"`
	Question       string      `protobuf:"bytes,4,opt,name=question,proto3" json:"question,omitempty"`
	Answer         string      `protobuf:"bytes,5,opt,name=answer,proto3" json:"answer,omitempty"`
	AnswerRichtext string      `protobuf:"bytes,6,opt,name=answer_richtext,json=answerRichtext,proto3" json:"answer_richtext,omitempty"`
	CreateTime     int64       `protobuf:"varint,7,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime     int64       `protobuf:"varint,8,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	Categories     []*Category `protobuf:"bytes,9,rep,name=categories,proto3" json:"categories,omitempty"`
	Tags           []string    `protobuf:"bytes,10,rep,name=tags,proto3" json:"tags,omitempty"`
	ExpireTime     int64       `protobuf:"varint,11,opt,name=expire_time,json=expireTime,proto3" json:"expire_time,omitempty"`
	UpdateUser     *User       `protobuf:"bytes,12,opt,name=update_user,json=updateUser,proto3" json:"update_user,omitempty"`
	CreateUser     *User       `protobuf:"bytes,13,opt,name=create_user,json=createUser,proto3" json:"create_user,omitempty"`
}

func (x *FAQ) Reset() {
	*x = FAQ{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consultingapis_faq_v1_faq_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FAQ) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FAQ) ProtoMessage() {}

func (x *FAQ) ProtoReflect() protoreflect.Message {
	mi := &file_consultingapis_faq_v1_faq_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FAQ.ProtoReflect.Descriptor instead.
func (*FAQ) Descriptor() ([]byte, []int) {
	return file_consultingapis_faq_v1_faq_proto_rawDescGZIP(), []int{14}
}

func (x *FAQ) GetFaqId() string {
	if x != nil {
		return x.FaqId
	}
	return ""
}

func (x *FAQ) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FAQ) GetHelpdeskId() string {
	if x != nil {
		return x.HelpdeskId
	}
	return ""
}

func (x *FAQ) GetQuestion() string {
	if x != nil {
		return x.Question
	}
	return ""
}

func (x *FAQ) GetAnswer() string {
	if x != nil {
		return x.Answer
	}
	return ""
}

func (x *FAQ) GetAnswerRichtext() string {
	if x != nil {
		return x.AnswerRichtext
	}
	return ""
}

func (x *FAQ) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *FAQ) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *FAQ) GetCategories() []*Category {
	if x != nil {
		return x.Categories
	}
	return nil
}

func (x *FAQ) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *FAQ) GetExpireTime() int64 {
	if x != nil {
		return x.ExpireTime
	}
	return 0
}

func (x *FAQ) GetUpdateUser() *User {
	if x != nil {
		return x.UpdateUser
	}
	return nil
}

func (x *FAQ) GetCreateUser() *User {
	if x != nil {
		return x.CreateUser
	}
	return nil
}

type AnswerRichtext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//text, hyperlink, img, line break
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	//text/line break
	Content string `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	//hyperlink
	Text string `protobuf:"bytes,3,opt,name=text,proto3" json:"text,omitempty"`
	Url  string `protobuf:"bytes,4,opt,name=url,proto3" json:"url,omitempty"`
	//img
	Src    string `protobuf:"bytes,5,opt,name=src,proto3" json:"src,omitempty"`
	Key    string `protobuf:"bytes,6,opt,name=key,proto3" json:"key,omitempty"`
	Width  int32  `protobuf:"varint,7,opt,name=width,proto3" json:"width,omitempty"`
	Height int32  `protobuf:"varint,8,opt,name=height,proto3" json:"height,omitempty"`
}

func (x *AnswerRichtext) Reset() {
	*x = AnswerRichtext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consultingapis_faq_v1_faq_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnswerRichtext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnswerRichtext) ProtoMessage() {}

func (x *AnswerRichtext) ProtoReflect() protoreflect.Message {
	mi := &file_consultingapis_faq_v1_faq_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnswerRichtext.ProtoReflect.Descriptor instead.
func (*AnswerRichtext) Descriptor() ([]byte, []int) {
	return file_consultingapis_faq_v1_faq_proto_rawDescGZIP(), []int{15}
}

func (x *AnswerRichtext) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *AnswerRichtext) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *AnswerRichtext) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *AnswerRichtext) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *AnswerRichtext) GetSrc() string {
	if x != nil {
		return x.Src
	}
	return ""
}

func (x *AnswerRichtext) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *AnswerRichtext) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *AnswerRichtext) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

type Category struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CategoryId string `protobuf:"bytes,1,opt,name=category_id,json=categoryId,proto3" json:"category_id,omitempty"`
	Id         string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Name       string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	ParentId   string `protobuf:"bytes,4,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	HelpdeskId string `protobuf:"bytes,5,opt,name=helpdesk_id,json=helpdeskId,proto3" json:"helpdesk_id,omitempty"`
	Language   string `protobuf:"bytes,6,opt,name=language,proto3" json:"language,omitempty"`
}

func (x *Category) Reset() {
	*x = Category{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consultingapis_faq_v1_faq_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Category) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Category) ProtoMessage() {}

func (x *Category) ProtoReflect() protoreflect.Message {
	mi := &file_consultingapis_faq_v1_faq_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Category.ProtoReflect.Descriptor instead.
func (*Category) Descriptor() ([]byte, []int) {
	return file_consultingapis_faq_v1_faq_proto_rawDescGZIP(), []int{16}
}

func (x *Category) GetCategoryId() string {
	if x != nil {
		return x.CategoryId
	}
	return ""
}

func (x *Category) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Category) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Category) GetParentId() string {
	if x != nil {
		return x.ParentId
	}
	return ""
}

func (x *Category) GetHelpdeskId() string {
	if x != nil {
		return x.HelpdeskId
	}
	return ""
}

func (x *Category) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	AvatarUrl string `protobuf:"bytes,2,opt,name=avatar_url,json=avatarUrl,proto3" json:"avatar_url,omitempty"`
	Name      string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *User) Reset() {
	*x = User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consultingapis_faq_v1_faq_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_consultingapis_faq_v1_faq_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_consultingapis_faq_v1_faq_proto_rawDescGZIP(), []int{17}
}

func (x *User) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *User) GetAvatarUrl() string {
	if x != nil {
		return x.AvatarUrl
	}
	return ""
}

func (x *User) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

var File_consultingapis_faq_v1_faq_proto protoreflect.FileDescriptor

var file_consultingapis_faq_v1_faq_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x74, 0x69, 0x6e, 0x67, 0x61, 0x70, 0x69, 0x73,
	0x2f, 0x66, 0x61, 0x71, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x61, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x15, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x74, 0x69, 0x6e, 0x67, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x66, 0x61, 0x71, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x46, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x46, 0x41, 0x51, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x75,
	0x6c, 0x74, 0x69, 0x6e, 0x67, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x66, 0x61, 0x71, 0x2e, 0x76, 0x31,
	0x2e, 0x46, 0x41, 0x51, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x6b,
	0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x41, 0x51, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x2e, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6e, 0x73,
	0x75, 0x6c, 0x74, 0x69, 0x6e, 0x67, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x66, 0x61, 0x71, 0x2e, 0x76,
	0x31, 0x2e, 0x46, 0x41, 0x51, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x26, 0x0a, 0x0d, 0x47,
	0x65, 0x74, 0x46, 0x41, 0x51, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06,
	0x66, 0x61, 0x71, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x61,
	0x71, 0x49, 0x64, 0x22, 0x68, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x46, 0x41, 0x51, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x6d,
	0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x2e, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f,
	0x6e, 0x73, 0x75, 0x6c, 0x74, 0x69, 0x6e, 0x67, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x66, 0x61, 0x71,
	0x2e, 0x76, 0x31, 0x2e, 0x46, 0x41, 0x51, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x5d, 0x0a,
	0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x41, 0x51, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x15, 0x0a, 0x06, 0x66, 0x61, 0x71, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x66, 0x61, 0x71, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x74,
	0x69, 0x6e, 0x67, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x66, 0x61, 0x71, 0x2e, 0x76, 0x31, 0x2e, 0x46,
	0x41, 0x51, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x6b, 0x0a, 0x11,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x41, 0x51, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6c,
	0x74, 0x69, 0x6e, 0x67, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x66, 0x61, 0x71, 0x2e, 0x76, 0x31, 0x2e,
	0x46, 0x41, 0x51, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x29, 0x0a, 0x10, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x46, 0x41, 0x51, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a,
	0x06, 0x66, 0x61, 0x71, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66,
	0x61, 0x71, 0x49, 0x64, 0x22, 0x3b, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x41,
	0x51, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73,
	0x67, 0x22, 0x5a, 0x0a, 0x0d, 0x46, 0x41, 0x51, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x15, 0x0a, 0x06, 0x66, 0x61, 0x71, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x66, 0x61, 0x71, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x04, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6c,
	0x74, 0x69, 0x6e, 0x67, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x66, 0x61, 0x71, 0x2e, 0x76, 0x31, 0x2e,
	0x46, 0x41, 0x51, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x9b, 0x01,
	0x0a, 0x07, 0x46, 0x41, 0x51, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x27,
	0x0a, 0x0f, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x5f, 0x72, 0x69, 0x63, 0x68, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x52,
	0x69, 0x63, 0x68, 0x74, 0x65, 0x78, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x22, 0x48, 0x0a, 0x12, 0x47,
	0x65, 0x74, 0x46, 0x41, 0x51, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x15, 0x0a, 0x06, 0x66, 0x61, 0x71, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x66, 0x61, 0x71, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x4b, 0x65, 0x79, 0x22, 0x2b, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x46, 0x41, 0x51, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x22, 0x32, 0x0a, 0x1e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x41, 0x51, 0x41,
	0x6e, 0x73, 0x77, 0x65, 0x72, 0x52, 0x69, 0x63, 0x68, 0x74, 0x65, 0x78, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x77, 0x0a, 0x1f, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x46, 0x41, 0x51, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x52, 0x69, 0x63, 0x68, 0x74, 0x65, 0x78,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x66, 0x61, 0x71,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x61, 0x71, 0x49, 0x64,
	0x12, 0x3d, 0x0a, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x74, 0x69, 0x6e, 0x67, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x66, 0x61, 0x71, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x52,
	0x69, 0x63, 0x68, 0x74, 0x65, 0x78, 0x74, 0x52, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x22,
	0xde, 0x03, 0x0a, 0x03, 0x46, 0x41, 0x51, 0x12, 0x15, 0x0a, 0x06, 0x66, 0x61, 0x71, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x61, 0x71, 0x49, 0x64, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x68, 0x65, 0x6c, 0x70, 0x64, 0x65, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x68, 0x65, 0x6c, 0x70, 0x64, 0x65, 0x73, 0x6b, 0x49, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x61,
	0x6e, 0x73, 0x77, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6e, 0x73,
	0x77, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x5f, 0x72, 0x69,
	0x63, 0x68, 0x74, 0x65, 0x78, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x6e,
	0x73, 0x77, 0x65, 0x72, 0x52, 0x69, 0x63, 0x68, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3f,
	0x0a, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x74, 0x69, 0x6e, 0x67, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x66, 0x61, 0x71, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x61, 0x67, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6e, 0x73,
	0x75, 0x6c, 0x74, 0x69, 0x6e, 0x67, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x66, 0x61, 0x71, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x12, 0x3c, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6c,
	0x74, 0x69, 0x6e, 0x67, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x66, 0x61, 0x71, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x22, 0xb6, 0x01, 0x0a, 0x0e, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x52, 0x69, 0x63, 0x68, 0x74,
	0x65, 0x78, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x72, 0x63, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x72, 0x63, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x77,
	0x69, 0x64, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74,
	0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0xa9, 0x01, 0x0a, 0x08, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x65, 0x6c, 0x70,
	0x64, 0x65, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x68,
	0x65, 0x6c, 0x70, 0x64, 0x65, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x22, 0x49, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x32, 0xf3, 0x05, 0x0a, 0x0a, 0x46, 0x41, 0x51, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x75, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x41, 0x51, 0x12, 0x27, 0x2e, 0x63,
	0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x74, 0x69, 0x6e, 0x67, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x66, 0x61,
	0x71, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x41, 0x51, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x74, 0x69,
	0x6e, 0x67, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x66, 0x61, 0x71, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x46, 0x41, 0x51, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x15, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x3a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x07, 0x2f,
	0x66, 0x61, 0x71, 0x2f, 0x76, 0x31, 0x12, 0x66, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x46, 0x41, 0x51,
	0x12, 0x24, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x74, 0x69, 0x6e, 0x67, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x66, 0x61, 0x71, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x41, 0x51, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x74,
	0x69, 0x6e, 0x67, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x66, 0x61, 0x71, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x46, 0x41, 0x51, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x0f, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x09, 0x12, 0x07, 0x2f, 0x66, 0x61, 0x71, 0x2f, 0x76, 0x31, 0x12, 0x75,
	0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x41, 0x51, 0x12, 0x27, 0x2e, 0x63, 0x6f,
	0x6e, 0x73, 0x75, 0x6c, 0x74, 0x69, 0x6e, 0x67, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x66, 0x61, 0x71,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x41, 0x51, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x74, 0x69, 0x6e,
	0x67, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x66, 0x61, 0x71, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x46, 0x41, 0x51, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x15,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x3a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x07, 0x2f, 0x66,
	0x61, 0x71, 0x2f, 0x76, 0x31, 0x12, 0x6f, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46,
	0x41, 0x51, 0x12, 0x27, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x74, 0x69, 0x6e, 0x67, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x66, 0x61, 0x71, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x46, 0x41, 0x51, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x63, 0x6f,
	0x6e, 0x73, 0x75, 0x6c, 0x74, 0x69, 0x6e, 0x67, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x66, 0x61, 0x71,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x41, 0x51, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x0f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x09, 0x2a, 0x07, 0x2f,
	0x66, 0x61, 0x71, 0x2f, 0x76, 0x31, 0x12, 0x7b, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x46, 0x41, 0x51,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x29, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x74, 0x69,
	0x6e, 0x67, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x66, 0x61, 0x71, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x46, 0x41, 0x51, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2a, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x74, 0x69, 0x6e, 0x67, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x66, 0x61, 0x71, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x41, 0x51, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x15, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x0f, 0x12, 0x0d, 0x2f, 0x66, 0x61, 0x71, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x12, 0xa0, 0x01, 0x0a, 0x17, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x41,
	0x51, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x52, 0x69, 0x63, 0x68, 0x74, 0x65, 0x78, 0x74, 0x12,
	0x35, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x74, 0x69, 0x6e, 0x67, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x66, 0x61, 0x71, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x41,
	0x51, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x52, 0x69, 0x63, 0x68, 0x74, 0x65, 0x78, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x74,
	0x69, 0x6e, 0x67, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x66, 0x61, 0x71, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x41, 0x51, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x52, 0x69,
	0x63, 0x68, 0x74, 0x65, 0x78, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x16,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10, 0x12, 0x0e, 0x2f, 0x66, 0x61, 0x71, 0x2f, 0x76, 0x31, 0x2f,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x42, 0xd8, 0x01, 0x0a, 0x19, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x74, 0x69, 0x6e, 0x67, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x66, 0x61,
	0x71, 0x2e, 0x76, 0x31, 0x42, 0x08, 0x46, 0x61, 0x71, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01,
	0x5a, 0x3b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x68, 0x64, 0x75,
	0x68, 0x65, 0x6c, 0x70, 0x2f, 0x61, 0x70, 0x69, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x73, 0x64,
	0x6b, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x74, 0x69, 0x6e, 0x67, 0x61, 0x70, 0x69, 0x73,
	0x2f, 0x66, 0x61, 0x71, 0x2f, 0x76, 0x31, 0x3b, 0x66, 0x61, 0x71, 0x76, 0x31, 0xa2, 0x02, 0x03,
	0x43, 0x46, 0x58, 0xaa, 0x02, 0x15, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x74, 0x69, 0x6e, 0x67,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x46, 0x61, 0x71, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x15, 0x43, 0x6f,
	0x6e, 0x73, 0x75, 0x6c, 0x74, 0x69, 0x6e, 0x67, 0x61, 0x70, 0x69, 0x73, 0x5c, 0x46, 0x61, 0x71,
	0x5c, 0x56, 0x31, 0xe2, 0x02, 0x21, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x74, 0x69, 0x6e, 0x67,
	0x61, 0x70, 0x69, 0x73, 0x5c, 0x46, 0x61, 0x71, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x17, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6c,
	0x74, 0x69, 0x6e, 0x67, 0x61, 0x70, 0x69, 0x73, 0x3a, 0x3a, 0x46, 0x61, 0x71, 0x3a, 0x3a, 0x56,
	0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_consultingapis_faq_v1_faq_proto_rawDescOnce sync.Once
	file_consultingapis_faq_v1_faq_proto_rawDescData = file_consultingapis_faq_v1_faq_proto_rawDesc
)

func file_consultingapis_faq_v1_faq_proto_rawDescGZIP() []byte {
	file_consultingapis_faq_v1_faq_proto_rawDescOnce.Do(func() {
		file_consultingapis_faq_v1_faq_proto_rawDescData = protoimpl.X.CompressGZIP(file_consultingapis_faq_v1_faq_proto_rawDescData)
	})
	return file_consultingapis_faq_v1_faq_proto_rawDescData
}

var file_consultingapis_faq_v1_faq_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_consultingapis_faq_v1_faq_proto_goTypes = []interface{}{
	(*CreateFAQRequest)(nil),                // 0: consultingapis.faq.v1.CreateFAQRequest
	(*CreateFAQResponse)(nil),               // 1: consultingapis.faq.v1.CreateFAQResponse
	(*GetFAQRequest)(nil),                   // 2: consultingapis.faq.v1.GetFAQRequest
	(*GetFAQResponse)(nil),                  // 3: consultingapis.faq.v1.GetFAQResponse
	(*UpdateFAQRequest)(nil),                // 4: consultingapis.faq.v1.UpdateFAQRequest
	(*UpdateFAQResponse)(nil),               // 5: consultingapis.faq.v1.UpdateFAQResponse
	(*DeleteFAQRequest)(nil),                // 6: consultingapis.faq.v1.DeleteFAQRequest
	(*DeleteFAQResponse)(nil),               // 7: consultingapis.faq.v1.DeleteFAQResponse
	(*FAQUpdateInfo)(nil),                   // 8: consultingapis.faq.v1.FAQUpdateInfo
	(*FAQInfo)(nil),                         // 9: consultingapis.faq.v1.FAQInfo
	(*GetFAQImageRequest)(nil),              // 10: consultingapis.faq.v1.GetFAQImageRequest
	(*GetFAQImageResponse)(nil),             // 11: consultingapis.faq.v1.GetFAQImageResponse
	(*SearchFAQAnswerRichtextRequest)(nil),  // 12: consultingapis.faq.v1.SearchFAQAnswerRichtextRequest
	(*SearchFAQAnswerRichtextResponse)(nil), // 13: consultingapis.faq.v1.SearchFAQAnswerRichtextResponse
	(*FAQ)(nil),                             // 14: consultingapis.faq.v1.FAQ
	(*AnswerRichtext)(nil),                  // 15: consultingapis.faq.v1.AnswerRichtext
	(*Category)(nil),                        // 16: consultingapis.faq.v1.Category
	(*User)(nil),                            // 17: consultingapis.faq.v1.User
}
var file_consultingapis_faq_v1_faq_proto_depIdxs = []int32{
	9,  // 0: consultingapis.faq.v1.CreateFAQRequest.data:type_name -> consultingapis.faq.v1.FAQInfo
	14, // 1: consultingapis.faq.v1.CreateFAQResponse.data:type_name -> consultingapis.faq.v1.FAQ
	14, // 2: consultingapis.faq.v1.GetFAQResponse.data:type_name -> consultingapis.faq.v1.FAQ
	9,  // 3: consultingapis.faq.v1.UpdateFAQRequest.data:type_name -> consultingapis.faq.v1.FAQInfo
	14, // 4: consultingapis.faq.v1.UpdateFAQResponse.data:type_name -> consultingapis.faq.v1.FAQ
	9,  // 5: consultingapis.faq.v1.FAQUpdateInfo.info:type_name -> consultingapis.faq.v1.FAQInfo
	15, // 6: consultingapis.faq.v1.SearchFAQAnswerRichtextResponse.answer:type_name -> consultingapis.faq.v1.AnswerRichtext
	16, // 7: consultingapis.faq.v1.FAQ.categories:type_name -> consultingapis.faq.v1.Category
	17, // 8: consultingapis.faq.v1.FAQ.update_user:type_name -> consultingapis.faq.v1.User
	17, // 9: consultingapis.faq.v1.FAQ.create_user:type_name -> consultingapis.faq.v1.User
	0,  // 10: consultingapis.faq.v1.FAQService.CreateFAQ:input_type -> consultingapis.faq.v1.CreateFAQRequest
	2,  // 11: consultingapis.faq.v1.FAQService.GetFAQ:input_type -> consultingapis.faq.v1.GetFAQRequest
	4,  // 12: consultingapis.faq.v1.FAQService.UpdateFAQ:input_type -> consultingapis.faq.v1.UpdateFAQRequest
	6,  // 13: consultingapis.faq.v1.FAQService.DeleteFAQ:input_type -> consultingapis.faq.v1.DeleteFAQRequest
	10, // 14: consultingapis.faq.v1.FAQService.GetFAQImage:input_type -> consultingapis.faq.v1.GetFAQImageRequest
	12, // 15: consultingapis.faq.v1.FAQService.SearchFAQAnswerRichtext:input_type -> consultingapis.faq.v1.SearchFAQAnswerRichtextRequest
	1,  // 16: consultingapis.faq.v1.FAQService.CreateFAQ:output_type -> consultingapis.faq.v1.CreateFAQResponse
	3,  // 17: consultingapis.faq.v1.FAQService.GetFAQ:output_type -> consultingapis.faq.v1.GetFAQResponse
	5,  // 18: consultingapis.faq.v1.FAQService.UpdateFAQ:output_type -> consultingapis.faq.v1.UpdateFAQResponse
	7,  // 19: consultingapis.faq.v1.FAQService.DeleteFAQ:output_type -> consultingapis.faq.v1.DeleteFAQResponse
	11, // 20: consultingapis.faq.v1.FAQService.GetFAQImage:output_type -> consultingapis.faq.v1.GetFAQImageResponse
	13, // 21: consultingapis.faq.v1.FAQService.SearchFAQAnswerRichtext:output_type -> consultingapis.faq.v1.SearchFAQAnswerRichtextResponse
	16, // [16:22] is the sub-list for method output_type
	10, // [10:16] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_consultingapis_faq_v1_faq_proto_init() }
func file_consultingapis_faq_v1_faq_proto_init() {
	if File_consultingapis_faq_v1_faq_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_consultingapis_faq_v1_faq_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateFAQRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consultingapis_faq_v1_faq_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateFAQResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consultingapis_faq_v1_faq_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFAQRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consultingapis_faq_v1_faq_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFAQResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consultingapis_faq_v1_faq_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateFAQRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consultingapis_faq_v1_faq_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateFAQResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consultingapis_faq_v1_faq_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteFAQRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consultingapis_faq_v1_faq_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteFAQResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consultingapis_faq_v1_faq_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FAQUpdateInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consultingapis_faq_v1_faq_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FAQInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consultingapis_faq_v1_faq_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFAQImageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consultingapis_faq_v1_faq_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFAQImageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consultingapis_faq_v1_faq_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchFAQAnswerRichtextRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consultingapis_faq_v1_faq_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchFAQAnswerRichtextResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consultingapis_faq_v1_faq_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FAQ); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consultingapis_faq_v1_faq_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnswerRichtext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consultingapis_faq_v1_faq_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Category); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consultingapis_faq_v1_faq_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_consultingapis_faq_v1_faq_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_consultingapis_faq_v1_faq_proto_goTypes,
		DependencyIndexes: file_consultingapis_faq_v1_faq_proto_depIdxs,
		MessageInfos:      file_consultingapis_faq_v1_faq_proto_msgTypes,
	}.Build()
	File_consultingapis_faq_v1_faq_proto = out.File
	file_consultingapis_faq_v1_faq_proto_rawDesc = nil
	file_consultingapis_faq_v1_faq_proto_goTypes = nil
	file_consultingapis_faq_v1_faq_proto_depIdxs = nil
}
