// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: consultingapis/dingtalk/v1/dingtalk.proto

package dingtalkv1

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateClassChatGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClassId string `protobuf:"bytes,1,opt,name=class_id,json=classId,proto3" json:"class_id,omitempty"`
}

func (x *CreateClassChatGroupRequest) Reset() {
	*x = CreateClassChatGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consultingapis_dingtalk_v1_dingtalk_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateClassChatGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateClassChatGroupRequest) ProtoMessage() {}

func (x *CreateClassChatGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_consultingapis_dingtalk_v1_dingtalk_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateClassChatGroupRequest.ProtoReflect.Descriptor instead.
func (*CreateClassChatGroupRequest) Descriptor() ([]byte, []int) {
	return file_consultingapis_dingtalk_v1_dingtalk_proto_rawDescGZIP(), []int{0}
}

func (x *CreateClassChatGroupRequest) GetClassId() string {
	if x != nil {
		return x.ClassId
	}
	return ""
}

type CreateClassChatGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatId             string `protobuf:"bytes,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	OpenConversationId string `protobuf:"bytes,2,opt,name=openConversationId,proto3" json:"openConversationId,omitempty"`
}

func (x *CreateClassChatGroupResponse) Reset() {
	*x = CreateClassChatGroupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consultingapis_dingtalk_v1_dingtalk_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateClassChatGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateClassChatGroupResponse) ProtoMessage() {}

func (x *CreateClassChatGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_consultingapis_dingtalk_v1_dingtalk_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateClassChatGroupResponse.ProtoReflect.Descriptor instead.
func (*CreateClassChatGroupResponse) Descriptor() ([]byte, []int) {
	return file_consultingapis_dingtalk_v1_dingtalk_proto_rawDescGZIP(), []int{1}
}

func (x *CreateClassChatGroupResponse) GetChatId() string {
	if x != nil {
		return x.ChatId
	}
	return ""
}

func (x *CreateClassChatGroupResponse) GetOpenConversationId() string {
	if x != nil {
		return x.OpenConversationId
	}
	return ""
}

type GetClassChatGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClassId string `protobuf:"bytes,1,opt,name=class_id,json=classId,proto3" json:"class_id,omitempty"`
}

func (x *GetClassChatGroupRequest) Reset() {
	*x = GetClassChatGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consultingapis_dingtalk_v1_dingtalk_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetClassChatGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClassChatGroupRequest) ProtoMessage() {}

func (x *GetClassChatGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_consultingapis_dingtalk_v1_dingtalk_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClassChatGroupRequest.ProtoReflect.Descriptor instead.
func (*GetClassChatGroupRequest) Descriptor() ([]byte, []int) {
	return file_consultingapis_dingtalk_v1_dingtalk_proto_rawDescGZIP(), []int{2}
}

func (x *GetClassChatGroupRequest) GetClassId() string {
	if x != nil {
		return x.ClassId
	}
	return ""
}

type GetClassChatGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HasChat            bool   `protobuf:"varint,1,opt,name=has_chat,json=hasChat,proto3" json:"has_chat,omitempty"`
	ChatId             string `protobuf:"bytes,2,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	OpenConversationId string `protobuf:"bytes,3,opt,name=openConversationId,proto3" json:"openConversationId,omitempty"`
}

func (x *GetClassChatGroupResponse) Reset() {
	*x = GetClassChatGroupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consultingapis_dingtalk_v1_dingtalk_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetClassChatGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClassChatGroupResponse) ProtoMessage() {}

func (x *GetClassChatGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_consultingapis_dingtalk_v1_dingtalk_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClassChatGroupResponse.ProtoReflect.Descriptor instead.
func (*GetClassChatGroupResponse) Descriptor() ([]byte, []int) {
	return file_consultingapis_dingtalk_v1_dingtalk_proto_rawDescGZIP(), []int{3}
}

func (x *GetClassChatGroupResponse) GetHasChat() bool {
	if x != nil {
		return x.HasChat
	}
	return false
}

func (x *GetClassChatGroupResponse) GetChatId() string {
	if x != nil {
		return x.ChatId
	}
	return ""
}

func (x *GetClassChatGroupResponse) GetOpenConversationId() string {
	if x != nil {
		return x.OpenConversationId
	}
	return ""
}

type JoinClassChatGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClassId string `protobuf:"bytes,1,opt,name=class_id,json=classId,proto3" json:"class_id,omitempty"`
}

func (x *JoinClassChatGroupRequest) Reset() {
	*x = JoinClassChatGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consultingapis_dingtalk_v1_dingtalk_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinClassChatGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinClassChatGroupRequest) ProtoMessage() {}

func (x *JoinClassChatGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_consultingapis_dingtalk_v1_dingtalk_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinClassChatGroupRequest.ProtoReflect.Descriptor instead.
func (*JoinClassChatGroupRequest) Descriptor() ([]byte, []int) {
	return file_consultingapis_dingtalk_v1_dingtalk_proto_rawDescGZIP(), []int{4}
}

func (x *JoinClassChatGroupRequest) GetClassId() string {
	if x != nil {
		return x.ClassId
	}
	return ""
}

type JoinClassChatGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatId             string `protobuf:"bytes,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	OpenConversationId string `protobuf:"bytes,2,opt,name=openConversationId,proto3" json:"openConversationId,omitempty"`
}

func (x *JoinClassChatGroupResponse) Reset() {
	*x = JoinClassChatGroupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consultingapis_dingtalk_v1_dingtalk_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinClassChatGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinClassChatGroupResponse) ProtoMessage() {}

func (x *JoinClassChatGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_consultingapis_dingtalk_v1_dingtalk_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinClassChatGroupResponse.ProtoReflect.Descriptor instead.
func (*JoinClassChatGroupResponse) Descriptor() ([]byte, []int) {
	return file_consultingapis_dingtalk_v1_dingtalk_proto_rawDescGZIP(), []int{5}
}

func (x *JoinClassChatGroupResponse) GetChatId() string {
	if x != nil {
		return x.ChatId
	}
	return ""
}

func (x *JoinClassChatGroupResponse) GetOpenConversationId() string {
	if x != nil {
		return x.OpenConversationId
	}
	return ""
}

var File_consultingapis_dingtalk_v1_dingtalk_proto protoreflect.FileDescriptor

var file_consultingapis_dingtalk_v1_dingtalk_proto_rawDesc = []byte{
	0x0a, 0x29, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x74, 0x69, 0x6e, 0x67, 0x61, 0x70, 0x69, 0x73,
	0x2f, 0x64, 0x69, 0x6e, 0x67, 0x74, 0x61, 0x6c, 0x6b, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x69, 0x6e,
	0x67, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1a, 0x63, 0x6f, 0x6e,
	0x73, 0x75, 0x6c, 0x74, 0x69, 0x6e, 0x67, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x69, 0x6e, 0x67,
	0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x38, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x43, 0x68, 0x61, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x64, 0x22,
	0x67, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x43, 0x68,
	0x61, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x17, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x6f, 0x70, 0x65, 0x6e,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6f, 0x70, 0x65, 0x6e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x35, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x43, 0x68, 0x61, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x64, 0x22,
	0x7f, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x43, 0x68, 0x61, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x68, 0x61, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x68, 0x61, 0x73, 0x43, 0x68, 0x61, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64,
	0x12, 0x2e, 0x0a, 0x12, 0x6f, 0x70, 0x65, 0x6e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6f, 0x70,
	0x65, 0x6e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x22, 0x36, 0x0a, 0x19, 0x4a, 0x6f, 0x69, 0x6e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x43, 0x68, 0x61,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a,
	0x08, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x64, 0x22, 0x65, 0x0a, 0x1a, 0x4a, 0x6f, 0x69, 0x6e,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x43, 0x68, 0x61, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12,
	0x2e, 0x0a, 0x12, 0x6f, 0x70, 0x65, 0x6e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6f, 0x70, 0x65,
	0x6e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x32,
	0x87, 0x04, 0x0a, 0x0f, 0x44, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x6c, 0x6b, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0xab, 0x01, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x43, 0x68, 0x61, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x37, 0x2e, 0x63,
	0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x74, 0x69, 0x6e, 0x67, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x69,
	0x6e, 0x67, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x43, 0x68, 0x61, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x74, 0x69,
	0x6e, 0x67, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x69, 0x6e, 0x67, 0x74, 0x61, 0x6c, 0x6b, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x43, 0x68,
	0x61, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x12, 0x18, 0x2f, 0x64, 0x69, 0x6e, 0x67, 0x74, 0x61,
	0x6c, 0x6b, 0x2f, 0x63, 0x68, 0x61, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x12, 0x9f, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x43, 0x68,
	0x61, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x34, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6c,
	0x74, 0x69, 0x6e, 0x67, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x69, 0x6e, 0x67, 0x74, 0x61, 0x6c,
	0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x43, 0x68, 0x61,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e,
	0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x74, 0x69, 0x6e, 0x67, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64,
	0x69, 0x6e, 0x67, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x43, 0x68, 0x61, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x12, 0x15, 0x2f, 0x64,
	0x69, 0x6e, 0x67, 0x74, 0x61, 0x6c, 0x6b, 0x2f, 0x63, 0x68, 0x61, 0x74, 0x2f, 0x76, 0x31, 0x2f,
	0x67, 0x65, 0x74, 0x12, 0xa3, 0x01, 0x0a, 0x12, 0x4a, 0x6f, 0x69, 0x6e, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x43, 0x68, 0x61, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x35, 0x2e, 0x63, 0x6f, 0x6e,
	0x73, 0x75, 0x6c, 0x74, 0x69, 0x6e, 0x67, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x69, 0x6e, 0x67,
	0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x43, 0x68, 0x61, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x36, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x74, 0x69, 0x6e, 0x67, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x64, 0x69, 0x6e, 0x67, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x4a,
	0x6f, 0x69, 0x6e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x43, 0x68, 0x61, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x18, 0x32, 0x16, 0x2f, 0x64, 0x69, 0x6e, 0x67, 0x74, 0x61, 0x6c, 0x6b, 0x2f, 0x63, 0x68, 0x61,
	0x74, 0x2f, 0x76, 0x31, 0x2f, 0x6a, 0x6f, 0x69, 0x6e, 0x42, 0x80, 0x02, 0x0a, 0x1e, 0x63, 0x6f,
	0x6d, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x74, 0x69, 0x6e, 0x67, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x64, 0x69, 0x6e, 0x67, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x76, 0x31, 0x42, 0x0d, 0x44, 0x69,
	0x6e, 0x67, 0x74, 0x61, 0x6c, 0x6b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x45, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x68, 0x64, 0x75, 0x68, 0x65, 0x6c,
	0x70, 0x2f, 0x61, 0x70, 0x69, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x73, 0x64, 0x6b, 0x2f, 0x63,
	0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x74, 0x69, 0x6e, 0x67, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x64, 0x69,
	0x6e, 0x67, 0x74, 0x61, 0x6c, 0x6b, 0x2f, 0x76, 0x31, 0x3b, 0x64, 0x69, 0x6e, 0x67, 0x74, 0x61,
	0x6c, 0x6b, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x43, 0x44, 0x58, 0xaa, 0x02, 0x1a, 0x43, 0x6f, 0x6e,
	0x73, 0x75, 0x6c, 0x74, 0x69, 0x6e, 0x67, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x44, 0x69, 0x6e, 0x67,
	0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x1a, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6c,
	0x74, 0x69, 0x6e, 0x67, 0x61, 0x70, 0x69, 0x73, 0x5c, 0x44, 0x69, 0x6e, 0x67, 0x74, 0x61, 0x6c,
	0x6b, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x26, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x74, 0x69, 0x6e,
	0x67, 0x61, 0x70, 0x69, 0x73, 0x5c, 0x44, 0x69, 0x6e, 0x67, 0x74, 0x61, 0x6c, 0x6b, 0x5c, 0x56,
	0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x1c,
	0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x74, 0x69, 0x6e, 0x67, 0x61, 0x70, 0x69, 0x73, 0x3a, 0x3a,
	0x44, 0x69, 0x6e, 0x67, 0x74, 0x61, 0x6c, 0x6b, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_consultingapis_dingtalk_v1_dingtalk_proto_rawDescOnce sync.Once
	file_consultingapis_dingtalk_v1_dingtalk_proto_rawDescData = file_consultingapis_dingtalk_v1_dingtalk_proto_rawDesc
)

func file_consultingapis_dingtalk_v1_dingtalk_proto_rawDescGZIP() []byte {
	file_consultingapis_dingtalk_v1_dingtalk_proto_rawDescOnce.Do(func() {
		file_consultingapis_dingtalk_v1_dingtalk_proto_rawDescData = protoimpl.X.CompressGZIP(file_consultingapis_dingtalk_v1_dingtalk_proto_rawDescData)
	})
	return file_consultingapis_dingtalk_v1_dingtalk_proto_rawDescData
}

var file_consultingapis_dingtalk_v1_dingtalk_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_consultingapis_dingtalk_v1_dingtalk_proto_goTypes = []interface{}{
	(*CreateClassChatGroupRequest)(nil),  // 0: consultingapis.dingtalk.v1.CreateClassChatGroupRequest
	(*CreateClassChatGroupResponse)(nil), // 1: consultingapis.dingtalk.v1.CreateClassChatGroupResponse
	(*GetClassChatGroupRequest)(nil),     // 2: consultingapis.dingtalk.v1.GetClassChatGroupRequest
	(*GetClassChatGroupResponse)(nil),    // 3: consultingapis.dingtalk.v1.GetClassChatGroupResponse
	(*JoinClassChatGroupRequest)(nil),    // 4: consultingapis.dingtalk.v1.JoinClassChatGroupRequest
	(*JoinClassChatGroupResponse)(nil),   // 5: consultingapis.dingtalk.v1.JoinClassChatGroupResponse
}
var file_consultingapis_dingtalk_v1_dingtalk_proto_depIdxs = []int32{
	0, // 0: consultingapis.dingtalk.v1.DingTalkService.CreateClassChatGroup:input_type -> consultingapis.dingtalk.v1.CreateClassChatGroupRequest
	2, // 1: consultingapis.dingtalk.v1.DingTalkService.GetClassChatGroup:input_type -> consultingapis.dingtalk.v1.GetClassChatGroupRequest
	4, // 2: consultingapis.dingtalk.v1.DingTalkService.JoinClassChatGroup:input_type -> consultingapis.dingtalk.v1.JoinClassChatGroupRequest
	1, // 3: consultingapis.dingtalk.v1.DingTalkService.CreateClassChatGroup:output_type -> consultingapis.dingtalk.v1.CreateClassChatGroupResponse
	3, // 4: consultingapis.dingtalk.v1.DingTalkService.GetClassChatGroup:output_type -> consultingapis.dingtalk.v1.GetClassChatGroupResponse
	5, // 5: consultingapis.dingtalk.v1.DingTalkService.JoinClassChatGroup:output_type -> consultingapis.dingtalk.v1.JoinClassChatGroupResponse
	3, // [3:6] is the sub-list for method output_type
	0, // [0:3] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_consultingapis_dingtalk_v1_dingtalk_proto_init() }
func file_consultingapis_dingtalk_v1_dingtalk_proto_init() {
	if File_consultingapis_dingtalk_v1_dingtalk_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_consultingapis_dingtalk_v1_dingtalk_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateClassChatGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consultingapis_dingtalk_v1_dingtalk_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateClassChatGroupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consultingapis_dingtalk_v1_dingtalk_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetClassChatGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consultingapis_dingtalk_v1_dingtalk_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetClassChatGroupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consultingapis_dingtalk_v1_dingtalk_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JoinClassChatGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consultingapis_dingtalk_v1_dingtalk_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JoinClassChatGroupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_consultingapis_dingtalk_v1_dingtalk_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_consultingapis_dingtalk_v1_dingtalk_proto_goTypes,
		DependencyIndexes: file_consultingapis_dingtalk_v1_dingtalk_proto_depIdxs,
		MessageInfos:      file_consultingapis_dingtalk_v1_dingtalk_proto_msgTypes,
	}.Build()
	File_consultingapis_dingtalk_v1_dingtalk_proto = out.File
	file_consultingapis_dingtalk_v1_dingtalk_proto_rawDesc = nil
	file_consultingapis_dingtalk_v1_dingtalk_proto_goTypes = nil
	file_consultingapis_dingtalk_v1_dingtalk_proto_depIdxs = nil
}
