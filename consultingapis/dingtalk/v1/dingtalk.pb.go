// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        (unknown)
// source: consultingapis/dingtalk/v1/dingtalk.proto

package dingtalkv1

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateClassChatGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClassId string                            `protobuf:"bytes,1,opt,name=class_id,json=classId,proto3" json:"class_id,omitempty"`
	Body    *CreateClassChatGroupRequest_Body `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *CreateClassChatGroupRequest) Reset() {
	*x = CreateClassChatGroupRequest{}
	mi := &file_consultingapis_dingtalk_v1_dingtalk_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateClassChatGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateClassChatGroupRequest) ProtoMessage() {}

func (x *CreateClassChatGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_consultingapis_dingtalk_v1_dingtalk_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateClassChatGroupRequest.ProtoReflect.Descriptor instead.
func (*CreateClassChatGroupRequest) Descriptor() ([]byte, []int) {
	return file_consultingapis_dingtalk_v1_dingtalk_proto_rawDescGZIP(), []int{0}
}

func (x *CreateClassChatGroupRequest) GetClassId() string {
	if x != nil {
		return x.ClassId
	}
	return ""
}

func (x *CreateClassChatGroupRequest) GetBody() *CreateClassChatGroupRequest_Body {
	if x != nil {
		return x.Body
	}
	return nil
}

type CreateClassChatGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatId             string `protobuf:"bytes,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	OpenConversationId string `protobuf:"bytes,2,opt,name=openConversationId,proto3" json:"openConversationId,omitempty"`
	InviteUrl          string `protobuf:"bytes,3,opt,name=invite_url,json=inviteUrl,proto3" json:"invite_url,omitempty"`
}

func (x *CreateClassChatGroupResponse) Reset() {
	*x = CreateClassChatGroupResponse{}
	mi := &file_consultingapis_dingtalk_v1_dingtalk_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateClassChatGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateClassChatGroupResponse) ProtoMessage() {}

func (x *CreateClassChatGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_consultingapis_dingtalk_v1_dingtalk_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateClassChatGroupResponse.ProtoReflect.Descriptor instead.
func (*CreateClassChatGroupResponse) Descriptor() ([]byte, []int) {
	return file_consultingapis_dingtalk_v1_dingtalk_proto_rawDescGZIP(), []int{1}
}

func (x *CreateClassChatGroupResponse) GetChatId() string {
	if x != nil {
		return x.ChatId
	}
	return ""
}

func (x *CreateClassChatGroupResponse) GetOpenConversationId() string {
	if x != nil {
		return x.OpenConversationId
	}
	return ""
}

func (x *CreateClassChatGroupResponse) GetInviteUrl() string {
	if x != nil {
		return x.InviteUrl
	}
	return ""
}

type MergeClassChatGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClassId            string `protobuf:"bytes,1,opt,name=class_id,json=classId,proto3" json:"class_id,omitempty"`
	OpenConversationId string `protobuf:"bytes,2,opt,name=openConversationId,proto3" json:"openConversationId,omitempty"`
}

func (x *MergeClassChatGroupRequest) Reset() {
	*x = MergeClassChatGroupRequest{}
	mi := &file_consultingapis_dingtalk_v1_dingtalk_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MergeClassChatGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MergeClassChatGroupRequest) ProtoMessage() {}

func (x *MergeClassChatGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_consultingapis_dingtalk_v1_dingtalk_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MergeClassChatGroupRequest.ProtoReflect.Descriptor instead.
func (*MergeClassChatGroupRequest) Descriptor() ([]byte, []int) {
	return file_consultingapis_dingtalk_v1_dingtalk_proto_rawDescGZIP(), []int{2}
}

func (x *MergeClassChatGroupRequest) GetClassId() string {
	if x != nil {
		return x.ClassId
	}
	return ""
}

func (x *MergeClassChatGroupRequest) GetOpenConversationId() string {
	if x != nil {
		return x.OpenConversationId
	}
	return ""
}

type MergeClassChatGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MergeClassChatGroupResponse) Reset() {
	*x = MergeClassChatGroupResponse{}
	mi := &file_consultingapis_dingtalk_v1_dingtalk_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MergeClassChatGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MergeClassChatGroupResponse) ProtoMessage() {}

func (x *MergeClassChatGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_consultingapis_dingtalk_v1_dingtalk_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MergeClassChatGroupResponse.ProtoReflect.Descriptor instead.
func (*MergeClassChatGroupResponse) Descriptor() ([]byte, []int) {
	return file_consultingapis_dingtalk_v1_dingtalk_proto_rawDescGZIP(), []int{3}
}

type GetClassChatGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClassId string `protobuf:"bytes,1,opt,name=class_id,json=classId,proto3" json:"class_id,omitempty"`
}

func (x *GetClassChatGroupRequest) Reset() {
	*x = GetClassChatGroupRequest{}
	mi := &file_consultingapis_dingtalk_v1_dingtalk_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetClassChatGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClassChatGroupRequest) ProtoMessage() {}

func (x *GetClassChatGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_consultingapis_dingtalk_v1_dingtalk_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClassChatGroupRequest.ProtoReflect.Descriptor instead.
func (*GetClassChatGroupRequest) Descriptor() ([]byte, []int) {
	return file_consultingapis_dingtalk_v1_dingtalk_proto_rawDescGZIP(), []int{4}
}

func (x *GetClassChatGroupRequest) GetClassId() string {
	if x != nil {
		return x.ClassId
	}
	return ""
}

type GetClassChatGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chats []*GetClassChatGroupResponse_Chat `protobuf:"bytes,1,rep,name=chats,proto3" json:"chats,omitempty"`
}

func (x *GetClassChatGroupResponse) Reset() {
	*x = GetClassChatGroupResponse{}
	mi := &file_consultingapis_dingtalk_v1_dingtalk_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetClassChatGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClassChatGroupResponse) ProtoMessage() {}

func (x *GetClassChatGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_consultingapis_dingtalk_v1_dingtalk_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClassChatGroupResponse.ProtoReflect.Descriptor instead.
func (*GetClassChatGroupResponse) Descriptor() ([]byte, []int) {
	return file_consultingapis_dingtalk_v1_dingtalk_proto_rawDescGZIP(), []int{5}
}

func (x *GetClassChatGroupResponse) GetChats() []*GetClassChatGroupResponse_Chat {
	if x != nil {
		return x.Chats
	}
	return nil
}

type SyncClassChatGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClassId string `protobuf:"bytes,1,opt,name=class_id,json=classId,proto3" json:"class_id,omitempty"`
}

func (x *SyncClassChatGroupRequest) Reset() {
	*x = SyncClassChatGroupRequest{}
	mi := &file_consultingapis_dingtalk_v1_dingtalk_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyncClassChatGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncClassChatGroupRequest) ProtoMessage() {}

func (x *SyncClassChatGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_consultingapis_dingtalk_v1_dingtalk_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncClassChatGroupRequest.ProtoReflect.Descriptor instead.
func (*SyncClassChatGroupRequest) Descriptor() ([]byte, []int) {
	return file_consultingapis_dingtalk_v1_dingtalk_proto_rawDescGZIP(), []int{6}
}

func (x *SyncClassChatGroupRequest) GetClassId() string {
	if x != nil {
		return x.ClassId
	}
	return ""
}

type SyncClassChatGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *SyncClassChatGroupResponse) Reset() {
	*x = SyncClassChatGroupResponse{}
	mi := &file_consultingapis_dingtalk_v1_dingtalk_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyncClassChatGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncClassChatGroupResponse) ProtoMessage() {}

func (x *SyncClassChatGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_consultingapis_dingtalk_v1_dingtalk_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncClassChatGroupResponse.ProtoReflect.Descriptor instead.
func (*SyncClassChatGroupResponse) Descriptor() ([]byte, []int) {
	return file_consultingapis_dingtalk_v1_dingtalk_proto_rawDescGZIP(), []int{7}
}

func (x *SyncClassChatGroupResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type CreateGradeChatGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnitId string `protobuf:"bytes,1,opt,name=unitId,proto3" json:"unitId,omitempty"` // 学院ID
	Grade  string `protobuf:"bytes,2,opt,name=grade,proto3" json:"grade,omitempty"`   // 年级
}

func (x *CreateGradeChatGroupRequest) Reset() {
	*x = CreateGradeChatGroupRequest{}
	mi := &file_consultingapis_dingtalk_v1_dingtalk_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateGradeChatGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateGradeChatGroupRequest) ProtoMessage() {}

func (x *CreateGradeChatGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_consultingapis_dingtalk_v1_dingtalk_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateGradeChatGroupRequest.ProtoReflect.Descriptor instead.
func (*CreateGradeChatGroupRequest) Descriptor() ([]byte, []int) {
	return file_consultingapis_dingtalk_v1_dingtalk_proto_rawDescGZIP(), []int{8}
}

func (x *CreateGradeChatGroupRequest) GetUnitId() string {
	if x != nil {
		return x.UnitId
	}
	return ""
}

func (x *CreateGradeChatGroupRequest) GetGrade() string {
	if x != nil {
		return x.Grade
	}
	return ""
}

type CreateGradeChatGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatId             string `protobuf:"bytes,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	OpenConversationId string `protobuf:"bytes,2,opt,name=openConversationId,proto3" json:"openConversationId,omitempty"`
	InviteUrl          string `protobuf:"bytes,3,opt,name=invite_url,json=inviteUrl,proto3" json:"invite_url,omitempty"`
}

func (x *CreateGradeChatGroupResponse) Reset() {
	*x = CreateGradeChatGroupResponse{}
	mi := &file_consultingapis_dingtalk_v1_dingtalk_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateGradeChatGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateGradeChatGroupResponse) ProtoMessage() {}

func (x *CreateGradeChatGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_consultingapis_dingtalk_v1_dingtalk_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateGradeChatGroupResponse.ProtoReflect.Descriptor instead.
func (*CreateGradeChatGroupResponse) Descriptor() ([]byte, []int) {
	return file_consultingapis_dingtalk_v1_dingtalk_proto_rawDescGZIP(), []int{9}
}

func (x *CreateGradeChatGroupResponse) GetChatId() string {
	if x != nil {
		return x.ChatId
	}
	return ""
}

func (x *CreateGradeChatGroupResponse) GetOpenConversationId() string {
	if x != nil {
		return x.OpenConversationId
	}
	return ""
}

func (x *CreateGradeChatGroupResponse) GetInviteUrl() string {
	if x != nil {
		return x.InviteUrl
	}
	return ""
}

type GetGradeChatGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnitId string `protobuf:"bytes,1,opt,name=unitId,proto3" json:"unitId,omitempty"`
	Grade  string `protobuf:"bytes,2,opt,name=grade,proto3" json:"grade,omitempty"`
}

func (x *GetGradeChatGroupRequest) Reset() {
	*x = GetGradeChatGroupRequest{}
	mi := &file_consultingapis_dingtalk_v1_dingtalk_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetGradeChatGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGradeChatGroupRequest) ProtoMessage() {}

func (x *GetGradeChatGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_consultingapis_dingtalk_v1_dingtalk_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGradeChatGroupRequest.ProtoReflect.Descriptor instead.
func (*GetGradeChatGroupRequest) Descriptor() ([]byte, []int) {
	return file_consultingapis_dingtalk_v1_dingtalk_proto_rawDescGZIP(), []int{10}
}

func (x *GetGradeChatGroupRequest) GetUnitId() string {
	if x != nil {
		return x.UnitId
	}
	return ""
}

func (x *GetGradeChatGroupRequest) GetGrade() string {
	if x != nil {
		return x.Grade
	}
	return ""
}

type GetGradeChatGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chats []*GetGradeChatGroupResponse_Chat `protobuf:"bytes,1,rep,name=chats,proto3" json:"chats,omitempty"`
}

func (x *GetGradeChatGroupResponse) Reset() {
	*x = GetGradeChatGroupResponse{}
	mi := &file_consultingapis_dingtalk_v1_dingtalk_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetGradeChatGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGradeChatGroupResponse) ProtoMessage() {}

func (x *GetGradeChatGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_consultingapis_dingtalk_v1_dingtalk_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGradeChatGroupResponse.ProtoReflect.Descriptor instead.
func (*GetGradeChatGroupResponse) Descriptor() ([]byte, []int) {
	return file_consultingapis_dingtalk_v1_dingtalk_proto_rawDescGZIP(), []int{11}
}

func (x *GetGradeChatGroupResponse) GetChats() []*GetGradeChatGroupResponse_Chat {
	if x != nil {
		return x.Chats
	}
	return nil
}

type SyncGradeChatGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnitId string `protobuf:"bytes,1,opt,name=unitId,proto3" json:"unitId,omitempty"`
	Grade  string `protobuf:"bytes,2,opt,name=grade,proto3" json:"grade,omitempty"`
}

func (x *SyncGradeChatGroupRequest) Reset() {
	*x = SyncGradeChatGroupRequest{}
	mi := &file_consultingapis_dingtalk_v1_dingtalk_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyncGradeChatGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncGradeChatGroupRequest) ProtoMessage() {}

func (x *SyncGradeChatGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_consultingapis_dingtalk_v1_dingtalk_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncGradeChatGroupRequest.ProtoReflect.Descriptor instead.
func (*SyncGradeChatGroupRequest) Descriptor() ([]byte, []int) {
	return file_consultingapis_dingtalk_v1_dingtalk_proto_rawDescGZIP(), []int{12}
}

func (x *SyncGradeChatGroupRequest) GetUnitId() string {
	if x != nil {
		return x.UnitId
	}
	return ""
}

func (x *SyncGradeChatGroupRequest) GetGrade() string {
	if x != nil {
		return x.Grade
	}
	return ""
}

type SyncGradeChatGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *SyncGradeChatGroupResponse) Reset() {
	*x = SyncGradeChatGroupResponse{}
	mi := &file_consultingapis_dingtalk_v1_dingtalk_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyncGradeChatGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncGradeChatGroupResponse) ProtoMessage() {}

func (x *SyncGradeChatGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_consultingapis_dingtalk_v1_dingtalk_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncGradeChatGroupResponse.ProtoReflect.Descriptor instead.
func (*SyncGradeChatGroupResponse) Descriptor() ([]byte, []int) {
	return file_consultingapis_dingtalk_v1_dingtalk_proto_rawDescGZIP(), []int{13}
}

func (x *SyncGradeChatGroupResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type CreateRecruitChatGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Body *CreateRecruitChatGroupRequest_Body `protobuf:"bytes,1,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *CreateRecruitChatGroupRequest) Reset() {
	*x = CreateRecruitChatGroupRequest{}
	mi := &file_consultingapis_dingtalk_v1_dingtalk_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateRecruitChatGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRecruitChatGroupRequest) ProtoMessage() {}

func (x *CreateRecruitChatGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_consultingapis_dingtalk_v1_dingtalk_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRecruitChatGroupRequest.ProtoReflect.Descriptor instead.
func (*CreateRecruitChatGroupRequest) Descriptor() ([]byte, []int) {
	return file_consultingapis_dingtalk_v1_dingtalk_proto_rawDescGZIP(), []int{14}
}

func (x *CreateRecruitChatGroupRequest) GetBody() *CreateRecruitChatGroupRequest_Body {
	if x != nil {
		return x.Body
	}
	return nil
}

type CreateRecruitChatGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatId             string `protobuf:"bytes,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	OpenConversationId string `protobuf:"bytes,2,opt,name=openConversationId,proto3" json:"openConversationId,omitempty"`
	InviteUrl          string `protobuf:"bytes,3,opt,name=invite_url,json=inviteUrl,proto3" json:"invite_url,omitempty"`
}

func (x *CreateRecruitChatGroupResponse) Reset() {
	*x = CreateRecruitChatGroupResponse{}
	mi := &file_consultingapis_dingtalk_v1_dingtalk_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateRecruitChatGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRecruitChatGroupResponse) ProtoMessage() {}

func (x *CreateRecruitChatGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_consultingapis_dingtalk_v1_dingtalk_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRecruitChatGroupResponse.ProtoReflect.Descriptor instead.
func (*CreateRecruitChatGroupResponse) Descriptor() ([]byte, []int) {
	return file_consultingapis_dingtalk_v1_dingtalk_proto_rawDescGZIP(), []int{15}
}

func (x *CreateRecruitChatGroupResponse) GetChatId() string {
	if x != nil {
		return x.ChatId
	}
	return ""
}

func (x *CreateRecruitChatGroupResponse) GetOpenConversationId() string {
	if x != nil {
		return x.OpenConversationId
	}
	return ""
}

func (x *CreateRecruitChatGroupResponse) GetInviteUrl() string {
	if x != nil {
		return x.InviteUrl
	}
	return ""
}

type CreateClassChatGroupRequest_Body struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *CreateClassChatGroupRequest_Body) Reset() {
	*x = CreateClassChatGroupRequest_Body{}
	mi := &file_consultingapis_dingtalk_v1_dingtalk_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateClassChatGroupRequest_Body) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateClassChatGroupRequest_Body) ProtoMessage() {}

func (x *CreateClassChatGroupRequest_Body) ProtoReflect() protoreflect.Message {
	mi := &file_consultingapis_dingtalk_v1_dingtalk_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateClassChatGroupRequest_Body.ProtoReflect.Descriptor instead.
func (*CreateClassChatGroupRequest_Body) Descriptor() ([]byte, []int) {
	return file_consultingapis_dingtalk_v1_dingtalk_proto_rawDescGZIP(), []int{0, 0}
}

func (x *CreateClassChatGroupRequest_Body) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetClassChatGroupResponse_Chat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatId             string `protobuf:"bytes,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	OpenConversationId string `protobuf:"bytes,2,opt,name=openConversationId,proto3" json:"openConversationId,omitempty"`
	InviteUrl          string `protobuf:"bytes,3,opt,name=invite_url,json=inviteUrl,proto3" json:"invite_url,omitempty"`
	CreatedAt          int64  `protobuf:"varint,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *GetClassChatGroupResponse_Chat) Reset() {
	*x = GetClassChatGroupResponse_Chat{}
	mi := &file_consultingapis_dingtalk_v1_dingtalk_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetClassChatGroupResponse_Chat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClassChatGroupResponse_Chat) ProtoMessage() {}

func (x *GetClassChatGroupResponse_Chat) ProtoReflect() protoreflect.Message {
	mi := &file_consultingapis_dingtalk_v1_dingtalk_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClassChatGroupResponse_Chat.ProtoReflect.Descriptor instead.
func (*GetClassChatGroupResponse_Chat) Descriptor() ([]byte, []int) {
	return file_consultingapis_dingtalk_v1_dingtalk_proto_rawDescGZIP(), []int{5, 0}
}

func (x *GetClassChatGroupResponse_Chat) GetChatId() string {
	if x != nil {
		return x.ChatId
	}
	return ""
}

func (x *GetClassChatGroupResponse_Chat) GetOpenConversationId() string {
	if x != nil {
		return x.OpenConversationId
	}
	return ""
}

func (x *GetClassChatGroupResponse_Chat) GetInviteUrl() string {
	if x != nil {
		return x.InviteUrl
	}
	return ""
}

func (x *GetClassChatGroupResponse_Chat) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

type GetGradeChatGroupResponse_Chat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatId             string `protobuf:"bytes,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	OpenConversationId string `protobuf:"bytes,2,opt,name=openConversationId,proto3" json:"openConversationId,omitempty"`
	InviteUrl          string `protobuf:"bytes,3,opt,name=invite_url,json=inviteUrl,proto3" json:"invite_url,omitempty"`
	CreatedAt          int64  `protobuf:"varint,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *GetGradeChatGroupResponse_Chat) Reset() {
	*x = GetGradeChatGroupResponse_Chat{}
	mi := &file_consultingapis_dingtalk_v1_dingtalk_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetGradeChatGroupResponse_Chat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGradeChatGroupResponse_Chat) ProtoMessage() {}

func (x *GetGradeChatGroupResponse_Chat) ProtoReflect() protoreflect.Message {
	mi := &file_consultingapis_dingtalk_v1_dingtalk_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGradeChatGroupResponse_Chat.ProtoReflect.Descriptor instead.
func (*GetGradeChatGroupResponse_Chat) Descriptor() ([]byte, []int) {
	return file_consultingapis_dingtalk_v1_dingtalk_proto_rawDescGZIP(), []int{11, 0}
}

func (x *GetGradeChatGroupResponse_Chat) GetChatId() string {
	if x != nil {
		return x.ChatId
	}
	return ""
}

func (x *GetGradeChatGroupResponse_Chat) GetOpenConversationId() string {
	if x != nil {
		return x.OpenConversationId
	}
	return ""
}

func (x *GetGradeChatGroupResponse_Chat) GetInviteUrl() string {
	if x != nil {
		return x.InviteUrl
	}
	return ""
}

func (x *GetGradeChatGroupResponse_Chat) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

type CreateRecruitChatGroupRequest_Body struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MemberId []string `protobuf:"bytes,1,rep,name=member_id,json=memberId,proto3" json:"member_id,omitempty"`
	Name     string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *CreateRecruitChatGroupRequest_Body) Reset() {
	*x = CreateRecruitChatGroupRequest_Body{}
	mi := &file_consultingapis_dingtalk_v1_dingtalk_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateRecruitChatGroupRequest_Body) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRecruitChatGroupRequest_Body) ProtoMessage() {}

func (x *CreateRecruitChatGroupRequest_Body) ProtoReflect() protoreflect.Message {
	mi := &file_consultingapis_dingtalk_v1_dingtalk_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRecruitChatGroupRequest_Body.ProtoReflect.Descriptor instead.
func (*CreateRecruitChatGroupRequest_Body) Descriptor() ([]byte, []int) {
	return file_consultingapis_dingtalk_v1_dingtalk_proto_rawDescGZIP(), []int{14, 0}
}

func (x *CreateRecruitChatGroupRequest_Body) GetMemberId() []string {
	if x != nil {
		return x.MemberId
	}
	return nil
}

func (x *CreateRecruitChatGroupRequest_Body) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

var File_consultingapis_dingtalk_v1_dingtalk_proto protoreflect.FileDescriptor

var file_consultingapis_dingtalk_v1_dingtalk_proto_rawDesc = []byte{
	0x0a, 0x29, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x74, 0x69, 0x6e, 0x67, 0x61, 0x70, 0x69, 0x73,
	0x2f, 0x64, 0x69, 0x6e, 0x67, 0x74, 0x61, 0x6c, 0x6b, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x69, 0x6e,
	0x67, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1a, 0x63, 0x6f, 0x6e,
	0x73, 0x75, 0x6c, 0x74, 0x69, 0x6e, 0x67, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x69, 0x6e, 0x67,
	0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa6, 0x01, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x43, 0x68, 0x61, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x64,
	0x12, 0x50, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c,
	0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x74, 0x69, 0x6e, 0x67, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x64, 0x69, 0x6e, 0x67, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x43, 0x68, 0x61, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x04, 0x62, 0x6f,
	0x64, 0x79, 0x1a, 0x1a, 0x0a, 0x04, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x86,
	0x01, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x43, 0x68,
	0x61, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x17, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x6f, 0x70, 0x65, 0x6e,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6f, 0x70, 0x65, 0x6e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x69,
	0x74, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x55, 0x72, 0x6c, 0x22, 0x67, 0x0a, 0x1a, 0x4d, 0x65, 0x72, 0x67, 0x65,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x43, 0x68, 0x61, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x64,
	0x12, 0x2e, 0x0a, 0x12, 0x6f, 0x70, 0x65, 0x6e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6f, 0x70,
	0x65, 0x6e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x22, 0x1d, 0x0a, 0x1b, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x43, 0x68,
	0x61, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x35, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x43, 0x68, 0x61, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x49, 0x64, 0x22, 0xfd, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x43, 0x68, 0x61, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x05, 0x63, 0x68, 0x61, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x74, 0x69, 0x6e, 0x67,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x69, 0x6e, 0x67, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x43, 0x68, 0x61, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x52,
	0x05, 0x63, 0x68, 0x61, 0x74, 0x73, 0x1a, 0x8d, 0x01, 0x0a, 0x04, 0x43, 0x68, 0x61, 0x74, 0x12,
	0x17, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x6f, 0x70, 0x65, 0x6e,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6f, 0x70, 0x65, 0x6e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x69,
	0x74, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x36, 0x0a, 0x19, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x43, 0x68, 0x61, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x64, 0x22, 0x36,
	0x0a, 0x1a, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x43, 0x68, 0x61, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x4b, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x47, 0x72, 0x61, 0x64, 0x65, 0x43, 0x68, 0x61, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x6e, 0x69, 0x74, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x6e, 0x69, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x67, 0x72, 0x61, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x67, 0x72,
	0x61, 0x64, 0x65, 0x22, 0x86, 0x01, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x72,
	0x61, 0x64, 0x65, 0x43, 0x68, 0x61, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x2e, 0x0a,
	0x12, 0x6f, 0x70, 0x65, 0x6e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6f, 0x70, 0x65, 0x6e, 0x43,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x55, 0x72, 0x6c, 0x22, 0x48, 0x0a, 0x18,
	0x47, 0x65, 0x74, 0x47, 0x72, 0x61, 0x64, 0x65, 0x43, 0x68, 0x61, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x6e, 0x69, 0x74,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x6e, 0x69, 0x74, 0x49, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x67, 0x72, 0x61, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x67, 0x72, 0x61, 0x64, 0x65, 0x22, 0xfd, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x47, 0x72,
	0x61, 0x64, 0x65, 0x43, 0x68, 0x61, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x05, 0x63, 0x68, 0x61, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x74, 0x69, 0x6e, 0x67,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x69, 0x6e, 0x67, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x47, 0x72, 0x61, 0x64, 0x65, 0x43, 0x68, 0x61, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x52,
	0x05, 0x63, 0x68, 0x61, 0x74, 0x73, 0x1a, 0x8d, 0x01, 0x0a, 0x04, 0x43, 0x68, 0x61, 0x74, 0x12,
	0x17, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x6f, 0x70, 0x65, 0x6e,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6f, 0x70, 0x65, 0x6e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x69,
	0x74, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x49, 0x0a, 0x19, 0x53, 0x79, 0x6e, 0x63, 0x47, 0x72,
	0x61, 0x64, 0x65, 0x43, 0x68, 0x61, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x6e, 0x69, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x6e, 0x69, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x67,
	0x72, 0x61, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x67, 0x72, 0x61, 0x64,
	0x65, 0x22, 0x36, 0x0a, 0x1a, 0x53, 0x79, 0x6e, 0x63, 0x47, 0x72, 0x61, 0x64, 0x65, 0x43, 0x68,
	0x61, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xac, 0x01, 0x0a, 0x1d, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x72, 0x75, 0x69, 0x74, 0x43, 0x68, 0x61, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x52, 0x0a, 0x04, 0x62,
	0x6f, 0x64, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x63, 0x6f, 0x6e, 0x73,
	0x75, 0x6c, 0x74, 0x69, 0x6e, 0x67, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x69, 0x6e, 0x67, 0x74,
	0x61, 0x6c, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63,
	0x72, 0x75, 0x69, 0x74, 0x43, 0x68, 0x61, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x1a,
	0x37, 0x0a, 0x04, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x88, 0x01, 0x0a, 0x1e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x72, 0x75, 0x69, 0x74, 0x43, 0x68, 0x61, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x63,
	0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x68,
	0x61, 0x74, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x6f, 0x70, 0x65, 0x6e, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x6f, 0x70, 0x65, 0x6e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x55, 0x72, 0x6c, 0x32, 0xfe, 0x0a, 0x0a, 0x0f, 0x44, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x6c, 0x6b,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xb1, 0x01, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x43, 0x68, 0x61, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0x37, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x74, 0x69, 0x6e, 0x67, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x64, 0x69, 0x6e, 0x67, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x43, 0x68, 0x61, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x63, 0x6f, 0x6e, 0x73,
	0x75, 0x6c, 0x74, 0x69, 0x6e, 0x67, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x69, 0x6e, 0x67, 0x74,
	0x61, 0x6c, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x43, 0x68, 0x61, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x3a, 0x04, 0x62, 0x6f, 0x64,
	0x79, 0x22, 0x18, 0x2f, 0x64, 0x69, 0x6e, 0x67, 0x74, 0x61, 0x6c, 0x6b, 0x2f, 0x63, 0x68, 0x61,
	0x74, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x9f, 0x01, 0x0a, 0x11,
	0x47, 0x65, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x43, 0x68, 0x61, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x34, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x74, 0x69, 0x6e, 0x67, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x64, 0x69, 0x6e, 0x67, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x43, 0x68, 0x61, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6c,
	0x74, 0x69, 0x6e, 0x67, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x69, 0x6e, 0x67, 0x74, 0x61, 0x6c,
	0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x43, 0x68, 0x61,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1d,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x12, 0x15, 0x2f, 0x64, 0x69, 0x6e, 0x67, 0x74, 0x61, 0x6c,
	0x6b, 0x2f, 0x63, 0x68, 0x61, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x12, 0xa7, 0x01,
	0x0a, 0x13, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x43, 0x68, 0x61, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x36, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x74, 0x69,
	0x6e, 0x67, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x69, 0x6e, 0x67, 0x74, 0x61, 0x6c, 0x6b, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x43, 0x68, 0x61,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e,
	0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x74, 0x69, 0x6e, 0x67, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64,
	0x69, 0x6e, 0x67, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x72, 0x67, 0x65,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x43, 0x68, 0x61, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x12, 0x17,
	0x2f, 0x64, 0x69, 0x6e, 0x67, 0x74, 0x61, 0x6c, 0x6b, 0x2f, 0x63, 0x68, 0x61, 0x74, 0x2f, 0x76,
	0x31, 0x2f, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x12, 0xa3, 0x01, 0x0a, 0x12, 0x53, 0x79, 0x6e, 0x63,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x43, 0x68, 0x61, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x35,
	0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x74, 0x69, 0x6e, 0x67, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x64, 0x69, 0x6e, 0x67, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x6e, 0x63,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x43, 0x68, 0x61, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x74, 0x69,
	0x6e, 0x67, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x69, 0x6e, 0x67, 0x74, 0x61, 0x6c, 0x6b, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x43, 0x68, 0x61, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1e, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x18, 0x12, 0x16, 0x2f, 0x64, 0x69, 0x6e, 0x67, 0x74, 0x61, 0x6c, 0x6b,
	0x2f, 0x63, 0x68, 0x61, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x79, 0x6e, 0x63, 0x12, 0xb0, 0x01,
	0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x72, 0x61, 0x64, 0x65, 0x43, 0x68, 0x61,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x37, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x74,
	0x69, 0x6e, 0x67, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x69, 0x6e, 0x67, 0x74, 0x61, 0x6c, 0x6b,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x72, 0x61, 0x64, 0x65, 0x43,
	0x68, 0x61, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x38, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x74, 0x69, 0x6e, 0x67, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x64, 0x69, 0x6e, 0x67, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x47, 0x72, 0x61, 0x64, 0x65, 0x43, 0x68, 0x61, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x1f, 0x22, 0x1d, 0x2f, 0x64, 0x69, 0x6e, 0x67, 0x74, 0x61, 0x6c, 0x6b, 0x2f, 0x63, 0x68, 0x61,
	0x74, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x6e, 0x69, 0x74, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x12, 0xa4, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x47, 0x72, 0x61, 0x64, 0x65, 0x43, 0x68, 0x61,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x34, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x74,
	0x69, 0x6e, 0x67, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x69, 0x6e, 0x67, 0x74, 0x61, 0x6c, 0x6b,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x72, 0x61, 0x64, 0x65, 0x43, 0x68, 0x61, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x63,
	0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x74, 0x69, 0x6e, 0x67, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x69,
	0x6e, 0x67, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x72, 0x61,
	0x64, 0x65, 0x43, 0x68, 0x61, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x12, 0x1a, 0x2f, 0x64, 0x69,
	0x6e, 0x67, 0x74, 0x61, 0x6c, 0x6b, 0x2f, 0x63, 0x68, 0x61, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x75,
	0x6e, 0x69, 0x74, 0x2f, 0x67, 0x65, 0x74, 0x12, 0xa8, 0x01, 0x0a, 0x12, 0x53, 0x79, 0x6e, 0x63,
	0x47, 0x72, 0x61, 0x64, 0x65, 0x43, 0x68, 0x61, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x35,
	0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x74, 0x69, 0x6e, 0x67, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x64, 0x69, 0x6e, 0x67, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x6e, 0x63,
	0x47, 0x72, 0x61, 0x64, 0x65, 0x43, 0x68, 0x61, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x74, 0x69,
	0x6e, 0x67, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x69, 0x6e, 0x67, 0x74, 0x61, 0x6c, 0x6b, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x47, 0x72, 0x61, 0x64, 0x65, 0x43, 0x68, 0x61, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x23, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x12, 0x1b, 0x2f, 0x64, 0x69, 0x6e, 0x67, 0x74, 0x61, 0x6c, 0x6b,
	0x2f, 0x63, 0x68, 0x61, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x6e, 0x69, 0x74, 0x2f, 0x73, 0x79,
	0x6e, 0x63, 0x12, 0xbf, 0x01, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63,
	0x72, 0x75, 0x69, 0x74, 0x43, 0x68, 0x61, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x39, 0x2e,
	0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x74, 0x69, 0x6e, 0x67, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64,
	0x69, 0x6e, 0x67, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x63, 0x72, 0x75, 0x69, 0x74, 0x43, 0x68, 0x61, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x75,
	0x6c, 0x74, 0x69, 0x6e, 0x67, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x69, 0x6e, 0x67, 0x74, 0x61,
	0x6c, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x72,
	0x75, 0x69, 0x74, 0x43, 0x68, 0x61, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x3a, 0x04, 0x62, 0x6f,
	0x64, 0x79, 0x22, 0x20, 0x2f, 0x64, 0x69, 0x6e, 0x67, 0x74, 0x61, 0x6c, 0x6b, 0x2f, 0x63, 0x68,
	0x61, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x63, 0x72, 0x75, 0x69, 0x74, 0x2f, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x42, 0x80, 0x02, 0x0a, 0x1e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x6e,
	0x73, 0x75, 0x6c, 0x74, 0x69, 0x6e, 0x67, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x69, 0x6e, 0x67,
	0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x76, 0x31, 0x42, 0x0d, 0x44, 0x69, 0x6e, 0x67, 0x74, 0x61, 0x6c,
	0x6b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x45, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x68, 0x64, 0x75, 0x68, 0x65, 0x6c, 0x70, 0x2f, 0x61, 0x70, 0x69,
	0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x73, 0x64, 0x6b, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6c,
	0x74, 0x69, 0x6e, 0x67, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x64, 0x69, 0x6e, 0x67, 0x74, 0x61, 0x6c,
	0x6b, 0x2f, 0x76, 0x31, 0x3b, 0x64, 0x69, 0x6e, 0x67, 0x74, 0x61, 0x6c, 0x6b, 0x76, 0x31, 0xa2,
	0x02, 0x03, 0x43, 0x44, 0x58, 0xaa, 0x02, 0x1a, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x74, 0x69,
	0x6e, 0x67, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x44, 0x69, 0x6e, 0x67, 0x74, 0x61, 0x6c, 0x6b, 0x2e,
	0x56, 0x31, 0xca, 0x02, 0x1a, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x74, 0x69, 0x6e, 0x67, 0x61,
	0x70, 0x69, 0x73, 0x5c, 0x44, 0x69, 0x6e, 0x67, 0x74, 0x61, 0x6c, 0x6b, 0x5c, 0x56, 0x31, 0xe2,
	0x02, 0x26, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x74, 0x69, 0x6e, 0x67, 0x61, 0x70, 0x69, 0x73,
	0x5c, 0x44, 0x69, 0x6e, 0x67, 0x74, 0x61, 0x6c, 0x6b, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x1c, 0x43, 0x6f, 0x6e, 0x73, 0x75,
	0x6c, 0x74, 0x69, 0x6e, 0x67, 0x61, 0x70, 0x69, 0x73, 0x3a, 0x3a, 0x44, 0x69, 0x6e, 0x67, 0x74,
	0x61, 0x6c, 0x6b, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_consultingapis_dingtalk_v1_dingtalk_proto_rawDescOnce sync.Once
	file_consultingapis_dingtalk_v1_dingtalk_proto_rawDescData = file_consultingapis_dingtalk_v1_dingtalk_proto_rawDesc
)

func file_consultingapis_dingtalk_v1_dingtalk_proto_rawDescGZIP() []byte {
	file_consultingapis_dingtalk_v1_dingtalk_proto_rawDescOnce.Do(func() {
		file_consultingapis_dingtalk_v1_dingtalk_proto_rawDescData = protoimpl.X.CompressGZIP(file_consultingapis_dingtalk_v1_dingtalk_proto_rawDescData)
	})
	return file_consultingapis_dingtalk_v1_dingtalk_proto_rawDescData
}

var file_consultingapis_dingtalk_v1_dingtalk_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_consultingapis_dingtalk_v1_dingtalk_proto_goTypes = []any{
	(*CreateClassChatGroupRequest)(nil),        // 0: consultingapis.dingtalk.v1.CreateClassChatGroupRequest
	(*CreateClassChatGroupResponse)(nil),       // 1: consultingapis.dingtalk.v1.CreateClassChatGroupResponse
	(*MergeClassChatGroupRequest)(nil),         // 2: consultingapis.dingtalk.v1.MergeClassChatGroupRequest
	(*MergeClassChatGroupResponse)(nil),        // 3: consultingapis.dingtalk.v1.MergeClassChatGroupResponse
	(*GetClassChatGroupRequest)(nil),           // 4: consultingapis.dingtalk.v1.GetClassChatGroupRequest
	(*GetClassChatGroupResponse)(nil),          // 5: consultingapis.dingtalk.v1.GetClassChatGroupResponse
	(*SyncClassChatGroupRequest)(nil),          // 6: consultingapis.dingtalk.v1.SyncClassChatGroupRequest
	(*SyncClassChatGroupResponse)(nil),         // 7: consultingapis.dingtalk.v1.SyncClassChatGroupResponse
	(*CreateGradeChatGroupRequest)(nil),        // 8: consultingapis.dingtalk.v1.CreateGradeChatGroupRequest
	(*CreateGradeChatGroupResponse)(nil),       // 9: consultingapis.dingtalk.v1.CreateGradeChatGroupResponse
	(*GetGradeChatGroupRequest)(nil),           // 10: consultingapis.dingtalk.v1.GetGradeChatGroupRequest
	(*GetGradeChatGroupResponse)(nil),          // 11: consultingapis.dingtalk.v1.GetGradeChatGroupResponse
	(*SyncGradeChatGroupRequest)(nil),          // 12: consultingapis.dingtalk.v1.SyncGradeChatGroupRequest
	(*SyncGradeChatGroupResponse)(nil),         // 13: consultingapis.dingtalk.v1.SyncGradeChatGroupResponse
	(*CreateRecruitChatGroupRequest)(nil),      // 14: consultingapis.dingtalk.v1.CreateRecruitChatGroupRequest
	(*CreateRecruitChatGroupResponse)(nil),     // 15: consultingapis.dingtalk.v1.CreateRecruitChatGroupResponse
	(*CreateClassChatGroupRequest_Body)(nil),   // 16: consultingapis.dingtalk.v1.CreateClassChatGroupRequest.Body
	(*GetClassChatGroupResponse_Chat)(nil),     // 17: consultingapis.dingtalk.v1.GetClassChatGroupResponse.Chat
	(*GetGradeChatGroupResponse_Chat)(nil),     // 18: consultingapis.dingtalk.v1.GetGradeChatGroupResponse.Chat
	(*CreateRecruitChatGroupRequest_Body)(nil), // 19: consultingapis.dingtalk.v1.CreateRecruitChatGroupRequest.Body
}
var file_consultingapis_dingtalk_v1_dingtalk_proto_depIdxs = []int32{
	16, // 0: consultingapis.dingtalk.v1.CreateClassChatGroupRequest.body:type_name -> consultingapis.dingtalk.v1.CreateClassChatGroupRequest.Body
	17, // 1: consultingapis.dingtalk.v1.GetClassChatGroupResponse.chats:type_name -> consultingapis.dingtalk.v1.GetClassChatGroupResponse.Chat
	18, // 2: consultingapis.dingtalk.v1.GetGradeChatGroupResponse.chats:type_name -> consultingapis.dingtalk.v1.GetGradeChatGroupResponse.Chat
	19, // 3: consultingapis.dingtalk.v1.CreateRecruitChatGroupRequest.body:type_name -> consultingapis.dingtalk.v1.CreateRecruitChatGroupRequest.Body
	0,  // 4: consultingapis.dingtalk.v1.DingTalkService.CreateClassChatGroup:input_type -> consultingapis.dingtalk.v1.CreateClassChatGroupRequest
	4,  // 5: consultingapis.dingtalk.v1.DingTalkService.GetClassChatGroup:input_type -> consultingapis.dingtalk.v1.GetClassChatGroupRequest
	2,  // 6: consultingapis.dingtalk.v1.DingTalkService.MergeClassChatGroup:input_type -> consultingapis.dingtalk.v1.MergeClassChatGroupRequest
	6,  // 7: consultingapis.dingtalk.v1.DingTalkService.SyncClassChatGroup:input_type -> consultingapis.dingtalk.v1.SyncClassChatGroupRequest
	8,  // 8: consultingapis.dingtalk.v1.DingTalkService.CreateGradeChatGroup:input_type -> consultingapis.dingtalk.v1.CreateGradeChatGroupRequest
	10, // 9: consultingapis.dingtalk.v1.DingTalkService.GetGradeChatGroup:input_type -> consultingapis.dingtalk.v1.GetGradeChatGroupRequest
	12, // 10: consultingapis.dingtalk.v1.DingTalkService.SyncGradeChatGroup:input_type -> consultingapis.dingtalk.v1.SyncGradeChatGroupRequest
	14, // 11: consultingapis.dingtalk.v1.DingTalkService.CreateRecruitChatGroup:input_type -> consultingapis.dingtalk.v1.CreateRecruitChatGroupRequest
	1,  // 12: consultingapis.dingtalk.v1.DingTalkService.CreateClassChatGroup:output_type -> consultingapis.dingtalk.v1.CreateClassChatGroupResponse
	5,  // 13: consultingapis.dingtalk.v1.DingTalkService.GetClassChatGroup:output_type -> consultingapis.dingtalk.v1.GetClassChatGroupResponse
	3,  // 14: consultingapis.dingtalk.v1.DingTalkService.MergeClassChatGroup:output_type -> consultingapis.dingtalk.v1.MergeClassChatGroupResponse
	7,  // 15: consultingapis.dingtalk.v1.DingTalkService.SyncClassChatGroup:output_type -> consultingapis.dingtalk.v1.SyncClassChatGroupResponse
	9,  // 16: consultingapis.dingtalk.v1.DingTalkService.CreateGradeChatGroup:output_type -> consultingapis.dingtalk.v1.CreateGradeChatGroupResponse
	11, // 17: consultingapis.dingtalk.v1.DingTalkService.GetGradeChatGroup:output_type -> consultingapis.dingtalk.v1.GetGradeChatGroupResponse
	13, // 18: consultingapis.dingtalk.v1.DingTalkService.SyncGradeChatGroup:output_type -> consultingapis.dingtalk.v1.SyncGradeChatGroupResponse
	15, // 19: consultingapis.dingtalk.v1.DingTalkService.CreateRecruitChatGroup:output_type -> consultingapis.dingtalk.v1.CreateRecruitChatGroupResponse
	12, // [12:20] is the sub-list for method output_type
	4,  // [4:12] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_consultingapis_dingtalk_v1_dingtalk_proto_init() }
func file_consultingapis_dingtalk_v1_dingtalk_proto_init() {
	if File_consultingapis_dingtalk_v1_dingtalk_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_consultingapis_dingtalk_v1_dingtalk_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_consultingapis_dingtalk_v1_dingtalk_proto_goTypes,
		DependencyIndexes: file_consultingapis_dingtalk_v1_dingtalk_proto_depIdxs,
		MessageInfos:      file_consultingapis_dingtalk_v1_dingtalk_proto_msgTypes,
	}.Build()
	File_consultingapis_dingtalk_v1_dingtalk_proto = out.File
	file_consultingapis_dingtalk_v1_dingtalk_proto_rawDesc = nil
	file_consultingapis_dingtalk_v1_dingtalk_proto_goTypes = nil
	file_consultingapis_dingtalk_v1_dingtalk_proto_depIdxs = nil
}
