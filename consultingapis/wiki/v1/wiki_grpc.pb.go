// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: consultingapis/wiki/v1/wiki.proto

package faqv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WikiServiceClient is the client API for WikiService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WikiServiceClient interface {
	GetDocContent(ctx context.Context, in *DocTokenReq, opts ...grpc.CallOption) (*DocTokenResp, error)
	GetNodeList(ctx context.Context, in *NodeReq, opts ...grpc.CallOption) (*NodeResp, error)
}

type wikiServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWikiServiceClient(cc grpc.ClientConnInterface) WikiServiceClient {
	return &wikiServiceClient{cc}
}

func (c *wikiServiceClient) GetDocContent(ctx context.Context, in *DocTokenReq, opts ...grpc.CallOption) (*DocTokenResp, error) {
	out := new(DocTokenResp)
	err := c.cc.Invoke(ctx, "/consultingapis.faq.v1.WikiService/GetDocContent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wikiServiceClient) GetNodeList(ctx context.Context, in *NodeReq, opts ...grpc.CallOption) (*NodeResp, error) {
	out := new(NodeResp)
	err := c.cc.Invoke(ctx, "/consultingapis.faq.v1.WikiService/GetNodeList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WikiServiceServer is the server API for WikiService service.
// All implementations should embed UnimplementedWikiServiceServer
// for forward compatibility
type WikiServiceServer interface {
	GetDocContent(context.Context, *DocTokenReq) (*DocTokenResp, error)
	GetNodeList(context.Context, *NodeReq) (*NodeResp, error)
}

// UnimplementedWikiServiceServer should be embedded to have forward compatible implementations.
type UnimplementedWikiServiceServer struct {
}

func (UnimplementedWikiServiceServer) GetDocContent(context.Context, *DocTokenReq) (*DocTokenResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDocContent not implemented")
}
func (UnimplementedWikiServiceServer) GetNodeList(context.Context, *NodeReq) (*NodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodeList not implemented")
}

// UnsafeWikiServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WikiServiceServer will
// result in compilation errors.
type UnsafeWikiServiceServer interface {
	mustEmbedUnimplementedWikiServiceServer()
}

func RegisterWikiServiceServer(s grpc.ServiceRegistrar, srv WikiServiceServer) {
	s.RegisterService(&WikiService_ServiceDesc, srv)
}

func _WikiService_GetDocContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DocTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WikiServiceServer).GetDocContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/consultingapis.faq.v1.WikiService/GetDocContent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WikiServiceServer).GetDocContent(ctx, req.(*DocTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WikiService_GetNodeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WikiServiceServer).GetNodeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/consultingapis.faq.v1.WikiService/GetNodeList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WikiServiceServer).GetNodeList(ctx, req.(*NodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

// WikiService_ServiceDesc is the grpc.ServiceDesc for WikiService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WikiService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "consultingapis.faq.v1.WikiService",
	HandlerType: (*WikiServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDocContent",
			Handler:    _WikiService_GetDocContent_Handler,
		},
		{
			MethodName: "GetNodeList",
			Handler:    _WikiService_GetNodeList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "consultingapis/wiki/v1/wiki.proto",
}
