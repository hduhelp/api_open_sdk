// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: campusapis/backup/backup.proto

package backup

import (
	context "context"
	v1 "github.com/hduhelp/api_open_sdk/campusapis/staff/v1"
	v11 "github.com/hduhelp/api_open_sdk/campusapis/teaching/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CampusBackupService_GetPersonInfo_FullMethodName    = "/campusapis.backup.CampusBackupService/GetPersonInfo"
	CampusBackupService_GetStudentInfo_FullMethodName   = "/campusapis.backup.CampusBackupService/GetStudentInfo"
	CampusBackupService_GetStudentGrade_FullMethodName  = "/campusapis.backup.CampusBackupService/GetStudentGrade"
	CampusBackupService_GetStudentExam_FullMethodName   = "/campusapis.backup.CampusBackupService/GetStudentExam"
	CampusBackupService_GetScheduleNowV2_FullMethodName = "/campusapis.backup.CampusBackupService/GetScheduleNowV2"
)

// CampusBackupServiceClient is the client API for CampusBackupService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CampusBackupServiceClient interface {
	// 获取员工信息
	GetPersonInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*v1.GetPersonInfoResponse, error)
	// 获取学生基本信息
	GetStudentInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*v1.GetStudentInfoResponse, error)
	// 获取学生成绩信息
	GetStudentGrade(ctx context.Context, in *v1.GetStudentGradeRequest, opts ...grpc.CallOption) (*v1.GetStudentGradeResponse, error)
	// 获取学生考试信息
	GetStudentExam(ctx context.Context, in *v1.GetStudentExamRequest, opts ...grpc.CallOption) (*v1.GetStudentExamResponse, error)
	// 获取学生/教师当前课程表V2 返回更详细的信息
	GetScheduleNowV2(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*v11.GetScheduleNowV2Response, error)
}

type campusBackupServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCampusBackupServiceClient(cc grpc.ClientConnInterface) CampusBackupServiceClient {
	return &campusBackupServiceClient{cc}
}

func (c *campusBackupServiceClient) GetPersonInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*v1.GetPersonInfoResponse, error) {
	out := new(v1.GetPersonInfoResponse)
	err := c.cc.Invoke(ctx, CampusBackupService_GetPersonInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *campusBackupServiceClient) GetStudentInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*v1.GetStudentInfoResponse, error) {
	out := new(v1.GetStudentInfoResponse)
	err := c.cc.Invoke(ctx, CampusBackupService_GetStudentInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *campusBackupServiceClient) GetStudentGrade(ctx context.Context, in *v1.GetStudentGradeRequest, opts ...grpc.CallOption) (*v1.GetStudentGradeResponse, error) {
	out := new(v1.GetStudentGradeResponse)
	err := c.cc.Invoke(ctx, CampusBackupService_GetStudentGrade_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *campusBackupServiceClient) GetStudentExam(ctx context.Context, in *v1.GetStudentExamRequest, opts ...grpc.CallOption) (*v1.GetStudentExamResponse, error) {
	out := new(v1.GetStudentExamResponse)
	err := c.cc.Invoke(ctx, CampusBackupService_GetStudentExam_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *campusBackupServiceClient) GetScheduleNowV2(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*v11.GetScheduleNowV2Response, error) {
	out := new(v11.GetScheduleNowV2Response)
	err := c.cc.Invoke(ctx, CampusBackupService_GetScheduleNowV2_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CampusBackupServiceServer is the server API for CampusBackupService service.
// All implementations must embed UnimplementedCampusBackupServiceServer
// for forward compatibility
type CampusBackupServiceServer interface {
	// 获取员工信息
	GetPersonInfo(context.Context, *emptypb.Empty) (*v1.GetPersonInfoResponse, error)
	// 获取学生基本信息
	GetStudentInfo(context.Context, *emptypb.Empty) (*v1.GetStudentInfoResponse, error)
	// 获取学生成绩信息
	GetStudentGrade(context.Context, *v1.GetStudentGradeRequest) (*v1.GetStudentGradeResponse, error)
	// 获取学生考试信息
	GetStudentExam(context.Context, *v1.GetStudentExamRequest) (*v1.GetStudentExamResponse, error)
	// 获取学生/教师当前课程表V2 返回更详细的信息
	GetScheduleNowV2(context.Context, *emptypb.Empty) (*v11.GetScheduleNowV2Response, error)
	mustEmbedUnimplementedCampusBackupServiceServer()
}

// UnimplementedCampusBackupServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCampusBackupServiceServer struct {
}

func (UnimplementedCampusBackupServiceServer) GetPersonInfo(context.Context, *emptypb.Empty) (*v1.GetPersonInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPersonInfo not implemented")
}
func (UnimplementedCampusBackupServiceServer) GetStudentInfo(context.Context, *emptypb.Empty) (*v1.GetStudentInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStudentInfo not implemented")
}
func (UnimplementedCampusBackupServiceServer) GetStudentGrade(context.Context, *v1.GetStudentGradeRequest) (*v1.GetStudentGradeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStudentGrade not implemented")
}
func (UnimplementedCampusBackupServiceServer) GetStudentExam(context.Context, *v1.GetStudentExamRequest) (*v1.GetStudentExamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStudentExam not implemented")
}
func (UnimplementedCampusBackupServiceServer) GetScheduleNowV2(context.Context, *emptypb.Empty) (*v11.GetScheduleNowV2Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScheduleNowV2 not implemented")
}
func (UnimplementedCampusBackupServiceServer) mustEmbedUnimplementedCampusBackupServiceServer() {}

// UnsafeCampusBackupServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CampusBackupServiceServer will
// result in compilation errors.
type UnsafeCampusBackupServiceServer interface {
	mustEmbedUnimplementedCampusBackupServiceServer()
}

func RegisterCampusBackupServiceServer(s grpc.ServiceRegistrar, srv CampusBackupServiceServer) {
	s.RegisterService(&CampusBackupService_ServiceDesc, srv)
}

func _CampusBackupService_GetPersonInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampusBackupServiceServer).GetPersonInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CampusBackupService_GetPersonInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampusBackupServiceServer).GetPersonInfo(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CampusBackupService_GetStudentInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampusBackupServiceServer).GetStudentInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CampusBackupService_GetStudentInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampusBackupServiceServer).GetStudentInfo(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CampusBackupService_GetStudentGrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.GetStudentGradeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampusBackupServiceServer).GetStudentGrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CampusBackupService_GetStudentGrade_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampusBackupServiceServer).GetStudentGrade(ctx, req.(*v1.GetStudentGradeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CampusBackupService_GetStudentExam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.GetStudentExamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampusBackupServiceServer).GetStudentExam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CampusBackupService_GetStudentExam_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampusBackupServiceServer).GetStudentExam(ctx, req.(*v1.GetStudentExamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CampusBackupService_GetScheduleNowV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampusBackupServiceServer).GetScheduleNowV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CampusBackupService_GetScheduleNowV2_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampusBackupServiceServer).GetScheduleNowV2(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// CampusBackupService_ServiceDesc is the grpc.ServiceDesc for CampusBackupService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CampusBackupService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "campusapis.backup.CampusBackupService",
	HandlerType: (*CampusBackupServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPersonInfo",
			Handler:    _CampusBackupService_GetPersonInfo_Handler,
		},
		{
			MethodName: "GetStudentInfo",
			Handler:    _CampusBackupService_GetStudentInfo_Handler,
		},
		{
			MethodName: "GetStudentGrade",
			Handler:    _CampusBackupService_GetStudentGrade_Handler,
		},
		{
			MethodName: "GetStudentExam",
			Handler:    _CampusBackupService_GetStudentExam_Handler,
		},
		{
			MethodName: "GetScheduleNowV2",
			Handler:    _CampusBackupService_GetScheduleNowV2_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "campusapis/backup/backup.proto",
}
