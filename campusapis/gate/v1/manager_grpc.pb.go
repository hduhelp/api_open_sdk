// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: campusapis/gate/v1/manager.proto

package gatev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GateManagerServiceClient is the client API for GateManagerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GateManagerServiceClient interface {
	//门禁回调，给第三方服务使用
	PostCampusGateEventCallback(ctx context.Context, in *PostCampusGateEventCallbackRequest, opts ...grpc.CallOption) (*PostCampusGateEventCallbackResponse, error)
	//推送学生门禁通行信息，仅供内部服务调用
	PostStudentGateAccess(ctx context.Context, in *PostStudentGateAccessRequest, opts ...grpc.CallOption) (*PostStudentGateAccessResponse, error)
	//注册门禁事件回调至应用，仅供内部服务调用，对应服务需要实现GateCallbackService服务，重复推送视为累加
	PostRegisterGateEvent(ctx context.Context, in *PostRegisterGateEventRequest, opts ...grpc.CallOption) (*PostRegisterGateEventResponse, error)
}

type gateManagerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGateManagerServiceClient(cc grpc.ClientConnInterface) GateManagerServiceClient {
	return &gateManagerServiceClient{cc}
}

func (c *gateManagerServiceClient) PostCampusGateEventCallback(ctx context.Context, in *PostCampusGateEventCallbackRequest, opts ...grpc.CallOption) (*PostCampusGateEventCallbackResponse, error) {
	out := new(PostCampusGateEventCallbackResponse)
	err := c.cc.Invoke(ctx, "/campusapis.gate.v1.GateManagerService/PostCampusGateEventCallback", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateManagerServiceClient) PostStudentGateAccess(ctx context.Context, in *PostStudentGateAccessRequest, opts ...grpc.CallOption) (*PostStudentGateAccessResponse, error) {
	out := new(PostStudentGateAccessResponse)
	err := c.cc.Invoke(ctx, "/campusapis.gate.v1.GateManagerService/PostStudentGateAccess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateManagerServiceClient) PostRegisterGateEvent(ctx context.Context, in *PostRegisterGateEventRequest, opts ...grpc.CallOption) (*PostRegisterGateEventResponse, error) {
	out := new(PostRegisterGateEventResponse)
	err := c.cc.Invoke(ctx, "/campusapis.gate.v1.GateManagerService/PostRegisterGateEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GateManagerServiceServer is the server API for GateManagerService service.
// All implementations should embed UnimplementedGateManagerServiceServer
// for forward compatibility
type GateManagerServiceServer interface {
	//门禁回调，给第三方服务使用
	PostCampusGateEventCallback(context.Context, *PostCampusGateEventCallbackRequest) (*PostCampusGateEventCallbackResponse, error)
	//推送学生门禁通行信息，仅供内部服务调用
	PostStudentGateAccess(context.Context, *PostStudentGateAccessRequest) (*PostStudentGateAccessResponse, error)
	//注册门禁事件回调至应用，仅供内部服务调用，对应服务需要实现GateCallbackService服务，重复推送视为累加
	PostRegisterGateEvent(context.Context, *PostRegisterGateEventRequest) (*PostRegisterGateEventResponse, error)
}

// UnimplementedGateManagerServiceServer should be embedded to have forward compatible implementations.
type UnimplementedGateManagerServiceServer struct {
}

func (UnimplementedGateManagerServiceServer) PostCampusGateEventCallback(context.Context, *PostCampusGateEventCallbackRequest) (*PostCampusGateEventCallbackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostCampusGateEventCallback not implemented")
}
func (UnimplementedGateManagerServiceServer) PostStudentGateAccess(context.Context, *PostStudentGateAccessRequest) (*PostStudentGateAccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostStudentGateAccess not implemented")
}
func (UnimplementedGateManagerServiceServer) PostRegisterGateEvent(context.Context, *PostRegisterGateEventRequest) (*PostRegisterGateEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostRegisterGateEvent not implemented")
}

// UnsafeGateManagerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GateManagerServiceServer will
// result in compilation errors.
type UnsafeGateManagerServiceServer interface {
	mustEmbedUnimplementedGateManagerServiceServer()
}

func RegisterGateManagerServiceServer(s grpc.ServiceRegistrar, srv GateManagerServiceServer) {
	s.RegisterService(&GateManagerService_ServiceDesc, srv)
}

func _GateManagerService_PostCampusGateEventCallback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostCampusGateEventCallbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateManagerServiceServer).PostCampusGateEventCallback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/campusapis.gate.v1.GateManagerService/PostCampusGateEventCallback",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateManagerServiceServer).PostCampusGateEventCallback(ctx, req.(*PostCampusGateEventCallbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateManagerService_PostStudentGateAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostStudentGateAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateManagerServiceServer).PostStudentGateAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/campusapis.gate.v1.GateManagerService/PostStudentGateAccess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateManagerServiceServer).PostStudentGateAccess(ctx, req.(*PostStudentGateAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateManagerService_PostRegisterGateEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostRegisterGateEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateManagerServiceServer).PostRegisterGateEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/campusapis.gate.v1.GateManagerService/PostRegisterGateEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateManagerServiceServer).PostRegisterGateEvent(ctx, req.(*PostRegisterGateEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GateManagerService_ServiceDesc is the grpc.ServiceDesc for GateManagerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GateManagerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "campusapis.gate.v1.GateManagerService",
	HandlerType: (*GateManagerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PostCampusGateEventCallback",
			Handler:    _GateManagerService_PostCampusGateEventCallback_Handler,
		},
		{
			MethodName: "PostStudentGateAccess",
			Handler:    _GateManagerService_PostStudentGateAccess_Handler,
		},
		{
			MethodName: "PostRegisterGateEvent",
			Handler:    _GateManagerService_PostRegisterGateEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "campusapis/gate/v1/manager.proto",
}
