// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package teachingv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TeachingServiceClient is the client API for TeachingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TeachingServiceClient interface {
	GetScheduleRequest(ctx context.Context, in *GetScheduleRequestRequest, opts ...grpc.CallOption) (*Courses, error)
	GetClassrooms(ctx context.Context, in *ClassroomRequest, opts ...grpc.CallOption) (*ClassroomsResponse, error)
	GetClassroomUsages(ctx context.Context, in *ClassroomRequest, opts ...grpc.CallOption) (*ClassroomUsagesResponse, error)
	GetUnusedClassrooms(ctx context.Context, in *ClassroomRequest, opts ...grpc.CallOption) (*ClassroomsResponse, error)
}

type teachingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTeachingServiceClient(cc grpc.ClientConnInterface) TeachingServiceClient {
	return &teachingServiceClient{cc}
}

func (c *teachingServiceClient) GetScheduleRequest(ctx context.Context, in *GetScheduleRequestRequest, opts ...grpc.CallOption) (*Courses, error) {
	out := new(Courses)
	err := c.cc.Invoke(ctx, "/campusapis.teaching.v1.TeachingService/GetScheduleRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teachingServiceClient) GetClassrooms(ctx context.Context, in *ClassroomRequest, opts ...grpc.CallOption) (*ClassroomsResponse, error) {
	out := new(ClassroomsResponse)
	err := c.cc.Invoke(ctx, "/campusapis.teaching.v1.TeachingService/GetClassrooms", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teachingServiceClient) GetClassroomUsages(ctx context.Context, in *ClassroomRequest, opts ...grpc.CallOption) (*ClassroomUsagesResponse, error) {
	out := new(ClassroomUsagesResponse)
	err := c.cc.Invoke(ctx, "/campusapis.teaching.v1.TeachingService/GetClassroomUsages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teachingServiceClient) GetUnusedClassrooms(ctx context.Context, in *ClassroomRequest, opts ...grpc.CallOption) (*ClassroomsResponse, error) {
	out := new(ClassroomsResponse)
	err := c.cc.Invoke(ctx, "/campusapis.teaching.v1.TeachingService/GetUnusedClassrooms", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TeachingServiceServer is the server API for TeachingService service.
// All implementations should embed UnimplementedTeachingServiceServer
// for forward compatibility
type TeachingServiceServer interface {
	GetScheduleRequest(context.Context, *GetScheduleRequestRequest) (*Courses, error)
	GetClassrooms(context.Context, *ClassroomRequest) (*ClassroomsResponse, error)
	GetClassroomUsages(context.Context, *ClassroomRequest) (*ClassroomUsagesResponse, error)
	GetUnusedClassrooms(context.Context, *ClassroomRequest) (*ClassroomsResponse, error)
}

// UnimplementedTeachingServiceServer should be embedded to have forward compatible implementations.
type UnimplementedTeachingServiceServer struct {
}

func (UnimplementedTeachingServiceServer) GetScheduleRequest(context.Context, *GetScheduleRequestRequest) (*Courses, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScheduleRequest not implemented")
}
func (UnimplementedTeachingServiceServer) GetClassrooms(context.Context, *ClassroomRequest) (*ClassroomsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClassrooms not implemented")
}
func (UnimplementedTeachingServiceServer) GetClassroomUsages(context.Context, *ClassroomRequest) (*ClassroomUsagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClassroomUsages not implemented")
}
func (UnimplementedTeachingServiceServer) GetUnusedClassrooms(context.Context, *ClassroomRequest) (*ClassroomsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUnusedClassrooms not implemented")
}

// UnsafeTeachingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TeachingServiceServer will
// result in compilation errors.
type UnsafeTeachingServiceServer interface {
	mustEmbedUnimplementedTeachingServiceServer()
}

func RegisterTeachingServiceServer(s grpc.ServiceRegistrar, srv TeachingServiceServer) {
	s.RegisterService(&TeachingService_ServiceDesc, srv)
}

func _TeachingService_GetScheduleRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetScheduleRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeachingServiceServer).GetScheduleRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/campusapis.teaching.v1.TeachingService/GetScheduleRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeachingServiceServer).GetScheduleRequest(ctx, req.(*GetScheduleRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeachingService_GetClassrooms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClassroomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeachingServiceServer).GetClassrooms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/campusapis.teaching.v1.TeachingService/GetClassrooms",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeachingServiceServer).GetClassrooms(ctx, req.(*ClassroomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeachingService_GetClassroomUsages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClassroomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeachingServiceServer).GetClassroomUsages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/campusapis.teaching.v1.TeachingService/GetClassroomUsages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeachingServiceServer).GetClassroomUsages(ctx, req.(*ClassroomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeachingService_GetUnusedClassrooms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClassroomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeachingServiceServer).GetUnusedClassrooms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/campusapis.teaching.v1.TeachingService/GetUnusedClassrooms",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeachingServiceServer).GetUnusedClassrooms(ctx, req.(*ClassroomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TeachingService_ServiceDesc is the grpc.ServiceDesc for TeachingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TeachingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "campusapis.teaching.v1.TeachingService",
	HandlerType: (*TeachingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetScheduleRequest",
			Handler:    _TeachingService_GetScheduleRequest_Handler,
		},
		{
			MethodName: "GetClassrooms",
			Handler:    _TeachingService_GetClassrooms_Handler,
		},
		{
			MethodName: "GetClassroomUsages",
			Handler:    _TeachingService_GetClassroomUsages_Handler,
		},
		{
			MethodName: "GetUnusedClassrooms",
			Handler:    _TeachingService_GetUnusedClassrooms_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "campusapis/teaching/v1/teaching.proto",
}
