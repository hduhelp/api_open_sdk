// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: campusapis/teaching/v1/teaching.proto

package teachingv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TeachingServiceClient is the client API for TeachingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TeachingServiceClient interface {
	// 获取学生/教师课程表
	GetSchedule(ctx context.Context, in *GetScheduleRequest, opts ...grpc.CallOption) (*GetScheduleResponse, error)
	// 获取学生/教师当前课程表
	GetScheduleNow(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetScheduleNowResponse, error)
	// 获取学生/教师当前课程表V2 返回更详细的信息
	GetScheduleNowV2(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetScheduleNowV2Response, error)
	// 获取全局课表，用于推送课程信息，仅内部使用
	GetGlobalSchedule(ctx context.Context, in *GetGlobalScheduleRequest, opts ...grpc.CallOption) (*GetGlobalScheduleResponse, error)
	// 通过CLASS_ID获取学生老师列表
	GetClassDetail(ctx context.Context, in *GetClassDetailRequest, opts ...grpc.CallOption) (*GetClassDetailResponse, error)
	// 获取所有教室列表
	GetClassrooms(ctx context.Context, in *GetClassroomsRequest, opts ...grpc.CallOption) (*GetClassroomsResponse, error)
	// 获取某一教室的使用情况
	GetClassroomUsages(ctx context.Context, in *GetClassroomUsagesRequest, opts ...grpc.CallOption) (*GetClassroomUsagesResponse, error)
	// 获取所有空教室列表
	GetUnusedClassrooms(ctx context.Context, in *GetUnusedClassroomsRequest, opts ...grpc.CallOption) (*GetUnusedClassroomsResponse, error)
	// 课程查询
	ClassQuerySearch(ctx context.Context, in *ClassQuerySearchRequest, opts ...grpc.CallOption) (*ClassQuerySearchResponse, error)
	// magic字段映射表
	ClassQueryMap(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ClassQueryMapResponse, error)
	// 设置课程收藏
	ClassQueryFavSet(ctx context.Context, in *ClassQueryFavSetRequest, opts ...grpc.CallOption) (*ClassQueryFavSetResponse, error)
	// 获取课程收藏
	ClassQueryFavGet(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ClassQueryFavGetResponse, error)
	// 按classIDs获取课程信息
	ClassQueryGet(ctx context.Context, in *ClassQueryGetRequest, opts ...grpc.CallOption) (*ClassQueryGetResponse, error)
}

type teachingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTeachingServiceClient(cc grpc.ClientConnInterface) TeachingServiceClient {
	return &teachingServiceClient{cc}
}

func (c *teachingServiceClient) GetSchedule(ctx context.Context, in *GetScheduleRequest, opts ...grpc.CallOption) (*GetScheduleResponse, error) {
	out := new(GetScheduleResponse)
	err := c.cc.Invoke(ctx, "/campusapis.teaching.v1.TeachingService/GetSchedule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teachingServiceClient) GetScheduleNow(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetScheduleNowResponse, error) {
	out := new(GetScheduleNowResponse)
	err := c.cc.Invoke(ctx, "/campusapis.teaching.v1.TeachingService/GetScheduleNow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teachingServiceClient) GetScheduleNowV2(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetScheduleNowV2Response, error) {
	out := new(GetScheduleNowV2Response)
	err := c.cc.Invoke(ctx, "/campusapis.teaching.v1.TeachingService/GetScheduleNowV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teachingServiceClient) GetGlobalSchedule(ctx context.Context, in *GetGlobalScheduleRequest, opts ...grpc.CallOption) (*GetGlobalScheduleResponse, error) {
	out := new(GetGlobalScheduleResponse)
	err := c.cc.Invoke(ctx, "/campusapis.teaching.v1.TeachingService/GetGlobalSchedule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teachingServiceClient) GetClassDetail(ctx context.Context, in *GetClassDetailRequest, opts ...grpc.CallOption) (*GetClassDetailResponse, error) {
	out := new(GetClassDetailResponse)
	err := c.cc.Invoke(ctx, "/campusapis.teaching.v1.TeachingService/GetClassDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teachingServiceClient) GetClassrooms(ctx context.Context, in *GetClassroomsRequest, opts ...grpc.CallOption) (*GetClassroomsResponse, error) {
	out := new(GetClassroomsResponse)
	err := c.cc.Invoke(ctx, "/campusapis.teaching.v1.TeachingService/GetClassrooms", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teachingServiceClient) GetClassroomUsages(ctx context.Context, in *GetClassroomUsagesRequest, opts ...grpc.CallOption) (*GetClassroomUsagesResponse, error) {
	out := new(GetClassroomUsagesResponse)
	err := c.cc.Invoke(ctx, "/campusapis.teaching.v1.TeachingService/GetClassroomUsages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teachingServiceClient) GetUnusedClassrooms(ctx context.Context, in *GetUnusedClassroomsRequest, opts ...grpc.CallOption) (*GetUnusedClassroomsResponse, error) {
	out := new(GetUnusedClassroomsResponse)
	err := c.cc.Invoke(ctx, "/campusapis.teaching.v1.TeachingService/GetUnusedClassrooms", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teachingServiceClient) ClassQuerySearch(ctx context.Context, in *ClassQuerySearchRequest, opts ...grpc.CallOption) (*ClassQuerySearchResponse, error) {
	out := new(ClassQuerySearchResponse)
	err := c.cc.Invoke(ctx, "/campusapis.teaching.v1.TeachingService/ClassQuerySearch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teachingServiceClient) ClassQueryMap(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ClassQueryMapResponse, error) {
	out := new(ClassQueryMapResponse)
	err := c.cc.Invoke(ctx, "/campusapis.teaching.v1.TeachingService/ClassQueryMap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teachingServiceClient) ClassQueryFavSet(ctx context.Context, in *ClassQueryFavSetRequest, opts ...grpc.CallOption) (*ClassQueryFavSetResponse, error) {
	out := new(ClassQueryFavSetResponse)
	err := c.cc.Invoke(ctx, "/campusapis.teaching.v1.TeachingService/ClassQueryFavSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teachingServiceClient) ClassQueryFavGet(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ClassQueryFavGetResponse, error) {
	out := new(ClassQueryFavGetResponse)
	err := c.cc.Invoke(ctx, "/campusapis.teaching.v1.TeachingService/ClassQueryFavGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teachingServiceClient) ClassQueryGet(ctx context.Context, in *ClassQueryGetRequest, opts ...grpc.CallOption) (*ClassQueryGetResponse, error) {
	out := new(ClassQueryGetResponse)
	err := c.cc.Invoke(ctx, "/campusapis.teaching.v1.TeachingService/ClassQueryGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TeachingServiceServer is the server API for TeachingService service.
// All implementations must embed UnimplementedTeachingServiceServer
// for forward compatibility
type TeachingServiceServer interface {
	// 获取学生/教师课程表
	GetSchedule(context.Context, *GetScheduleRequest) (*GetScheduleResponse, error)
	// 获取学生/教师当前课程表
	GetScheduleNow(context.Context, *emptypb.Empty) (*GetScheduleNowResponse, error)
	// 获取学生/教师当前课程表V2 返回更详细的信息
	GetScheduleNowV2(context.Context, *emptypb.Empty) (*GetScheduleNowV2Response, error)
	// 获取全局课表，用于推送课程信息，仅内部使用
	GetGlobalSchedule(context.Context, *GetGlobalScheduleRequest) (*GetGlobalScheduleResponse, error)
	// 通过CLASS_ID获取学生老师列表
	GetClassDetail(context.Context, *GetClassDetailRequest) (*GetClassDetailResponse, error)
	// 获取所有教室列表
	GetClassrooms(context.Context, *GetClassroomsRequest) (*GetClassroomsResponse, error)
	// 获取某一教室的使用情况
	GetClassroomUsages(context.Context, *GetClassroomUsagesRequest) (*GetClassroomUsagesResponse, error)
	// 获取所有空教室列表
	GetUnusedClassrooms(context.Context, *GetUnusedClassroomsRequest) (*GetUnusedClassroomsResponse, error)
	// 课程查询
	ClassQuerySearch(context.Context, *ClassQuerySearchRequest) (*ClassQuerySearchResponse, error)
	// magic字段映射表
	ClassQueryMap(context.Context, *emptypb.Empty) (*ClassQueryMapResponse, error)
	// 设置课程收藏
	ClassQueryFavSet(context.Context, *ClassQueryFavSetRequest) (*ClassQueryFavSetResponse, error)
	// 获取课程收藏
	ClassQueryFavGet(context.Context, *emptypb.Empty) (*ClassQueryFavGetResponse, error)
	// 按classIDs获取课程信息
	ClassQueryGet(context.Context, *ClassQueryGetRequest) (*ClassQueryGetResponse, error)
	mustEmbedUnimplementedTeachingServiceServer()
}

// UnimplementedTeachingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTeachingServiceServer struct {
}

func (UnimplementedTeachingServiceServer) GetSchedule(context.Context, *GetScheduleRequest) (*GetScheduleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSchedule not implemented")
}
func (UnimplementedTeachingServiceServer) GetScheduleNow(context.Context, *emptypb.Empty) (*GetScheduleNowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScheduleNow not implemented")
}
func (UnimplementedTeachingServiceServer) GetScheduleNowV2(context.Context, *emptypb.Empty) (*GetScheduleNowV2Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScheduleNowV2 not implemented")
}
func (UnimplementedTeachingServiceServer) GetGlobalSchedule(context.Context, *GetGlobalScheduleRequest) (*GetGlobalScheduleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGlobalSchedule not implemented")
}
func (UnimplementedTeachingServiceServer) GetClassDetail(context.Context, *GetClassDetailRequest) (*GetClassDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClassDetail not implemented")
}
func (UnimplementedTeachingServiceServer) GetClassrooms(context.Context, *GetClassroomsRequest) (*GetClassroomsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClassrooms not implemented")
}
func (UnimplementedTeachingServiceServer) GetClassroomUsages(context.Context, *GetClassroomUsagesRequest) (*GetClassroomUsagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClassroomUsages not implemented")
}
func (UnimplementedTeachingServiceServer) GetUnusedClassrooms(context.Context, *GetUnusedClassroomsRequest) (*GetUnusedClassroomsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUnusedClassrooms not implemented")
}
func (UnimplementedTeachingServiceServer) ClassQuerySearch(context.Context, *ClassQuerySearchRequest) (*ClassQuerySearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClassQuerySearch not implemented")
}
func (UnimplementedTeachingServiceServer) ClassQueryMap(context.Context, *emptypb.Empty) (*ClassQueryMapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClassQueryMap not implemented")
}
func (UnimplementedTeachingServiceServer) ClassQueryFavSet(context.Context, *ClassQueryFavSetRequest) (*ClassQueryFavSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClassQueryFavSet not implemented")
}
func (UnimplementedTeachingServiceServer) ClassQueryFavGet(context.Context, *emptypb.Empty) (*ClassQueryFavGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClassQueryFavGet not implemented")
}
func (UnimplementedTeachingServiceServer) ClassQueryGet(context.Context, *ClassQueryGetRequest) (*ClassQueryGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClassQueryGet not implemented")
}
func (UnimplementedTeachingServiceServer) mustEmbedUnimplementedTeachingServiceServer() {}

// UnsafeTeachingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TeachingServiceServer will
// result in compilation errors.
type UnsafeTeachingServiceServer interface {
	mustEmbedUnimplementedTeachingServiceServer()
}

func RegisterTeachingServiceServer(s grpc.ServiceRegistrar, srv TeachingServiceServer) {
	s.RegisterService(&TeachingService_ServiceDesc, srv)
}

func _TeachingService_GetSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeachingServiceServer).GetSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/campusapis.teaching.v1.TeachingService/GetSchedule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeachingServiceServer).GetSchedule(ctx, req.(*GetScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeachingService_GetScheduleNow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeachingServiceServer).GetScheduleNow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/campusapis.teaching.v1.TeachingService/GetScheduleNow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeachingServiceServer).GetScheduleNow(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeachingService_GetScheduleNowV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeachingServiceServer).GetScheduleNowV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/campusapis.teaching.v1.TeachingService/GetScheduleNowV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeachingServiceServer).GetScheduleNowV2(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeachingService_GetGlobalSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGlobalScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeachingServiceServer).GetGlobalSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/campusapis.teaching.v1.TeachingService/GetGlobalSchedule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeachingServiceServer).GetGlobalSchedule(ctx, req.(*GetGlobalScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeachingService_GetClassDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClassDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeachingServiceServer).GetClassDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/campusapis.teaching.v1.TeachingService/GetClassDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeachingServiceServer).GetClassDetail(ctx, req.(*GetClassDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeachingService_GetClassrooms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClassroomsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeachingServiceServer).GetClassrooms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/campusapis.teaching.v1.TeachingService/GetClassrooms",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeachingServiceServer).GetClassrooms(ctx, req.(*GetClassroomsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeachingService_GetClassroomUsages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClassroomUsagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeachingServiceServer).GetClassroomUsages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/campusapis.teaching.v1.TeachingService/GetClassroomUsages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeachingServiceServer).GetClassroomUsages(ctx, req.(*GetClassroomUsagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeachingService_GetUnusedClassrooms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUnusedClassroomsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeachingServiceServer).GetUnusedClassrooms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/campusapis.teaching.v1.TeachingService/GetUnusedClassrooms",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeachingServiceServer).GetUnusedClassrooms(ctx, req.(*GetUnusedClassroomsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeachingService_ClassQuerySearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClassQuerySearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeachingServiceServer).ClassQuerySearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/campusapis.teaching.v1.TeachingService/ClassQuerySearch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeachingServiceServer).ClassQuerySearch(ctx, req.(*ClassQuerySearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeachingService_ClassQueryMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeachingServiceServer).ClassQueryMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/campusapis.teaching.v1.TeachingService/ClassQueryMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeachingServiceServer).ClassQueryMap(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeachingService_ClassQueryFavSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClassQueryFavSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeachingServiceServer).ClassQueryFavSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/campusapis.teaching.v1.TeachingService/ClassQueryFavSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeachingServiceServer).ClassQueryFavSet(ctx, req.(*ClassQueryFavSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeachingService_ClassQueryFavGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeachingServiceServer).ClassQueryFavGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/campusapis.teaching.v1.TeachingService/ClassQueryFavGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeachingServiceServer).ClassQueryFavGet(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeachingService_ClassQueryGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClassQueryGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeachingServiceServer).ClassQueryGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/campusapis.teaching.v1.TeachingService/ClassQueryGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeachingServiceServer).ClassQueryGet(ctx, req.(*ClassQueryGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TeachingService_ServiceDesc is the grpc.ServiceDesc for TeachingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TeachingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "campusapis.teaching.v1.TeachingService",
	HandlerType: (*TeachingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSchedule",
			Handler:    _TeachingService_GetSchedule_Handler,
		},
		{
			MethodName: "GetScheduleNow",
			Handler:    _TeachingService_GetScheduleNow_Handler,
		},
		{
			MethodName: "GetScheduleNowV2",
			Handler:    _TeachingService_GetScheduleNowV2_Handler,
		},
		{
			MethodName: "GetGlobalSchedule",
			Handler:    _TeachingService_GetGlobalSchedule_Handler,
		},
		{
			MethodName: "GetClassDetail",
			Handler:    _TeachingService_GetClassDetail_Handler,
		},
		{
			MethodName: "GetClassrooms",
			Handler:    _TeachingService_GetClassrooms_Handler,
		},
		{
			MethodName: "GetClassroomUsages",
			Handler:    _TeachingService_GetClassroomUsages_Handler,
		},
		{
			MethodName: "GetUnusedClassrooms",
			Handler:    _TeachingService_GetUnusedClassrooms_Handler,
		},
		{
			MethodName: "ClassQuerySearch",
			Handler:    _TeachingService_ClassQuerySearch_Handler,
		},
		{
			MethodName: "ClassQueryMap",
			Handler:    _TeachingService_ClassQueryMap_Handler,
		},
		{
			MethodName: "ClassQueryFavSet",
			Handler:    _TeachingService_ClassQueryFavSet_Handler,
		},
		{
			MethodName: "ClassQueryFavGet",
			Handler:    _TeachingService_ClassQueryFavGet_Handler,
		},
		{
			MethodName: "ClassQueryGet",
			Handler:    _TeachingService_ClassQueryGet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "campusapis/teaching/v1/teaching.proto",
}
