// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        (unknown)
// source: campusapis/teaching/v1/teaching.proto

package teachingv1

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	schoolTime "github.com/hduhelp/api_open_sdk/campusapis/schoolTime"
	staff "github.com/hduhelp/api_open_sdk/campusapis/staff"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// GetScheduleRequest 根据参数和预设优先级拼装查询日期
// 优先级：
// 1. 若含 时间戳：		 根据时间戳查询，并标记时间戳所在周（研究生暂未支持）
// 2. 若含 学年、学期、周次：返回整个学期课表，并标记指定周（研究生暂未支持）
// 3. 若含 学年、学期：	 返回整个学期课表
// 都不命中：返回当前时间所在周的课表，并标记当前周（研究生暂未支持）
type GetScheduleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//学期
	Semester string `protobuf:"bytes,1,opt,name=semester,proto3" json:"semester,omitempty"`
	//学年 支持多种格式 如：2019-2020 2019
	SchoolYear string `protobuf:"bytes,2,opt,name=schoolYear,proto3" json:"schoolYear,omitempty"`
	//时间戳
	Timestamp uint32 `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	//周次
	Week int32 `protobuf:"varint,4,opt,name=week,proto3" json:"week,omitempty"`
	//星期几
	Weekday int32 `protobuf:"varint,5,opt,name=weekday,proto3" json:"weekday,omitempty"`
}

func (x *GetScheduleRequest) Reset() {
	*x = GetScheduleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_campusapis_teaching_v1_teaching_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetScheduleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetScheduleRequest) ProtoMessage() {}

func (x *GetScheduleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_campusapis_teaching_v1_teaching_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetScheduleRequest.ProtoReflect.Descriptor instead.
func (*GetScheduleRequest) Descriptor() ([]byte, []int) {
	return file_campusapis_teaching_v1_teaching_proto_rawDescGZIP(), []int{0}
}

func (x *GetScheduleRequest) GetSemester() string {
	if x != nil {
		return x.Semester
	}
	return ""
}

func (x *GetScheduleRequest) GetSchoolYear() string {
	if x != nil {
		return x.SchoolYear
	}
	return ""
}

func (x *GetScheduleRequest) GetTimestamp() uint32 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *GetScheduleRequest) GetWeek() int32 {
	if x != nil {
		return x.Week
	}
	return 0
}

func (x *GetScheduleRequest) GetWeekday() int32 {
	if x != nil {
		return x.Weekday
	}
	return 0
}

// GetScheduleResponse 课表列表返回体
type GetScheduleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*ScheduleResponseCourse `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *GetScheduleResponse) Reset() {
	*x = GetScheduleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_campusapis_teaching_v1_teaching_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetScheduleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetScheduleResponse) ProtoMessage() {}

func (x *GetScheduleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_campusapis_teaching_v1_teaching_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetScheduleResponse.ProtoReflect.Descriptor instead.
func (*GetScheduleResponse) Descriptor() ([]byte, []int) {
	return file_campusapis_teaching_v1_teaching_proto_rawDescGZIP(), []int{1}
}

func (x *GetScheduleResponse) GetItems() []*ScheduleResponseCourse {
	if x != nil {
		return x.Items
	}
	return nil
}

// ScheduleResponseCourse 单课程返回体（如高等数学课）
type ScheduleResponseCourse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 课程内部ID
	ClassID string `protobuf:"bytes,1,opt,name=ClassID,proto3" json:"ClassID,omitempty"`
	// 选课号
	ClassName string `protobuf:"bytes,2,opt,name=ClassName,proto3" json:"ClassName,omitempty"`
	// 上课时间中文，如: 星期一第6-7节{1-2周};星期一第6-7节{3-17周}
	ClassTime string `protobuf:"bytes,3,opt,name=ClassTime,proto3" json:"ClassTime,omitempty"`
	// 课程代码
	CourseID string `protobuf:"bytes,4,opt,name=CourseID,proto3" json:"CourseID,omitempty"`
	// 课程中文名
	CourseName string `protobuf:"bytes,5,opt,name=CourseName,proto3" json:"CourseName,omitempty"`
	// 学分
	Credit string `protobuf:"bytes,6,opt,name=Credit,proto3" json:"Credit,omitempty"`
	// 此课程排课列表
	Schedule []*ScheduleResponseCourse_ScheduleInfo `protobuf:"bytes,7,rep,name=Schedule,proto3" json:"Schedule,omitempty"`
	// 学年
	SchoolYear string `protobuf:"bytes,8,opt,name=SchoolYear,proto3" json:"SchoolYear,omitempty"`
	// 学期
	Semester int32 `protobuf:"varint,9,opt,name=Semester,proto3" json:"Semester,omitempty"`
}

func (x *ScheduleResponseCourse) Reset() {
	*x = ScheduleResponseCourse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_campusapis_teaching_v1_teaching_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScheduleResponseCourse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduleResponseCourse) ProtoMessage() {}

func (x *ScheduleResponseCourse) ProtoReflect() protoreflect.Message {
	mi := &file_campusapis_teaching_v1_teaching_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduleResponseCourse.ProtoReflect.Descriptor instead.
func (*ScheduleResponseCourse) Descriptor() ([]byte, []int) {
	return file_campusapis_teaching_v1_teaching_proto_rawDescGZIP(), []int{2}
}

func (x *ScheduleResponseCourse) GetClassID() string {
	if x != nil {
		return x.ClassID
	}
	return ""
}

func (x *ScheduleResponseCourse) GetClassName() string {
	if x != nil {
		return x.ClassName
	}
	return ""
}

func (x *ScheduleResponseCourse) GetClassTime() string {
	if x != nil {
		return x.ClassTime
	}
	return ""
}

func (x *ScheduleResponseCourse) GetCourseID() string {
	if x != nil {
		return x.CourseID
	}
	return ""
}

func (x *ScheduleResponseCourse) GetCourseName() string {
	if x != nil {
		return x.CourseName
	}
	return ""
}

func (x *ScheduleResponseCourse) GetCredit() string {
	if x != nil {
		return x.Credit
	}
	return ""
}

func (x *ScheduleResponseCourse) GetSchedule() []*ScheduleResponseCourse_ScheduleInfo {
	if x != nil {
		return x.Schedule
	}
	return nil
}

func (x *ScheduleResponseCourse) GetSchoolYear() string {
	if x != nil {
		return x.SchoolYear
	}
	return ""
}

func (x *ScheduleResponseCourse) GetSemester() int32 {
	if x != nil {
		return x.Semester
	}
	return 0
}

// 课程列表
type Courses struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 课程 map, ClassID -> 课程信息
	Items map[string]*CourseItem `protobuf:"bytes,1,rep,name=Items,proto3" json:"Items,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Courses) Reset() {
	*x = Courses{}
	if protoimpl.UnsafeEnabled {
		mi := &file_campusapis_teaching_v1_teaching_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Courses) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Courses) ProtoMessage() {}

func (x *Courses) ProtoReflect() protoreflect.Message {
	mi := &file_campusapis_teaching_v1_teaching_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Courses.ProtoReflect.Descriptor instead.
func (*Courses) Descriptor() ([]byte, []int) {
	return file_campusapis_teaching_v1_teaching_proto_rawDescGZIP(), []int{3}
}

func (x *Courses) GetItems() map[string]*CourseItem {
	if x != nil {
		return x.Items
	}
	return nil
}

// 课程信息
type CourseItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 课程内部ID
	ClassID string `protobuf:"bytes,1,opt,name=ClassID,proto3" json:"ClassID,omitempty"`
	// 选课号
	ClassName string `protobuf:"bytes,2,opt,name=ClassName,proto3" json:"ClassName,omitempty"`
	// 课程代码
	CourseID string `protobuf:"bytes,3,opt,name=CourseID,proto3" json:"CourseID,omitempty"`
	// 课程中文名
	CourseName string `protobuf:"bytes,4,opt,name=CourseName,proto3" json:"CourseName,omitempty"`
	// 上课时间中文，如: 星期一第6-7节{1-2周};星期一第6-7节{3-17周}
	ClassTime string `protobuf:"bytes,5,opt,name=ClassTime,proto3" json:"ClassTime,omitempty"`
	// 学分
	Credit string `protobuf:"bytes,6,opt,name=Credit,proto3" json:"Credit,omitempty"`
	// 学年
	SchoolYear *schoolTime.SchoolYear `protobuf:"bytes,7,opt,name=SchoolYear,proto3" json:"SchoolYear,omitempty"`
	// 学期
	Semester *schoolTime.Semester `protobuf:"bytes,8,opt,name=Semester,proto3" json:"Semester,omitempty"`
	// 排课详情
	Schedule *Schedule `protobuf:"bytes,9,opt,name=Schedule,proto3" json:"Schedule,omitempty"`
}

func (x *CourseItem) Reset() {
	*x = CourseItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_campusapis_teaching_v1_teaching_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CourseItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CourseItem) ProtoMessage() {}

func (x *CourseItem) ProtoReflect() protoreflect.Message {
	mi := &file_campusapis_teaching_v1_teaching_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CourseItem.ProtoReflect.Descriptor instead.
func (*CourseItem) Descriptor() ([]byte, []int) {
	return file_campusapis_teaching_v1_teaching_proto_rawDescGZIP(), []int{4}
}

func (x *CourseItem) GetClassID() string {
	if x != nil {
		return x.ClassID
	}
	return ""
}

func (x *CourseItem) GetClassName() string {
	if x != nil {
		return x.ClassName
	}
	return ""
}

func (x *CourseItem) GetCourseID() string {
	if x != nil {
		return x.CourseID
	}
	return ""
}

func (x *CourseItem) GetCourseName() string {
	if x != nil {
		return x.CourseName
	}
	return ""
}

func (x *CourseItem) GetClassTime() string {
	if x != nil {
		return x.ClassTime
	}
	return ""
}

func (x *CourseItem) GetCredit() string {
	if x != nil {
		return x.Credit
	}
	return ""
}

func (x *CourseItem) GetSchoolYear() *schoolTime.SchoolYear {
	if x != nil {
		return x.SchoolYear
	}
	return nil
}

func (x *CourseItem) GetSemester() *schoolTime.Semester {
	if x != nil {
		return x.Semester
	}
	return nil
}

func (x *CourseItem) GetSchedule() *Schedule {
	if x != nil {
		return x.Schedule
	}
	return nil
}

// 排课列表详情
type Schedule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 排课 map, 排课ID -> 排课信息
	Items map[string]*ScheduleItem `protobuf:"bytes,1,rep,name=Items,proto3" json:"Items,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Schedule) Reset() {
	*x = Schedule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_campusapis_teaching_v1_teaching_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Schedule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Schedule) ProtoMessage() {}

func (x *Schedule) ProtoReflect() protoreflect.Message {
	mi := &file_campusapis_teaching_v1_teaching_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Schedule.ProtoReflect.Descriptor instead.
func (*Schedule) Descriptor() ([]byte, []int) {
	return file_campusapis_teaching_v1_teaching_proto_rawDescGZIP(), []int{5}
}

func (x *Schedule) GetItems() map[string]*ScheduleItem {
	if x != nil {
		return x.Items
	}
	return nil
}

// 排课信息
type ScheduleItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 周次列表
	Week []int32 `protobuf:"varint,1,rep,packed,name=Week,proto3" json:"Week,omitempty"`
	// 星期
	WeekDay int32 `protobuf:"varint,2,opt,name=WeekDay,proto3" json:"WeekDay,omitempty"`
	// 节次列表，升序
	Section []int32 `protobuf:"varint,3,rep,packed,name=Section,proto3" json:"Section,omitempty"`
	// 是否本周
	IsThisWeek bool `protobuf:"varint,4,opt,name=IsThisWeek,proto3" json:"IsThisWeek,omitempty"`
	// 上课时间
	StartTime uint32 `protobuf:"varint,5,opt,name=StartTime,proto3" json:"StartTime,omitempty"`
	// 下课时间
	EndTime uint32 `protobuf:"varint,6,opt,name=EndTime,proto3" json:"EndTime,omitempty"`
	// 老师列表
	Teachers *staff.InfoMapList `protobuf:"bytes,7,opt,name=Teachers,proto3" json:"Teachers,omitempty"`
	// 学生列表
	Students *staff.InfoMapList `protobuf:"bytes,8,opt,name=Students,proto3" json:"Students,omitempty"`
	// 上课地点
	Location string `protobuf:"bytes,9,opt,name=Location,proto3" json:"Location,omitempty"`
	// 教室座位数
	SeatsNum int32 `protobuf:"varint,10,opt,name=SeatsNum,proto3" json:"SeatsNum,omitempty"`
	// 备注
	Commit string `protobuf:"bytes,11,opt,name=Commit,proto3" json:"Commit,omitempty"`
}

func (x *ScheduleItem) Reset() {
	*x = ScheduleItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_campusapis_teaching_v1_teaching_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScheduleItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduleItem) ProtoMessage() {}

func (x *ScheduleItem) ProtoReflect() protoreflect.Message {
	mi := &file_campusapis_teaching_v1_teaching_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduleItem.ProtoReflect.Descriptor instead.
func (*ScheduleItem) Descriptor() ([]byte, []int) {
	return file_campusapis_teaching_v1_teaching_proto_rawDescGZIP(), []int{6}
}

func (x *ScheduleItem) GetWeek() []int32 {
	if x != nil {
		return x.Week
	}
	return nil
}

func (x *ScheduleItem) GetWeekDay() int32 {
	if x != nil {
		return x.WeekDay
	}
	return 0
}

func (x *ScheduleItem) GetSection() []int32 {
	if x != nil {
		return x.Section
	}
	return nil
}

func (x *ScheduleItem) GetIsThisWeek() bool {
	if x != nil {
		return x.IsThisWeek
	}
	return false
}

func (x *ScheduleItem) GetStartTime() uint32 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *ScheduleItem) GetEndTime() uint32 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *ScheduleItem) GetTeachers() *staff.InfoMapList {
	if x != nil {
		return x.Teachers
	}
	return nil
}

func (x *ScheduleItem) GetStudents() *staff.InfoMapList {
	if x != nil {
		return x.Students
	}
	return nil
}

func (x *ScheduleItem) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *ScheduleItem) GetSeatsNum() int32 {
	if x != nil {
		return x.SeatsNum
	}
	return 0
}

func (x *ScheduleItem) GetCommit() string {
	if x != nil {
		return x.Commit
	}
	return ""
}

// 人员信息
type StaffInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 学工号
	StaffID string `protobuf:"bytes,1,opt,name=StaffID,proto3" json:"StaffID,omitempty"`
	// 姓名
	StaffName string `protobuf:"bytes,2,opt,name=StaffName,proto3" json:"StaffName,omitempty"`
	// 备注
	// todo 有空改成 Comment?
	Commit string `protobuf:"bytes,3,opt,name=Commit,proto3" json:"Commit,omitempty"`
}

func (x *StaffInfo) Reset() {
	*x = StaffInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_campusapis_teaching_v1_teaching_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StaffInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StaffInfo) ProtoMessage() {}

func (x *StaffInfo) ProtoReflect() protoreflect.Message {
	mi := &file_campusapis_teaching_v1_teaching_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StaffInfo.ProtoReflect.Descriptor instead.
func (*StaffInfo) Descriptor() ([]byte, []int) {
	return file_campusapis_teaching_v1_teaching_proto_rawDescGZIP(), []int{7}
}

func (x *StaffInfo) GetStaffID() string {
	if x != nil {
		return x.StaffID
	}
	return ""
}

func (x *StaffInfo) GetStaffName() string {
	if x != nil {
		return x.StaffName
	}
	return ""
}

func (x *StaffInfo) GetCommit() string {
	if x != nil {
		return x.Commit
	}
	return ""
}

// GetScheduleNowResponse 今天，明天课表信息返回体
type GetScheduleNowResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 今天课表
	Today []*GetScheduleNowResponse_Course `protobuf:"bytes,1,rep,name=today,proto3" json:"today,omitempty"`
	// 明天课表
	Tomorrow []*GetScheduleNowResponse_Course `protobuf:"bytes,2,rep,name=tomorrow,proto3" json:"tomorrow,omitempty"`
}

func (x *GetScheduleNowResponse) Reset() {
	*x = GetScheduleNowResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_campusapis_teaching_v1_teaching_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetScheduleNowResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetScheduleNowResponse) ProtoMessage() {}

func (x *GetScheduleNowResponse) ProtoReflect() protoreflect.Message {
	mi := &file_campusapis_teaching_v1_teaching_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetScheduleNowResponse.ProtoReflect.Descriptor instead.
func (*GetScheduleNowResponse) Descriptor() ([]byte, []int) {
	return file_campusapis_teaching_v1_teaching_proto_rawDescGZIP(), []int{8}
}

func (x *GetScheduleNowResponse) GetToday() []*GetScheduleNowResponse_Course {
	if x != nil {
		return x.Today
	}
	return nil
}

func (x *GetScheduleNowResponse) GetTomorrow() []*GetScheduleNowResponse_Course {
	if x != nil {
		return x.Tomorrow
	}
	return nil
}

// GetScheduleNowV2Response 今天，明天课表信息返回体
type GetScheduleNowV2Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 今天的课表
	Today []*ScheduleResponseCourse `protobuf:"bytes,1,rep,name=Today,proto3" json:"Today,omitempty"`
	// 明天的课表
	Tomorrow []*ScheduleResponseCourse `protobuf:"bytes,2,rep,name=Tomorrow,proto3" json:"Tomorrow,omitempty"`
}

func (x *GetScheduleNowV2Response) Reset() {
	*x = GetScheduleNowV2Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_campusapis_teaching_v1_teaching_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetScheduleNowV2Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetScheduleNowV2Response) ProtoMessage() {}

func (x *GetScheduleNowV2Response) ProtoReflect() protoreflect.Message {
	mi := &file_campusapis_teaching_v1_teaching_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetScheduleNowV2Response.ProtoReflect.Descriptor instead.
func (*GetScheduleNowV2Response) Descriptor() ([]byte, []int) {
	return file_campusapis_teaching_v1_teaching_proto_rawDescGZIP(), []int{9}
}

func (x *GetScheduleNowV2Response) GetToday() []*ScheduleResponseCourse {
	if x != nil {
		return x.Today
	}
	return nil
}

func (x *GetScheduleNowV2Response) GetTomorrow() []*ScheduleResponseCourse {
	if x != nil {
		return x.Tomorrow
	}
	return nil
}

// GetGlobalScheduleRequest 全局课表请求体
type GetGlobalScheduleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 学年
	SchoolYear string `protobuf:"bytes,1,opt,name=schoolYear,proto3" json:"schoolYear,omitempty"`
	// 学期
	Semester string `protobuf:"bytes,2,opt,name=semester,proto3" json:"semester,omitempty"`
	// 星期
	Weekday int32 `protobuf:"varint,3,opt,name=weekday,proto3" json:"weekday,omitempty"`
	// 周次
	Week int32 `protobuf:"varint,4,opt,name=week,proto3" json:"week,omitempty"`
	// 节次
	Section int32 `protobuf:"varint,5,opt,name=section,proto3" json:"section,omitempty"`
}

func (x *GetGlobalScheduleRequest) Reset() {
	*x = GetGlobalScheduleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_campusapis_teaching_v1_teaching_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGlobalScheduleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGlobalScheduleRequest) ProtoMessage() {}

func (x *GetGlobalScheduleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_campusapis_teaching_v1_teaching_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGlobalScheduleRequest.ProtoReflect.Descriptor instead.
func (*GetGlobalScheduleRequest) Descriptor() ([]byte, []int) {
	return file_campusapis_teaching_v1_teaching_proto_rawDescGZIP(), []int{10}
}

func (x *GetGlobalScheduleRequest) GetSchoolYear() string {
	if x != nil {
		return x.SchoolYear
	}
	return ""
}

func (x *GetGlobalScheduleRequest) GetSemester() string {
	if x != nil {
		return x.Semester
	}
	return ""
}

func (x *GetGlobalScheduleRequest) GetWeekday() int32 {
	if x != nil {
		return x.Weekday
	}
	return 0
}

func (x *GetGlobalScheduleRequest) GetWeek() int32 {
	if x != nil {
		return x.Week
	}
	return 0
}

func (x *GetGlobalScheduleRequest) GetSection() int32 {
	if x != nil {
		return x.Section
	}
	return 0
}

// GetGlobalScheduleResponse 全局课表返回体
type GetGlobalScheduleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*ScheduleResponseCourse `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *GetGlobalScheduleResponse) Reset() {
	*x = GetGlobalScheduleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_campusapis_teaching_v1_teaching_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGlobalScheduleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGlobalScheduleResponse) ProtoMessage() {}

func (x *GetGlobalScheduleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_campusapis_teaching_v1_teaching_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGlobalScheduleResponse.ProtoReflect.Descriptor instead.
func (*GetGlobalScheduleResponse) Descriptor() ([]byte, []int) {
	return file_campusapis_teaching_v1_teaching_proto_rawDescGZIP(), []int{11}
}

func (x *GetGlobalScheduleResponse) GetItems() []*ScheduleResponseCourse {
	if x != nil {
		return x.Items
	}
	return nil
}

// GetClassroomsRequest 教室列表查询关键字
type GetClassroomsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 学年
	SchoolYear string `protobuf:"bytes,1,opt,name=schoolYear,proto3" json:"schoolYear,omitempty"`
	// 学期
	Semester string `protobuf:"bytes,2,opt,name=semester,proto3" json:"semester,omitempty"`
}

func (x *GetClassroomsRequest) Reset() {
	*x = GetClassroomsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_campusapis_teaching_v1_teaching_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetClassroomsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClassroomsRequest) ProtoMessage() {}

func (x *GetClassroomsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_campusapis_teaching_v1_teaching_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClassroomsRequest.ProtoReflect.Descriptor instead.
func (*GetClassroomsRequest) Descriptor() ([]byte, []int) {
	return file_campusapis_teaching_v1_teaching_proto_rawDescGZIP(), []int{12}
}

func (x *GetClassroomsRequest) GetSchoolYear() string {
	if x != nil {
		return x.SchoolYear
	}
	return ""
}

func (x *GetClassroomsRequest) GetSemester() string {
	if x != nil {
		return x.Semester
	}
	return ""
}

type GetClassroomUsageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//学期
	Semester string `protobuf:"bytes,1,opt,name=semester,proto3" json:"semester,omitempty"`
	//学年
	SchoolYear string `protobuf:"bytes,2,opt,name=schoolYear,proto3" json:"schoolYear,omitempty"`
	//教室ID
	LocationID string `protobuf:"bytes,3,opt,name=locationID,proto3" json:"locationID,omitempty"`
}

func (x *GetClassroomUsageRequest) Reset() {
	*x = GetClassroomUsageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_campusapis_teaching_v1_teaching_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetClassroomUsageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClassroomUsageRequest) ProtoMessage() {}

func (x *GetClassroomUsageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_campusapis_teaching_v1_teaching_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClassroomUsageRequest.ProtoReflect.Descriptor instead.
func (*GetClassroomUsageRequest) Descriptor() ([]byte, []int) {
	return file_campusapis_teaching_v1_teaching_proto_rawDescGZIP(), []int{13}
}

func (x *GetClassroomUsageRequest) GetSemester() string {
	if x != nil {
		return x.Semester
	}
	return ""
}

func (x *GetClassroomUsageRequest) GetSchoolYear() string {
	if x != nil {
		return x.SchoolYear
	}
	return ""
}

func (x *GetClassroomUsageRequest) GetLocationID() string {
	if x != nil {
		return x.LocationID
	}
	return ""
}

// 教室信息查询关键字
type GetUnusedClassroomsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//学期
	Semester string `protobuf:"bytes,1,opt,name=semester,proto3" json:"semester,omitempty"`
	//学年
	SchoolYear string `protobuf:"bytes,2,opt,name=schoolYear,proto3" json:"schoolYear,omitempty"`
	//星期
	Weekday int32 `protobuf:"varint,3,opt,name=weekday,proto3" json:"weekday,omitempty"`
	//周次
	Week int32 `protobuf:"varint,4,opt,name=week,proto3" json:"week,omitempty"`
	//节次
	Section int32 `protobuf:"varint,5,opt,name=section,proto3" json:"section,omitempty"`
}

func (x *GetUnusedClassroomsRequest) Reset() {
	*x = GetUnusedClassroomsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_campusapis_teaching_v1_teaching_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUnusedClassroomsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUnusedClassroomsRequest) ProtoMessage() {}

func (x *GetUnusedClassroomsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_campusapis_teaching_v1_teaching_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUnusedClassroomsRequest.ProtoReflect.Descriptor instead.
func (*GetUnusedClassroomsRequest) Descriptor() ([]byte, []int) {
	return file_campusapis_teaching_v1_teaching_proto_rawDescGZIP(), []int{14}
}

func (x *GetUnusedClassroomsRequest) GetSemester() string {
	if x != nil {
		return x.Semester
	}
	return ""
}

func (x *GetUnusedClassroomsRequest) GetSchoolYear() string {
	if x != nil {
		return x.SchoolYear
	}
	return ""
}

func (x *GetUnusedClassroomsRequest) GetWeekday() int32 {
	if x != nil {
		return x.Weekday
	}
	return 0
}

func (x *GetUnusedClassroomsRequest) GetWeek() int32 {
	if x != nil {
		return x.Week
	}
	return 0
}

func (x *GetUnusedClassroomsRequest) GetSection() int32 {
	if x != nil {
		return x.Section
	}
	return 0
}

// ClassroomsResponse 教室查询返回体
type ClassroomsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 教室列表
	Items []*Classroom `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *ClassroomsResponse) Reset() {
	*x = ClassroomsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_campusapis_teaching_v1_teaching_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClassroomsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClassroomsResponse) ProtoMessage() {}

func (x *ClassroomsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_campusapis_teaching_v1_teaching_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClassroomsResponse.ProtoReflect.Descriptor instead.
func (*ClassroomsResponse) Descriptor() ([]byte, []int) {
	return file_campusapis_teaching_v1_teaching_proto_rawDescGZIP(), []int{15}
}

func (x *ClassroomsResponse) GetItems() []*Classroom {
	if x != nil {
		return x.Items
	}
	return nil
}

// 教室信息
type Classroom struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 学期
	Semester int32 `protobuf:"varint,1,opt,name=semester,proto3" json:"semester,omitempty"`
	// 学年
	SchoolYear string `protobuf:"bytes,2,opt,name=schoolYear,proto3" json:"schoolYear,omitempty"`
	// 教室ID
	LocationID string `protobuf:"bytes,3,opt,name=locationID,proto3" json:"locationID,omitempty"`
	// 教室名字
	LocationName string `protobuf:"bytes,4,opt,name=locationName,proto3" json:"locationName,omitempty"`
	// 教学楼ID
	BuildingID string `protobuf:"bytes,5,opt,name=buildingID,proto3" json:"buildingID,omitempty"`
	// 教学楼名字
	BuildingName string `protobuf:"bytes,6,opt,name=buildingName,proto3" json:"buildingName,omitempty"`
}

func (x *Classroom) Reset() {
	*x = Classroom{}
	if protoimpl.UnsafeEnabled {
		mi := &file_campusapis_teaching_v1_teaching_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Classroom) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Classroom) ProtoMessage() {}

func (x *Classroom) ProtoReflect() protoreflect.Message {
	mi := &file_campusapis_teaching_v1_teaching_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Classroom.ProtoReflect.Descriptor instead.
func (*Classroom) Descriptor() ([]byte, []int) {
	return file_campusapis_teaching_v1_teaching_proto_rawDescGZIP(), []int{16}
}

func (x *Classroom) GetSemester() int32 {
	if x != nil {
		return x.Semester
	}
	return 0
}

func (x *Classroom) GetSchoolYear() string {
	if x != nil {
		return x.SchoolYear
	}
	return ""
}

func (x *Classroom) GetLocationID() string {
	if x != nil {
		return x.LocationID
	}
	return ""
}

func (x *Classroom) GetLocationName() string {
	if x != nil {
		return x.LocationName
	}
	return ""
}

func (x *Classroom) GetBuildingID() string {
	if x != nil {
		return x.BuildingID
	}
	return ""
}

func (x *Classroom) GetBuildingName() string {
	if x != nil {
		return x.BuildingName
	}
	return ""
}

// ClassroomUsagesResponse 教室使用情况返回体
type ClassroomUsagesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 教室使用情况列表
	Items []*ClassroomUsagesResponse_Nested `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *ClassroomUsagesResponse) Reset() {
	*x = ClassroomUsagesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_campusapis_teaching_v1_teaching_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClassroomUsagesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClassroomUsagesResponse) ProtoMessage() {}

func (x *ClassroomUsagesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_campusapis_teaching_v1_teaching_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClassroomUsagesResponse.ProtoReflect.Descriptor instead.
func (*ClassroomUsagesResponse) Descriptor() ([]byte, []int) {
	return file_campusapis_teaching_v1_teaching_proto_rawDescGZIP(), []int{17}
}

func (x *ClassroomUsagesResponse) GetItems() []*ClassroomUsagesResponse_Nested {
	if x != nil {
		return x.Items
	}
	return nil
}

//人员信息
type ScheduleResponseCourse_StaffInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//学工号
	StaffID string `protobuf:"bytes,1,opt,name=StaffID,proto3" json:"StaffID,omitempty"`
	//姓名
	StaffName string `protobuf:"bytes,2,opt,name=StaffName,proto3" json:"StaffName,omitempty"`
	//人员类型，枚举及其含义：0->未知 | 1->本科生 | 2->研究生 | 3->教职工
	StaffType int32 `protobuf:"varint,3,opt,name=StaffType,proto3" json:"StaffType,omitempty"`
}

func (x *ScheduleResponseCourse_StaffInfo) Reset() {
	*x = ScheduleResponseCourse_StaffInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_campusapis_teaching_v1_teaching_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScheduleResponseCourse_StaffInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduleResponseCourse_StaffInfo) ProtoMessage() {}

func (x *ScheduleResponseCourse_StaffInfo) ProtoReflect() protoreflect.Message {
	mi := &file_campusapis_teaching_v1_teaching_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduleResponseCourse_StaffInfo.ProtoReflect.Descriptor instead.
func (*ScheduleResponseCourse_StaffInfo) Descriptor() ([]byte, []int) {
	return file_campusapis_teaching_v1_teaching_proto_rawDescGZIP(), []int{2, 0}
}

func (x *ScheduleResponseCourse_StaffInfo) GetStaffID() string {
	if x != nil {
		return x.StaffID
	}
	return ""
}

func (x *ScheduleResponseCourse_StaffInfo) GetStaffName() string {
	if x != nil {
		return x.StaffName
	}
	return ""
}

func (x *ScheduleResponseCourse_StaffInfo) GetStaffType() int32 {
	if x != nil {
		return x.StaffType
	}
	return 0
}

// 单个排课信息（如高等数学的周一的3-5节）
type ScheduleResponseCourse_ScheduleInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 上课地点
	Location string `protobuf:"bytes,1,opt,name=Location,proto3" json:"Location,omitempty"`
	// 教室作为数量
	SeatsNum int32 `protobuf:"varint,2,opt,name=SeatsNum,proto3" json:"SeatsNum,omitempty"`
	// 节次数组, 升序
	Section []int32 `protobuf:"varint,3,rep,packed,name=Section,proto3" json:"Section,omitempty"`
	// 老师列表
	Teachers []*ScheduleResponseCourse_StaffInfo `protobuf:"bytes,4,rep,name=Teachers,proto3" json:"Teachers,omitempty"`
	// 学生列表
	Students []*ScheduleResponseCourse_StaffInfo `protobuf:"bytes,5,rep,name=Students,proto3" json:"Students,omitempty"`
	// 周次数组
	Week []int32 `protobuf:"varint,6,rep,packed,name=Week,proto3" json:"Week,omitempty"`
	// 星期
	WeekDay int32 `protobuf:"varint,7,opt,name=WeekDay,proto3" json:"WeekDay,omitempty"`
	// 是否本周课程
	IsThisWeek bool `protobuf:"varint,8,opt,name=IsThisWeek,proto3" json:"IsThisWeek,omitempty"`
	// 上课时间
	StartTime uint32 `protobuf:"varint,9,opt,name=StartTime,proto3" json:"StartTime,omitempty"`
	// 下课时间
	EndTime uint32 `protobuf:"varint,10,opt,name=EndTime,proto3" json:"EndTime,omitempty"`
}

func (x *ScheduleResponseCourse_ScheduleInfo) Reset() {
	*x = ScheduleResponseCourse_ScheduleInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_campusapis_teaching_v1_teaching_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScheduleResponseCourse_ScheduleInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduleResponseCourse_ScheduleInfo) ProtoMessage() {}

func (x *ScheduleResponseCourse_ScheduleInfo) ProtoReflect() protoreflect.Message {
	mi := &file_campusapis_teaching_v1_teaching_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduleResponseCourse_ScheduleInfo.ProtoReflect.Descriptor instead.
func (*ScheduleResponseCourse_ScheduleInfo) Descriptor() ([]byte, []int) {
	return file_campusapis_teaching_v1_teaching_proto_rawDescGZIP(), []int{2, 1}
}

func (x *ScheduleResponseCourse_ScheduleInfo) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *ScheduleResponseCourse_ScheduleInfo) GetSeatsNum() int32 {
	if x != nil {
		return x.SeatsNum
	}
	return 0
}

func (x *ScheduleResponseCourse_ScheduleInfo) GetSection() []int32 {
	if x != nil {
		return x.Section
	}
	return nil
}

func (x *ScheduleResponseCourse_ScheduleInfo) GetTeachers() []*ScheduleResponseCourse_StaffInfo {
	if x != nil {
		return x.Teachers
	}
	return nil
}

func (x *ScheduleResponseCourse_ScheduleInfo) GetStudents() []*ScheduleResponseCourse_StaffInfo {
	if x != nil {
		return x.Students
	}
	return nil
}

func (x *ScheduleResponseCourse_ScheduleInfo) GetWeek() []int32 {
	if x != nil {
		return x.Week
	}
	return nil
}

func (x *ScheduleResponseCourse_ScheduleInfo) GetWeekDay() int32 {
	if x != nil {
		return x.WeekDay
	}
	return 0
}

func (x *ScheduleResponseCourse_ScheduleInfo) GetIsThisWeek() bool {
	if x != nil {
		return x.IsThisWeek
	}
	return false
}

func (x *ScheduleResponseCourse_ScheduleInfo) GetStartTime() uint32 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *ScheduleResponseCourse_ScheduleInfo) GetEndTime() uint32 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

// 课表
type GetScheduleNowResponse_Course struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 开始节次
	StartSection uint32 `protobuf:"varint,1,opt,name=start_section,json=startSection,proto3" json:"start_section,omitempty"`
	// 结束节次
	EndSection uint32 `protobuf:"varint,2,opt,name=end_section,json=endSection,proto3" json:"end_section,omitempty"`
	// 上课时间
	StartTime string `protobuf:"bytes,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// 下课时间
	EndTime string `protobuf:"bytes,4,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	// 课程名
	CourseName string `protobuf:"bytes,5,opt,name=course_name,json=courseName,proto3" json:"course_name,omitempty"`
	// 教室
	Classroom string `protobuf:"bytes,6,opt,name=classroom,proto3" json:"classroom,omitempty"`
	// 老师
	Teacher string `protobuf:"bytes,7,opt,name=teacher,proto3" json:"teacher,omitempty"`
	// 时长
	Duration string `protobuf:"bytes,8,opt,name=duration,proto3" json:"duration,omitempty"`
}

func (x *GetScheduleNowResponse_Course) Reset() {
	*x = GetScheduleNowResponse_Course{}
	if protoimpl.UnsafeEnabled {
		mi := &file_campusapis_teaching_v1_teaching_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetScheduleNowResponse_Course) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetScheduleNowResponse_Course) ProtoMessage() {}

func (x *GetScheduleNowResponse_Course) ProtoReflect() protoreflect.Message {
	mi := &file_campusapis_teaching_v1_teaching_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetScheduleNowResponse_Course.ProtoReflect.Descriptor instead.
func (*GetScheduleNowResponse_Course) Descriptor() ([]byte, []int) {
	return file_campusapis_teaching_v1_teaching_proto_rawDescGZIP(), []int{8, 0}
}

func (x *GetScheduleNowResponse_Course) GetStartSection() uint32 {
	if x != nil {
		return x.StartSection
	}
	return 0
}

func (x *GetScheduleNowResponse_Course) GetEndSection() uint32 {
	if x != nil {
		return x.EndSection
	}
	return 0
}

func (x *GetScheduleNowResponse_Course) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *GetScheduleNowResponse_Course) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *GetScheduleNowResponse_Course) GetCourseName() string {
	if x != nil {
		return x.CourseName
	}
	return ""
}

func (x *GetScheduleNowResponse_Course) GetClassroom() string {
	if x != nil {
		return x.Classroom
	}
	return ""
}

func (x *GetScheduleNowResponse_Course) GetTeacher() string {
	if x != nil {
		return x.Teacher
	}
	return ""
}

func (x *GetScheduleNowResponse_Course) GetDuration() string {
	if x != nil {
		return x.Duration
	}
	return ""
}

// 内嵌信息
type ClassroomUsagesResponse_Nested struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 教室信息
	Classroom *Classroom `protobuf:"bytes,1,opt,name=classroom,proto3" json:"classroom,omitempty"`
	// 星期
	Weekday int32 `protobuf:"varint,2,opt,name=weekday,proto3" json:"weekday,omitempty"`
	// 周次列表
	Week []int32 `protobuf:"varint,3,rep,packed,name=week,proto3" json:"week,omitempty"`
	// 节次列表
	Section []int32 `protobuf:"varint,4,rep,packed,name=Section,proto3" json:"Section,omitempty"`
	// 课程内部ID
	ClassID string `protobuf:"bytes,5,opt,name=ClassID,proto3" json:"ClassID,omitempty"`
	// 课程号
	CourseCode string `protobuf:"bytes,6,opt,name=CourseCode,proto3" json:"CourseCode,omitempty"`
	// 课程名
	CourseName string `protobuf:"bytes,7,opt,name=CourseName,proto3" json:"CourseName,omitempty"`
}

func (x *ClassroomUsagesResponse_Nested) Reset() {
	*x = ClassroomUsagesResponse_Nested{}
	if protoimpl.UnsafeEnabled {
		mi := &file_campusapis_teaching_v1_teaching_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClassroomUsagesResponse_Nested) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClassroomUsagesResponse_Nested) ProtoMessage() {}

func (x *ClassroomUsagesResponse_Nested) ProtoReflect() protoreflect.Message {
	mi := &file_campusapis_teaching_v1_teaching_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClassroomUsagesResponse_Nested.ProtoReflect.Descriptor instead.
func (*ClassroomUsagesResponse_Nested) Descriptor() ([]byte, []int) {
	return file_campusapis_teaching_v1_teaching_proto_rawDescGZIP(), []int{17, 0}
}

func (x *ClassroomUsagesResponse_Nested) GetClassroom() *Classroom {
	if x != nil {
		return x.Classroom
	}
	return nil
}

func (x *ClassroomUsagesResponse_Nested) GetWeekday() int32 {
	if x != nil {
		return x.Weekday
	}
	return 0
}

func (x *ClassroomUsagesResponse_Nested) GetWeek() []int32 {
	if x != nil {
		return x.Week
	}
	return nil
}

func (x *ClassroomUsagesResponse_Nested) GetSection() []int32 {
	if x != nil {
		return x.Section
	}
	return nil
}

func (x *ClassroomUsagesResponse_Nested) GetClassID() string {
	if x != nil {
		return x.ClassID
	}
	return ""
}

func (x *ClassroomUsagesResponse_Nested) GetCourseCode() string {
	if x != nil {
		return x.CourseCode
	}
	return ""
}

func (x *ClassroomUsagesResponse_Nested) GetCourseName() string {
	if x != nil {
		return x.CourseName
	}
	return ""
}

var File_campusapis_teaching_v1_teaching_proto protoreflect.FileDescriptor

var file_campusapis_teaching_v1_teaching_proto_rawDesc = []byte{
	0x0a, 0x25, 0x63, 0x61, 0x6d, 0x70, 0x75, 0x73, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x74, 0x65, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16, 0x63, 0x61, 0x6d, 0x70, 0x75, 0x73, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x74, 0x65, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x1a,
	0x23, 0x63, 0x61, 0x6d, 0x70, 0x75, 0x73, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x6f,
	0x6f, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x63, 0x61, 0x6d, 0x70, 0x75, 0x73, 0x61, 0x70, 0x69, 0x73,
	0x2f, 0x73, 0x74, 0x61, 0x66, 0x66, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69,
	0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9c, 0x01, 0x0a,
	0x12, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x6d, 0x65, 0x73, 0x74, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x6d, 0x65, 0x73, 0x74, 0x65, 0x72, 0x12,
	0x1e, 0x0a, 0x0a, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x59, 0x65, 0x61, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x59, 0x65, 0x61, 0x72, 0x12,
	0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x12, 0x0a,
	0x04, 0x77, 0x65, 0x65, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x77, 0x65, 0x65,
	0x6b, 0x12, 0x18, 0x0a, 0x07, 0x77, 0x65, 0x65, 0x6b, 0x64, 0x61, 0x79, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x77, 0x65, 0x65, 0x6b, 0x64, 0x61, 0x79, 0x22, 0x5b, 0x0a, 0x13, 0x47,
	0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x44, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x61, 0x6d, 0x70, 0x75, 0x73, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x74,
	0x65, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x75, 0x72, 0x73,
	0x65, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xcf, 0x06, 0x0a, 0x16, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x75,
	0x72, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x44, 0x12, 0x1c, 0x0a,
	0x09, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6f, 0x75,
	0x72, 0x73, 0x65, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x6f, 0x75,
	0x72, 0x73, 0x65, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x6f, 0x75, 0x72, 0x73,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x12, 0x57, 0x0a,
	0x08, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x3b, 0x2e, 0x63, 0x61, 0x6d, 0x70, 0x75, 0x73, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x74, 0x65, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x2e,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c,
	0x59, 0x65, 0x61, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x53, 0x63, 0x68, 0x6f,
	0x6f, 0x6c, 0x59, 0x65, 0x61, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x65, 0x6d, 0x65, 0x73, 0x74,
	0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x53, 0x65, 0x6d, 0x65, 0x73, 0x74,
	0x65, 0x72, 0x1a, 0x61, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x66, 0x66, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x18, 0x0a, 0x07, 0x53, 0x74, 0x61, 0x66, 0x66, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x53, 0x74, 0x61, 0x66, 0x66, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74, 0x61,
	0x66, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x74,
	0x61, 0x66, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x66, 0x66,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x53, 0x74, 0x61, 0x66,
	0x66, 0x54, 0x79, 0x70, 0x65, 0x1a, 0x92, 0x03, 0x0a, 0x0c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x65, 0x61, 0x74, 0x73, 0x4e, 0x75, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x53, 0x65, 0x61, 0x74, 0x73, 0x4e, 0x75, 0x6d, 0x12, 0x18,
	0x0a, 0x07, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x07, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x54, 0x0a, 0x08, 0x54, 0x65, 0x61, 0x63,
	0x68, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x63, 0x61, 0x6d,
	0x70, 0x75, 0x73, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x74, 0x65, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x66, 0x66,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x54, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x73, 0x12, 0x54,
	0x0a, 0x08, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x38, 0x2e, 0x63, 0x61, 0x6d, 0x70, 0x75, 0x73, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x74, 0x65,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65,
	0x2e, 0x53, 0x74, 0x61, 0x66, 0x66, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x53, 0x74, 0x75, 0x64,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x57, 0x65, 0x65, 0x6b, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x04, 0x57, 0x65, 0x65, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x57, 0x65, 0x65, 0x6b,
	0x44, 0x61, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x57, 0x65, 0x65, 0x6b, 0x44,
	0x61, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x73, 0x54, 0x68, 0x69, 0x73, 0x57, 0x65, 0x65, 0x6b,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x49, 0x73, 0x54, 0x68, 0x69, 0x73, 0x57, 0x65,
	0x65, 0x6b, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xa9, 0x01, 0x0a, 0x07, 0x43,
	0x6f, 0x75, 0x72, 0x73, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x05, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x61, 0x6d, 0x70, 0x75, 0x73, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x74, 0x65, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x75, 0x72, 0x73, 0x65, 0x73, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x05, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x1a, 0x5c, 0x0a, 0x0a, 0x49, 0x74, 0x65, 0x6d,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x38, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x61, 0x6d, 0x70, 0x75, 0x73,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x74, 0x65, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xf4, 0x02, 0x0a, 0x0a, 0x43, 0x6f, 0x75, 0x72, 0x73,
	0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x44, 0x12,
	0x1c, 0x0a, 0x09, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6f, 0x75,
	0x72, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43,
	0x6f, 0x75, 0x72, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x64, 0x69,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x12,
	0x41, 0x0a, 0x0a, 0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x59, 0x65, 0x61, 0x72, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x61, 0x6d, 0x70, 0x75, 0x73, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x2e, 0x53, 0x63, 0x68, 0x6f,
	0x6f, 0x6c, 0x59, 0x65, 0x61, 0x72, 0x52, 0x0a, 0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x59, 0x65,
	0x61, 0x72, 0x12, 0x3b, 0x0a, 0x08, 0x53, 0x65, 0x6d, 0x65, 0x73, 0x74, 0x65, 0x72, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x61, 0x6d, 0x70, 0x75, 0x73, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x2e, 0x53, 0x65, 0x6d,
	0x65, 0x73, 0x74, 0x65, 0x72, 0x52, 0x08, 0x53, 0x65, 0x6d, 0x65, 0x73, 0x74, 0x65, 0x72, 0x12,
	0x3c, 0x0a, 0x08, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x63, 0x61, 0x6d, 0x70, 0x75, 0x73, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x74,
	0x65, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x52, 0x08, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x22, 0xad, 0x01,
	0x0a, 0x08, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x41, 0x0a, 0x05, 0x49, 0x74,
	0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x61, 0x6d, 0x70,
	0x75, 0x73, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x74, 0x65, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x49, 0x74, 0x65, 0x6d,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x1a, 0x5e, 0x0a,
	0x0a, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3a, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63,
	0x61, 0x6d, 0x70, 0x75, 0x73, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x74, 0x65, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xf4, 0x02,
	0x0a, 0x0c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x12,
	0x0a, 0x04, 0x57, 0x65, 0x65, 0x6b, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x04, 0x57, 0x65,
	0x65, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x57, 0x65, 0x65, 0x6b, 0x44, 0x61, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x57, 0x65, 0x65, 0x6b, 0x44, 0x61, 0x79, 0x12, 0x18, 0x0a, 0x07,
	0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x07, 0x53,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x73, 0x54, 0x68, 0x69, 0x73,
	0x57, 0x65, 0x65, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x49, 0x73, 0x54, 0x68,
	0x69, 0x73, 0x57, 0x65, 0x65, 0x6b, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x39,
	0x0a, 0x08, 0x54, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x63, 0x61, 0x6d, 0x70, 0x75, 0x73, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x74,
	0x61, 0x66, 0x66, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x61, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x08, 0x54, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x73, 0x12, 0x39, 0x0a, 0x08, 0x53, 0x74, 0x75,
	0x64, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x61,
	0x6d, 0x70, 0x75, 0x73, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x74, 0x61, 0x66, 0x66, 0x2e, 0x49,
	0x6e, 0x66, 0x6f, 0x4d, 0x61, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x08, 0x53, 0x74, 0x75, 0x64,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1a, 0x0a, 0x08, 0x53, 0x65, 0x61, 0x74, 0x73, 0x4e, 0x75, 0x6d, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x53, 0x65, 0x61, 0x74, 0x73, 0x4e, 0x75, 0x6d, 0x12, 0x16, 0x0a, 0x06,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x22, 0x5b, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x66, 0x66, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x74, 0x61, 0x66, 0x66, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x53, 0x74, 0x61, 0x66, 0x66, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x53,
	0x74, 0x61, 0x66, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x53, 0x74, 0x61, 0x66, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x22, 0xb8, 0x03, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x4e, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x05,
	0x74, 0x6f, 0x64, 0x61, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x61,
	0x6d, 0x70, 0x75, 0x73, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x74, 0x65, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x4e, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x6f, 0x75, 0x72,
	0x73, 0x65, 0x52, 0x05, 0x74, 0x6f, 0x64, 0x61, 0x79, 0x12, 0x51, 0x0a, 0x08, 0x74, 0x6f, 0x6d,
	0x6f, 0x72, 0x72, 0x6f, 0x77, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x61,
	0x6d, 0x70, 0x75, 0x73, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x74, 0x65, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x4e, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x6f, 0x75, 0x72,
	0x73, 0x65, 0x52, 0x08, 0x74, 0x6f, 0x6d, 0x6f, 0x72, 0x72, 0x6f, 0x77, 0x1a, 0xfd, 0x01, 0x0a,
	0x06, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b,
	0x65, 0x6e, 0x64, 0x5f, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x65, 0x6e, 0x64, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x75, 0x72, 0x73,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f,
	0x75, 0x72, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x72, 0x6f, 0x6f, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x72, 0x6f, 0x6f, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x65, 0x61, 0x63, 0x68, 0x65,
	0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72,
	0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xac, 0x01, 0x0a,
	0x18, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x4e, 0x6f, 0x77, 0x56,
	0x32, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x05, 0x54, 0x6f, 0x64,
	0x61, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x61, 0x6d, 0x70, 0x75,
	0x73, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x74, 0x65, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x52, 0x05, 0x54, 0x6f, 0x64, 0x61, 0x79, 0x12,
	0x4a, 0x0a, 0x08, 0x54, 0x6f, 0x6d, 0x6f, 0x72, 0x72, 0x6f, 0x77, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x61, 0x6d, 0x70, 0x75, 0x73, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x74,
	0x65, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x75, 0x72, 0x73,
	0x65, 0x52, 0x08, 0x54, 0x6f, 0x6d, 0x6f, 0x72, 0x72, 0x6f, 0x77, 0x22, 0x9e, 0x01, 0x0a, 0x18,
	0x47, 0x65, 0x74, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x63, 0x68, 0x6f,
	0x6f, 0x6c, 0x59, 0x65, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x63,
	0x68, 0x6f, 0x6f, 0x6c, 0x59, 0x65, 0x61, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x6d, 0x65,
	0x73, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x6d, 0x65,
	0x73, 0x74, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x77, 0x65, 0x65, 0x6b, 0x64, 0x61, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x77, 0x65, 0x65, 0x6b, 0x64, 0x61, 0x79, 0x12, 0x12,
	0x0a, 0x04, 0x77, 0x65, 0x65, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x77, 0x65,
	0x65, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x61, 0x0a, 0x19,
	0x47, 0x65, 0x74, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x61, 0x6d, 0x70, 0x75,
	0x73, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x74, 0x65, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22,
	0x52, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x72, 0x6f, 0x6f, 0x6d, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x63, 0x68, 0x6f, 0x6f,
	0x6c, 0x59, 0x65, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x63, 0x68,
	0x6f, 0x6f, 0x6c, 0x59, 0x65, 0x61, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x6d, 0x65, 0x73,
	0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x6d, 0x65, 0x73,
	0x74, 0x65, 0x72, 0x22, 0xef, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x72, 0x6f, 0x6f, 0x6d, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x6d, 0x65, 0x73, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x6d, 0x65, 0x73, 0x74, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a,
	0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x59, 0x65, 0x61, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x59, 0x65, 0x61, 0x72, 0x12, 0x30, 0x0a, 0x0a,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x10, 0x92, 0x41, 0x0d, 0xd2, 0x01, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x44, 0x52, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x3a, 0x65,
	0x92, 0x41, 0x62, 0x0a, 0x44, 0x2a, 0x18, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x72,
	0x6f, 0x6f, 0x6d, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32,
	0x1b, 0xe6, 0x95, 0x99, 0xe5, 0xae, 0xa4, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe6, 0x83, 0x85,
	0xe5, 0x86, 0xb5, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xe4, 0xbd, 0x93, 0xd2, 0x01, 0x0a, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x32, 0x1a, 0x7b, 0x20, 0x22, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x22, 0x3a, 0x20, 0x22, 0x31, 0x31, 0x31, 0x32,
	0x32, 0x32, 0x22, 0x20, 0x7d, 0x22, 0xa0, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x55, 0x6e, 0x75,
	0x73, 0x65, 0x64, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x72, 0x6f, 0x6f, 0x6d, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x6d, 0x65, 0x73, 0x74, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x6d, 0x65, 0x73, 0x74, 0x65, 0x72,
	0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x59, 0x65, 0x61, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x59, 0x65, 0x61, 0x72,
	0x12, 0x18, 0x0a, 0x07, 0x77, 0x65, 0x65, 0x6b, 0x64, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x77, 0x65, 0x65, 0x6b, 0x64, 0x61, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x77, 0x65,
	0x65, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x77, 0x65, 0x65, 0x6b, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x4d, 0x0a, 0x12, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x72, 0x6f, 0x6f, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37,
	0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x63, 0x61, 0x6d, 0x70, 0x75, 0x73, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x74, 0x65, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x72, 0x6f, 0x6f, 0x6d,
	0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xcf, 0x01, 0x0a, 0x09, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x72, 0x6f, 0x6f, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x6d, 0x65, 0x73, 0x74, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x65, 0x6d, 0x65, 0x73, 0x74, 0x65,
	0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x59, 0x65, 0x61, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x59, 0x65, 0x61,
	0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x12, 0x22, 0x0a, 0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e,
	0x67, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x75, 0x69, 0x6c, 0x64,
	0x69, 0x6e, 0x67, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e,
	0x67, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x75, 0x69,
	0x6c, 0x64, 0x69, 0x6e, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xd5, 0x02, 0x0a, 0x17, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x72, 0x6f, 0x6f, 0x6d, 0x55, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x63, 0x61, 0x6d, 0x70, 0x75, 0x73, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x74, 0x65, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x72, 0x6f, 0x6f, 0x6d, 0x55, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x52, 0x05, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x1a, 0xeb, 0x01, 0x0a, 0x06, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x12, 0x3f,
	0x0a, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x72, 0x6f, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x63, 0x61, 0x6d, 0x70, 0x75, 0x73, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x74,
	0x65, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x72, 0x6f, 0x6f, 0x6d, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x72, 0x6f, 0x6f, 0x6d, 0x12,
	0x18, 0x0a, 0x07, 0x77, 0x65, 0x65, 0x6b, 0x64, 0x61, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x77, 0x65, 0x65, 0x6b, 0x64, 0x61, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x77, 0x65, 0x65,
	0x6b, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x04, 0x77, 0x65, 0x65, 0x6b, 0x12, 0x18, 0x0a,
	0x07, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x07,
	0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x49,
	0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x32, 0xd0, 0x09, 0x0a, 0x0f, 0x54, 0x65, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xc8, 0x01, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x2a, 0x2e, 0x63, 0x61, 0x6d, 0x70, 0x75, 0x73, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x74, 0x65, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2b, 0x2e, 0x63, 0x61, 0x6d, 0x70, 0x75, 0x73, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x74,
	0x65, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x60,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x5a, 0x12, 0x15, 0x2f, 0x74, 0x65, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x67, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5a, 0x1b, 0x12,
	0x12, 0x2f, 0x74, 0x65, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x62, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x5a, 0x1d, 0x12, 0x14, 0x2f, 0x73,
	0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x32, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x62, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x62, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x12, 0x94, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x4e, 0x6f, 0x77, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x2e, 0x2e, 0x63, 0x61,
	0x6d, 0x70, 0x75, 0x73, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x74, 0x65, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x4e, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3a, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x34, 0x12, 0x19, 0x2f, 0x74, 0x65, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x2f, 0x76,
	0x31, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x6e, 0x6f, 0x77, 0x5a, 0x17,
	0x12, 0x15, 0x2f, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x2f, 0x6e, 0x6f, 0x77, 0x12, 0x9e, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x4e, 0x6f, 0x77, 0x56, 0x32, 0x12, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x1a, 0x30, 0x2e, 0x63, 0x61, 0x6d, 0x70, 0x75, 0x73, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x74, 0x65, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x4e, 0x6f, 0x77, 0x56, 0x32, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x40, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3a, 0x12, 0x1c,
	0x2f, 0x74, 0x65, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x76, 0x32, 0x2f, 0x6e, 0x6f, 0x77, 0x5a, 0x1a, 0x12, 0x18,
	0x2f, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x32, 0x2f, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x2f, 0x6e, 0x6f, 0x77, 0x12, 0x73, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x47,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x2a, 0x2e,
	0x63, 0x61, 0x6d, 0x70, 0x75, 0x73, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x74, 0x65, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x63, 0x61, 0x6d, 0x70,
	0x75, 0x73, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x74, 0x65, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x4e, 0x6f,
	0x77, 0x56, 0x32, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xae, 0x01,
	0x0a, 0x0d, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x72, 0x6f, 0x6f, 0x6d, 0x73, 0x12,
	0x2c, 0x2e, 0x63, 0x61, 0x6d, 0x70, 0x75, 0x73, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x74, 0x65, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x72, 0x6f, 0x6f, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e,
	0x63, 0x61, 0x6d, 0x70, 0x75, 0x73, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x74, 0x65, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x72, 0x6f, 0x6f, 0x6d,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x43, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x3d, 0x12, 0x16, 0x2f, 0x74, 0x65, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x31, 0x2f,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x72, 0x6f, 0x6f, 0x6d, 0x5a, 0x1c, 0x12, 0x13, 0x2f, 0x74, 0x65,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x72, 0x6f, 0x6f, 0x6d,
	0x62, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x62, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0xc8,
	0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x72, 0x6f, 0x6f, 0x6d, 0x55,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x30, 0x2e, 0x63, 0x61, 0x6d, 0x70, 0x75, 0x73, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x74, 0x65, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x72, 0x6f, 0x6f, 0x6d, 0x55, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x63, 0x61, 0x6d, 0x70, 0x75, 0x73,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x74, 0x65, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x72, 0x6f, 0x6f, 0x6d, 0x55, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x49,
	0x12, 0x1c, 0x2f, 0x74, 0x65, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x72, 0x6f, 0x6f, 0x6d, 0x2f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5a, 0x22,
	0x12, 0x19, 0x2f, 0x74, 0x65, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x2f, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x72, 0x6f, 0x6f, 0x6d, 0x2f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x62, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x62, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0xc8, 0x01, 0x0a, 0x13, 0x47, 0x65,
	0x74, 0x55, 0x6e, 0x75, 0x73, 0x65, 0x64, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x72, 0x6f, 0x6f, 0x6d,
	0x73, 0x12, 0x32, 0x2e, 0x63, 0x61, 0x6d, 0x70, 0x75, 0x73, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x74,
	0x65, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x6e,
	0x75, 0x73, 0x65, 0x64, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x72, 0x6f, 0x6f, 0x6d, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x63, 0x61, 0x6d, 0x70, 0x75, 0x73, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x74, 0x65, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x72, 0x6f, 0x6f, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x51, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4b, 0x12, 0x1d, 0x2f, 0x74, 0x65, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x72, 0x6f, 0x6f,
	0x6d, 0x2f, 0x75, 0x6e, 0x75, 0x73, 0x65, 0x64, 0x5a, 0x23, 0x12, 0x1a, 0x2f, 0x74, 0x65, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x67, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x72, 0x6f, 0x6f, 0x6d, 0x2f,
	0x75, 0x6e, 0x75, 0x73, 0x65, 0x64, 0x62, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x62, 0x05, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x42, 0xf4, 0x03, 0x0a, 0x1a, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x61, 0x6d,
	0x70, 0x75, 0x73, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x74, 0x65, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67,
	0x2e, 0x76, 0x31, 0x42, 0x0d, 0x54, 0x65, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x50, 0x01, 0x5a, 0x41, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x68, 0x64, 0x75, 0x68, 0x65, 0x6c, 0x70, 0x2f, 0x61, 0x70, 0x69, 0x5f, 0x6f, 0x70, 0x65,
	0x6e, 0x5f, 0x73, 0x64, 0x6b, 0x2f, 0x63, 0x61, 0x6d, 0x70, 0x75, 0x73, 0x61, 0x70, 0x69, 0x73,
	0x2f, 0x74, 0x65, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x31, 0x3b, 0x74, 0x65, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x67, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x43, 0x54, 0x58, 0xaa, 0x02, 0x16,
	0x43, 0x61, 0x6d, 0x70, 0x75, 0x73, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x54, 0x65, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x67, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x16, 0x43, 0x61, 0x6d, 0x70, 0x75, 0x73, 0x61,
	0x70, 0x69, 0x73, 0x5c, 0x54, 0x65, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x5c, 0x56, 0x31, 0xe2,
	0x02, 0x22, 0x43, 0x61, 0x6d, 0x70, 0x75, 0x73, 0x61, 0x70, 0x69, 0x73, 0x5c, 0x54, 0x65, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x67, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x18, 0x43, 0x61, 0x6d, 0x70, 0x75, 0x73, 0x61, 0x70, 0x69,
	0x73, 0x3a, 0x3a, 0x54, 0x65, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x3a, 0x3a, 0x56, 0x31, 0x92,
	0x41, 0x88, 0x02, 0x12, 0xde, 0x01, 0x0a, 0x0c, 0x54, 0x65, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67,
	0x20, 0x41, 0x50, 0x49, 0x12, 0x0c, 0x54, 0x65, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x20, 0x41,
	0x50, 0x49, 0x22, 0x5b, 0x0a, 0x1b, 0x68, 0x64, 0x75, 0x68, 0x65, 0x6c, 0x70, 0x20, 0x73, 0x61,
	0x6c, 0x6d, 0x6f, 0x6e, 0x20, 0x62, 0x61, 0x73, 0x65, 0x20, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x12, 0x2a, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x68, 0x64, 0x75, 0x68, 0x65, 0x6c, 0x70, 0x2f, 0x73, 0x61,
	0x6c, 0x6d, 0x6f, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x1a, 0x10, 0x6e,
	0x6f, 0x6e, 0x65, 0x40, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2a,
	0x5e, 0x0a, 0x14, 0x42, 0x53, 0x44, 0x20, 0x33, 0x2d, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x20,
	0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f,
	0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x72, 0x70, 0x63,
	0x2d, 0x65, 0x63, 0x6f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2d,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2f, 0x62, 0x6c, 0x6f, 0x62, 0x2f, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x2f, 0x4c, 0x49, 0x43, 0x45, 0x4e, 0x53, 0x45, 0x2e, 0x74, 0x78, 0x74, 0x32,
	0x03, 0x30, 0x2e, 0x31, 0x2a, 0x01, 0x02, 0x32, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_campusapis_teaching_v1_teaching_proto_rawDescOnce sync.Once
	file_campusapis_teaching_v1_teaching_proto_rawDescData = file_campusapis_teaching_v1_teaching_proto_rawDesc
)

func file_campusapis_teaching_v1_teaching_proto_rawDescGZIP() []byte {
	file_campusapis_teaching_v1_teaching_proto_rawDescOnce.Do(func() {
		file_campusapis_teaching_v1_teaching_proto_rawDescData = protoimpl.X.CompressGZIP(file_campusapis_teaching_v1_teaching_proto_rawDescData)
	})
	return file_campusapis_teaching_v1_teaching_proto_rawDescData
}

var file_campusapis_teaching_v1_teaching_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_campusapis_teaching_v1_teaching_proto_goTypes = []interface{}{
	(*GetScheduleRequest)(nil),                  // 0: campusapis.teaching.v1.GetScheduleRequest
	(*GetScheduleResponse)(nil),                 // 1: campusapis.teaching.v1.GetScheduleResponse
	(*ScheduleResponseCourse)(nil),              // 2: campusapis.teaching.v1.ScheduleResponseCourse
	(*Courses)(nil),                             // 3: campusapis.teaching.v1.Courses
	(*CourseItem)(nil),                          // 4: campusapis.teaching.v1.CourseItem
	(*Schedule)(nil),                            // 5: campusapis.teaching.v1.Schedule
	(*ScheduleItem)(nil),                        // 6: campusapis.teaching.v1.ScheduleItem
	(*StaffInfo)(nil),                           // 7: campusapis.teaching.v1.StaffInfo
	(*GetScheduleNowResponse)(nil),              // 8: campusapis.teaching.v1.GetScheduleNowResponse
	(*GetScheduleNowV2Response)(nil),            // 9: campusapis.teaching.v1.GetScheduleNowV2Response
	(*GetGlobalScheduleRequest)(nil),            // 10: campusapis.teaching.v1.GetGlobalScheduleRequest
	(*GetGlobalScheduleResponse)(nil),           // 11: campusapis.teaching.v1.GetGlobalScheduleResponse
	(*GetClassroomsRequest)(nil),                // 12: campusapis.teaching.v1.GetClassroomsRequest
	(*GetClassroomUsageRequest)(nil),            // 13: campusapis.teaching.v1.GetClassroomUsageRequest
	(*GetUnusedClassroomsRequest)(nil),          // 14: campusapis.teaching.v1.GetUnusedClassroomsRequest
	(*ClassroomsResponse)(nil),                  // 15: campusapis.teaching.v1.ClassroomsResponse
	(*Classroom)(nil),                           // 16: campusapis.teaching.v1.Classroom
	(*ClassroomUsagesResponse)(nil),             // 17: campusapis.teaching.v1.ClassroomUsagesResponse
	(*ScheduleResponseCourse_StaffInfo)(nil),    // 18: campusapis.teaching.v1.ScheduleResponseCourse.StaffInfo
	(*ScheduleResponseCourse_ScheduleInfo)(nil), // 19: campusapis.teaching.v1.ScheduleResponseCourse.ScheduleInfo
	nil,                                    // 20: campusapis.teaching.v1.Courses.ItemsEntry
	nil,                                    // 21: campusapis.teaching.v1.Schedule.ItemsEntry
	(*GetScheduleNowResponse_Course)(nil),  // 22: campusapis.teaching.v1.GetScheduleNowResponse.Course
	(*ClassroomUsagesResponse_Nested)(nil), // 23: campusapis.teaching.v1.ClassroomUsagesResponse.Nested
	(*schoolTime.SchoolYear)(nil),          // 24: campusapis.schoolTime.SchoolYear
	(*schoolTime.Semester)(nil),            // 25: campusapis.schoolTime.Semester
	(*staff.InfoMapList)(nil),              // 26: campusapis.staff.InfoMapList
	(*emptypb.Empty)(nil),                  // 27: google.protobuf.Empty
}
var file_campusapis_teaching_v1_teaching_proto_depIdxs = []int32{
	2,  // 0: campusapis.teaching.v1.GetScheduleResponse.items:type_name -> campusapis.teaching.v1.ScheduleResponseCourse
	19, // 1: campusapis.teaching.v1.ScheduleResponseCourse.Schedule:type_name -> campusapis.teaching.v1.ScheduleResponseCourse.ScheduleInfo
	20, // 2: campusapis.teaching.v1.Courses.Items:type_name -> campusapis.teaching.v1.Courses.ItemsEntry
	24, // 3: campusapis.teaching.v1.CourseItem.SchoolYear:type_name -> campusapis.schoolTime.SchoolYear
	25, // 4: campusapis.teaching.v1.CourseItem.Semester:type_name -> campusapis.schoolTime.Semester
	5,  // 5: campusapis.teaching.v1.CourseItem.Schedule:type_name -> campusapis.teaching.v1.Schedule
	21, // 6: campusapis.teaching.v1.Schedule.Items:type_name -> campusapis.teaching.v1.Schedule.ItemsEntry
	26, // 7: campusapis.teaching.v1.ScheduleItem.Teachers:type_name -> campusapis.staff.InfoMapList
	26, // 8: campusapis.teaching.v1.ScheduleItem.Students:type_name -> campusapis.staff.InfoMapList
	22, // 9: campusapis.teaching.v1.GetScheduleNowResponse.today:type_name -> campusapis.teaching.v1.GetScheduleNowResponse.Course
	22, // 10: campusapis.teaching.v1.GetScheduleNowResponse.tomorrow:type_name -> campusapis.teaching.v1.GetScheduleNowResponse.Course
	2,  // 11: campusapis.teaching.v1.GetScheduleNowV2Response.Today:type_name -> campusapis.teaching.v1.ScheduleResponseCourse
	2,  // 12: campusapis.teaching.v1.GetScheduleNowV2Response.Tomorrow:type_name -> campusapis.teaching.v1.ScheduleResponseCourse
	2,  // 13: campusapis.teaching.v1.GetGlobalScheduleResponse.items:type_name -> campusapis.teaching.v1.ScheduleResponseCourse
	16, // 14: campusapis.teaching.v1.ClassroomsResponse.items:type_name -> campusapis.teaching.v1.Classroom
	23, // 15: campusapis.teaching.v1.ClassroomUsagesResponse.items:type_name -> campusapis.teaching.v1.ClassroomUsagesResponse.Nested
	18, // 16: campusapis.teaching.v1.ScheduleResponseCourse.ScheduleInfo.Teachers:type_name -> campusapis.teaching.v1.ScheduleResponseCourse.StaffInfo
	18, // 17: campusapis.teaching.v1.ScheduleResponseCourse.ScheduleInfo.Students:type_name -> campusapis.teaching.v1.ScheduleResponseCourse.StaffInfo
	4,  // 18: campusapis.teaching.v1.Courses.ItemsEntry.value:type_name -> campusapis.teaching.v1.CourseItem
	6,  // 19: campusapis.teaching.v1.Schedule.ItemsEntry.value:type_name -> campusapis.teaching.v1.ScheduleItem
	16, // 20: campusapis.teaching.v1.ClassroomUsagesResponse.Nested.classroom:type_name -> campusapis.teaching.v1.Classroom
	0,  // 21: campusapis.teaching.v1.TeachingService.GetSchedule:input_type -> campusapis.teaching.v1.GetScheduleRequest
	27, // 22: campusapis.teaching.v1.TeachingService.GetScheduleNow:input_type -> google.protobuf.Empty
	27, // 23: campusapis.teaching.v1.TeachingService.GetScheduleNowV2:input_type -> google.protobuf.Empty
	0,  // 24: campusapis.teaching.v1.TeachingService.GetGlobalSchedule:input_type -> campusapis.teaching.v1.GetScheduleRequest
	12, // 25: campusapis.teaching.v1.TeachingService.GetClassrooms:input_type -> campusapis.teaching.v1.GetClassroomsRequest
	13, // 26: campusapis.teaching.v1.TeachingService.GetClassroomUsages:input_type -> campusapis.teaching.v1.GetClassroomUsageRequest
	14, // 27: campusapis.teaching.v1.TeachingService.GetUnusedClassrooms:input_type -> campusapis.teaching.v1.GetUnusedClassroomsRequest
	1,  // 28: campusapis.teaching.v1.TeachingService.GetSchedule:output_type -> campusapis.teaching.v1.GetScheduleResponse
	8,  // 29: campusapis.teaching.v1.TeachingService.GetScheduleNow:output_type -> campusapis.teaching.v1.GetScheduleNowResponse
	9,  // 30: campusapis.teaching.v1.TeachingService.GetScheduleNowV2:output_type -> campusapis.teaching.v1.GetScheduleNowV2Response
	9,  // 31: campusapis.teaching.v1.TeachingService.GetGlobalSchedule:output_type -> campusapis.teaching.v1.GetScheduleNowV2Response
	15, // 32: campusapis.teaching.v1.TeachingService.GetClassrooms:output_type -> campusapis.teaching.v1.ClassroomsResponse
	17, // 33: campusapis.teaching.v1.TeachingService.GetClassroomUsages:output_type -> campusapis.teaching.v1.ClassroomUsagesResponse
	15, // 34: campusapis.teaching.v1.TeachingService.GetUnusedClassrooms:output_type -> campusapis.teaching.v1.ClassroomsResponse
	28, // [28:35] is the sub-list for method output_type
	21, // [21:28] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_campusapis_teaching_v1_teaching_proto_init() }
func file_campusapis_teaching_v1_teaching_proto_init() {
	if File_campusapis_teaching_v1_teaching_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_campusapis_teaching_v1_teaching_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetScheduleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_campusapis_teaching_v1_teaching_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetScheduleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_campusapis_teaching_v1_teaching_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScheduleResponseCourse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_campusapis_teaching_v1_teaching_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Courses); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_campusapis_teaching_v1_teaching_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CourseItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_campusapis_teaching_v1_teaching_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Schedule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_campusapis_teaching_v1_teaching_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScheduleItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_campusapis_teaching_v1_teaching_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StaffInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_campusapis_teaching_v1_teaching_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetScheduleNowResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_campusapis_teaching_v1_teaching_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetScheduleNowV2Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_campusapis_teaching_v1_teaching_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGlobalScheduleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_campusapis_teaching_v1_teaching_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGlobalScheduleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_campusapis_teaching_v1_teaching_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetClassroomsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_campusapis_teaching_v1_teaching_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetClassroomUsageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_campusapis_teaching_v1_teaching_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUnusedClassroomsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_campusapis_teaching_v1_teaching_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClassroomsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_campusapis_teaching_v1_teaching_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Classroom); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_campusapis_teaching_v1_teaching_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClassroomUsagesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_campusapis_teaching_v1_teaching_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScheduleResponseCourse_StaffInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_campusapis_teaching_v1_teaching_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScheduleResponseCourse_ScheduleInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_campusapis_teaching_v1_teaching_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetScheduleNowResponse_Course); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_campusapis_teaching_v1_teaching_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClassroomUsagesResponse_Nested); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_campusapis_teaching_v1_teaching_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_campusapis_teaching_v1_teaching_proto_goTypes,
		DependencyIndexes: file_campusapis_teaching_v1_teaching_proto_depIdxs,
		MessageInfos:      file_campusapis_teaching_v1_teaching_proto_msgTypes,
	}.Build()
	File_campusapis_teaching_v1_teaching_proto = out.File
	file_campusapis_teaching_v1_teaching_proto_rawDesc = nil
	file_campusapis_teaching_v1_teaching_proto_goTypes = nil
	file_campusapis_teaching_v1_teaching_proto_depIdxs = nil
}
