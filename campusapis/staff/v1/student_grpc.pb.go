// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package staffv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StudentServiceClient is the client API for StudentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StudentServiceClient interface {
	GetStudentInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetStudentInfoResponse, error)
	GetStudentNeedyInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetStudentNeedyInfoResponse, error)
	GetStudentDormInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetStudentDormInfoResponse, error)
	BirthdayHandler(ctx context.Context, in *BirthdayHandlerRequest, opts ...grpc.CallOption) (*BirthdayHandlerResponse, error)
	BirthdaysHandler(ctx context.Context, in *BirthdaysHandlerRequest, opts ...grpc.CallOption) (*BirthdaysHandlerResponse, error)
	GateAccessHandler(ctx context.Context, in *GateAccessHandlerRequest, opts ...grpc.CallOption) (*GateAccessHandlerResponse, error)
	StudentStaySchoolHandler(ctx context.Context, in *StudentStaySchoolHandlerRequest, opts ...grpc.CallOption) (*StudentStaySchoolHandlerResponse, error)
}

type studentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStudentServiceClient(cc grpc.ClientConnInterface) StudentServiceClient {
	return &studentServiceClient{cc}
}

func (c *studentServiceClient) GetStudentInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetStudentInfoResponse, error) {
	out := new(GetStudentInfoResponse)
	err := c.cc.Invoke(ctx, "/campusapis.staff.v1.StudentService/GetStudentInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentServiceClient) GetStudentNeedyInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetStudentNeedyInfoResponse, error) {
	out := new(GetStudentNeedyInfoResponse)
	err := c.cc.Invoke(ctx, "/campusapis.staff.v1.StudentService/GetStudentNeedyInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentServiceClient) GetStudentDormInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetStudentDormInfoResponse, error) {
	out := new(GetStudentDormInfoResponse)
	err := c.cc.Invoke(ctx, "/campusapis.staff.v1.StudentService/GetStudentDormInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentServiceClient) BirthdayHandler(ctx context.Context, in *BirthdayHandlerRequest, opts ...grpc.CallOption) (*BirthdayHandlerResponse, error) {
	out := new(BirthdayHandlerResponse)
	err := c.cc.Invoke(ctx, "/campusapis.staff.v1.StudentService/BirthdayHandler", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentServiceClient) BirthdaysHandler(ctx context.Context, in *BirthdaysHandlerRequest, opts ...grpc.CallOption) (*BirthdaysHandlerResponse, error) {
	out := new(BirthdaysHandlerResponse)
	err := c.cc.Invoke(ctx, "/campusapis.staff.v1.StudentService/BirthdaysHandler", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentServiceClient) GateAccessHandler(ctx context.Context, in *GateAccessHandlerRequest, opts ...grpc.CallOption) (*GateAccessHandlerResponse, error) {
	out := new(GateAccessHandlerResponse)
	err := c.cc.Invoke(ctx, "/campusapis.staff.v1.StudentService/GateAccessHandler", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentServiceClient) StudentStaySchoolHandler(ctx context.Context, in *StudentStaySchoolHandlerRequest, opts ...grpc.CallOption) (*StudentStaySchoolHandlerResponse, error) {
	out := new(StudentStaySchoolHandlerResponse)
	err := c.cc.Invoke(ctx, "/campusapis.staff.v1.StudentService/StudentStaySchoolHandler", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StudentServiceServer is the server API for StudentService service.
// All implementations should embed UnimplementedStudentServiceServer
// for forward compatibility
type StudentServiceServer interface {
	GetStudentInfo(context.Context, *emptypb.Empty) (*GetStudentInfoResponse, error)
	GetStudentNeedyInfo(context.Context, *emptypb.Empty) (*GetStudentNeedyInfoResponse, error)
	GetStudentDormInfo(context.Context, *emptypb.Empty) (*GetStudentDormInfoResponse, error)
	BirthdayHandler(context.Context, *BirthdayHandlerRequest) (*BirthdayHandlerResponse, error)
	BirthdaysHandler(context.Context, *BirthdaysHandlerRequest) (*BirthdaysHandlerResponse, error)
	GateAccessHandler(context.Context, *GateAccessHandlerRequest) (*GateAccessHandlerResponse, error)
	StudentStaySchoolHandler(context.Context, *StudentStaySchoolHandlerRequest) (*StudentStaySchoolHandlerResponse, error)
}

// UnimplementedStudentServiceServer should be embedded to have forward compatible implementations.
type UnimplementedStudentServiceServer struct {
}

func (UnimplementedStudentServiceServer) GetStudentInfo(context.Context, *emptypb.Empty) (*GetStudentInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStudentInfo not implemented")
}
func (UnimplementedStudentServiceServer) GetStudentNeedyInfo(context.Context, *emptypb.Empty) (*GetStudentNeedyInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStudentNeedyInfo not implemented")
}
func (UnimplementedStudentServiceServer) GetStudentDormInfo(context.Context, *emptypb.Empty) (*GetStudentDormInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStudentDormInfo not implemented")
}
func (UnimplementedStudentServiceServer) BirthdayHandler(context.Context, *BirthdayHandlerRequest) (*BirthdayHandlerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BirthdayHandler not implemented")
}
func (UnimplementedStudentServiceServer) BirthdaysHandler(context.Context, *BirthdaysHandlerRequest) (*BirthdaysHandlerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BirthdaysHandler not implemented")
}
func (UnimplementedStudentServiceServer) GateAccessHandler(context.Context, *GateAccessHandlerRequest) (*GateAccessHandlerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GateAccessHandler not implemented")
}
func (UnimplementedStudentServiceServer) StudentStaySchoolHandler(context.Context, *StudentStaySchoolHandlerRequest) (*StudentStaySchoolHandlerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StudentStaySchoolHandler not implemented")
}

// UnsafeStudentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StudentServiceServer will
// result in compilation errors.
type UnsafeStudentServiceServer interface {
	mustEmbedUnimplementedStudentServiceServer()
}

func RegisterStudentServiceServer(s grpc.ServiceRegistrar, srv StudentServiceServer) {
	s.RegisterService(&StudentService_ServiceDesc, srv)
}

func _StudentService_GetStudentInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentServiceServer).GetStudentInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/campusapis.staff.v1.StudentService/GetStudentInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentServiceServer).GetStudentInfo(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudentService_GetStudentNeedyInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentServiceServer).GetStudentNeedyInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/campusapis.staff.v1.StudentService/GetStudentNeedyInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentServiceServer).GetStudentNeedyInfo(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudentService_GetStudentDormInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentServiceServer).GetStudentDormInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/campusapis.staff.v1.StudentService/GetStudentDormInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentServiceServer).GetStudentDormInfo(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudentService_BirthdayHandler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BirthdayHandlerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentServiceServer).BirthdayHandler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/campusapis.staff.v1.StudentService/BirthdayHandler",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentServiceServer).BirthdayHandler(ctx, req.(*BirthdayHandlerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudentService_BirthdaysHandler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BirthdaysHandlerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentServiceServer).BirthdaysHandler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/campusapis.staff.v1.StudentService/BirthdaysHandler",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentServiceServer).BirthdaysHandler(ctx, req.(*BirthdaysHandlerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudentService_GateAccessHandler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GateAccessHandlerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentServiceServer).GateAccessHandler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/campusapis.staff.v1.StudentService/GateAccessHandler",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentServiceServer).GateAccessHandler(ctx, req.(*GateAccessHandlerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudentService_StudentStaySchoolHandler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StudentStaySchoolHandlerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentServiceServer).StudentStaySchoolHandler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/campusapis.staff.v1.StudentService/StudentStaySchoolHandler",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentServiceServer).StudentStaySchoolHandler(ctx, req.(*StudentStaySchoolHandlerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StudentService_ServiceDesc is the grpc.ServiceDesc for StudentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StudentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "campusapis.staff.v1.StudentService",
	HandlerType: (*StudentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStudentInfo",
			Handler:    _StudentService_GetStudentInfo_Handler,
		},
		{
			MethodName: "GetStudentNeedyInfo",
			Handler:    _StudentService_GetStudentNeedyInfo_Handler,
		},
		{
			MethodName: "GetStudentDormInfo",
			Handler:    _StudentService_GetStudentDormInfo_Handler,
		},
		{
			MethodName: "BirthdayHandler",
			Handler:    _StudentService_BirthdayHandler_Handler,
		},
		{
			MethodName: "BirthdaysHandler",
			Handler:    _StudentService_BirthdaysHandler_Handler,
		},
		{
			MethodName: "GateAccessHandler",
			Handler:    _StudentService_GateAccessHandler_Handler,
		},
		{
			MethodName: "StudentStaySchoolHandler",
			Handler:    _StudentService_StudentStaySchoolHandler_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "campusapis/staff/v1/student.proto",
}
