// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        (unknown)
// source: campusapis/staff/v1/campus.proto

package staffv1

import (
	staff "github.com/hduhelp/api_open_sdk/campusapis/staff"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/anypb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 查询人员信息返回体
type GetPersonInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error int32       `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Msg   string      `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data  *PersonInfo `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetPersonInfoResponse) Reset() {
	*x = GetPersonInfoResponse{}
	mi := &file_campusapis_staff_v1_campus_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPersonInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPersonInfoResponse) ProtoMessage() {}

func (x *GetPersonInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_campusapis_staff_v1_campus_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPersonInfoResponse.ProtoReflect.Descriptor instead.
func (*GetPersonInfoResponse) Descriptor() ([]byte, []int) {
	return file_campusapis_staff_v1_campus_proto_rawDescGZIP(), []int{0}
}

func (x *GetPersonInfoResponse) GetError() int32 {
	if x != nil {
		return x.Error
	}
	return 0
}

func (x *GetPersonInfoResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetPersonInfoResponse) GetData() *PersonInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type PersonInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 学工号
	StaffId string `protobuf:"bytes,1,opt,name=staffId,proto3" json:"staffId,omitempty"`
	// 姓名
	StaffName string `protobuf:"bytes,2,opt,name=staffName,proto3" json:"staffName,omitempty"`
	// 人员状态
	StaffState string `protobuf:"bytes,3,opt,name=staffState,proto3" json:"staffState,omitempty"`
	// 人员类型
	StaffType string `protobuf:"bytes,4,opt,name=staffType,proto3" json:"staffType,omitempty"`
	// 学院代码
	UnitCode string `protobuf:"bytes,5,opt,name=unitCode,proto3" json:"unitCode,omitempty"`
	// 年级
	Grade string `protobuf:"bytes,6,opt,name=grade,proto3" json:"grade,omitempty"`
}

func (x *PersonInfo) Reset() {
	*x = PersonInfo{}
	mi := &file_campusapis_staff_v1_campus_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PersonInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PersonInfo) ProtoMessage() {}

func (x *PersonInfo) ProtoReflect() protoreflect.Message {
	mi := &file_campusapis_staff_v1_campus_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PersonInfo.ProtoReflect.Descriptor instead.
func (*PersonInfo) Descriptor() ([]byte, []int) {
	return file_campusapis_staff_v1_campus_proto_rawDescGZIP(), []int{1}
}

func (x *PersonInfo) GetStaffId() string {
	if x != nil {
		return x.StaffId
	}
	return ""
}

func (x *PersonInfo) GetStaffName() string {
	if x != nil {
		return x.StaffName
	}
	return ""
}

func (x *PersonInfo) GetStaffState() string {
	if x != nil {
		return x.StaffState
	}
	return ""
}

func (x *PersonInfo) GetStaffType() string {
	if x != nil {
		return x.StaffType
	}
	return ""
}

func (x *PersonInfo) GetUnitCode() string {
	if x != nil {
		return x.UnitCode
	}
	return ""
}

func (x *PersonInfo) GetGrade() string {
	if x != nil {
		return x.Grade
	}
	return ""
}

type GetStudentRewardsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 学年，只支持一种格式，例：2021-2022学年，应传 2021
	SchoolYear string `protobuf:"bytes,1,opt,name=schoolYear,proto3" json:"schoolYear,omitempty"`
	// 学期，枚举：第一学期 | 第二学期
	Semester string `protobuf:"bytes,2,opt,name=semester,proto3" json:"semester,omitempty"`
}

func (x *GetStudentRewardsRequest) Reset() {
	*x = GetStudentRewardsRequest{}
	mi := &file_campusapis_staff_v1_campus_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetStudentRewardsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStudentRewardsRequest) ProtoMessage() {}

func (x *GetStudentRewardsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_campusapis_staff_v1_campus_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStudentRewardsRequest.ProtoReflect.Descriptor instead.
func (*GetStudentRewardsRequest) Descriptor() ([]byte, []int) {
	return file_campusapis_staff_v1_campus_proto_rawDescGZIP(), []int{2}
}

func (x *GetStudentRewardsRequest) GetSchoolYear() string {
	if x != nil {
		return x.SchoolYear
	}
	return ""
}

func (x *GetStudentRewardsRequest) GetSemester() string {
	if x != nil {
		return x.Semester
	}
	return ""
}

type GetStudentCourseSelectionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 学年，只支持一种格式，例：2021-2022学年，应传 2021
	SchoolYear string `protobuf:"bytes,1,opt,name=schoolYear,proto3" json:"schoolYear,omitempty"`
	// 学期，枚举：第一学期 | 第二学期
	Semester string `protobuf:"bytes,2,opt,name=semester,proto3" json:"semester,omitempty"`
}

func (x *GetStudentCourseSelectionsRequest) Reset() {
	*x = GetStudentCourseSelectionsRequest{}
	mi := &file_campusapis_staff_v1_campus_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetStudentCourseSelectionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStudentCourseSelectionsRequest) ProtoMessage() {}

func (x *GetStudentCourseSelectionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_campusapis_staff_v1_campus_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStudentCourseSelectionsRequest.ProtoReflect.Descriptor instead.
func (*GetStudentCourseSelectionsRequest) Descriptor() ([]byte, []int) {
	return file_campusapis_staff_v1_campus_proto_rawDescGZIP(), []int{3}
}

func (x *GetStudentCourseSelectionsRequest) GetSchoolYear() string {
	if x != nil {
		return x.SchoolYear
	}
	return ""
}

func (x *GetStudentCourseSelectionsRequest) GetSemester() string {
	if x != nil {
		return x.Semester
	}
	return ""
}

type GetStudentGradeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 学年，只支持一种格式，例：2021-2022学年，应传 2021
	SchoolYear string `protobuf:"bytes,1,opt,name=schoolYear,proto3" json:"schoolYear,omitempty"`
	// 学期，枚举：第一学期 | 第二学期
	Semester string `protobuf:"bytes,2,opt,name=semester,proto3" json:"semester,omitempty"`
}

func (x *GetStudentGradeRequest) Reset() {
	*x = GetStudentGradeRequest{}
	mi := &file_campusapis_staff_v1_campus_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetStudentGradeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStudentGradeRequest) ProtoMessage() {}

func (x *GetStudentGradeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_campusapis_staff_v1_campus_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStudentGradeRequest.ProtoReflect.Descriptor instead.
func (*GetStudentGradeRequest) Descriptor() ([]byte, []int) {
	return file_campusapis_staff_v1_campus_proto_rawDescGZIP(), []int{4}
}

func (x *GetStudentGradeRequest) GetSchoolYear() string {
	if x != nil {
		return x.SchoolYear
	}
	return ""
}

func (x *GetStudentGradeRequest) GetSemester() string {
	if x != nil {
		return x.Semester
	}
	return ""
}

type GetGlobalStudentGradeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 学年，只支持一种格式，例：2021-2022学年，应传 2021
	SchoolYear string `protobuf:"bytes,1,opt,name=schoolYear,proto3" json:"schoolYear,omitempty"`
	// 学期，枚举：第一学期 | 第二学期
	Semester string `protobuf:"bytes,2,opt,name=semester,proto3" json:"semester,omitempty"`
	// 时间戳
	Timestamp int64 `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// 时长范围
	Duration int64 `protobuf:"varint,4,opt,name=duration,proto3" json:"duration,omitempty"`
}

func (x *GetGlobalStudentGradeRequest) Reset() {
	*x = GetGlobalStudentGradeRequest{}
	mi := &file_campusapis_staff_v1_campus_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetGlobalStudentGradeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGlobalStudentGradeRequest) ProtoMessage() {}

func (x *GetGlobalStudentGradeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_campusapis_staff_v1_campus_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGlobalStudentGradeRequest.ProtoReflect.Descriptor instead.
func (*GetGlobalStudentGradeRequest) Descriptor() ([]byte, []int) {
	return file_campusapis_staff_v1_campus_proto_rawDescGZIP(), []int{5}
}

func (x *GetGlobalStudentGradeRequest) GetSchoolYear() string {
	if x != nil {
		return x.SchoolYear
	}
	return ""
}

func (x *GetGlobalStudentGradeRequest) GetSemester() string {
	if x != nil {
		return x.Semester
	}
	return ""
}

func (x *GetGlobalStudentGradeRequest) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *GetGlobalStudentGradeRequest) GetDuration() int64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

type GetStudentExamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 学年，只支持一种格式，例：2021-2022学年，应传 2021
	SchoolYear string `protobuf:"bytes,1,opt,name=schoolYear,proto3" json:"schoolYear,omitempty"`
	// 学期，枚举：第一学期 | 第二学期
	Semester string `protobuf:"bytes,2,opt,name=semester,proto3" json:"semester,omitempty"`
}

func (x *GetStudentExamRequest) Reset() {
	*x = GetStudentExamRequest{}
	mi := &file_campusapis_staff_v1_campus_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetStudentExamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStudentExamRequest) ProtoMessage() {}

func (x *GetStudentExamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_campusapis_staff_v1_campus_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStudentExamRequest.ProtoReflect.Descriptor instead.
func (*GetStudentExamRequest) Descriptor() ([]byte, []int) {
	return file_campusapis_staff_v1_campus_proto_rawDescGZIP(), []int{6}
}

func (x *GetStudentExamRequest) GetSchoolYear() string {
	if x != nil {
		return x.SchoolYear
	}
	return ""
}

func (x *GetStudentExamRequest) GetSemester() string {
	if x != nil {
		return x.Semester
	}
	return ""
}

type GetDailyExamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 日期
	Date string `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
}

func (x *GetDailyExamRequest) Reset() {
	*x = GetDailyExamRequest{}
	mi := &file_campusapis_staff_v1_campus_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDailyExamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDailyExamRequest) ProtoMessage() {}

func (x *GetDailyExamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_campusapis_staff_v1_campus_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDailyExamRequest.ProtoReflect.Descriptor instead.
func (*GetDailyExamRequest) Descriptor() ([]byte, []int) {
	return file_campusapis_staff_v1_campus_proto_rawDescGZIP(), []int{7}
}

func (x *GetDailyExamRequest) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

// 学期查询关键字
type SemesterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 学年，只支持一种格式，例：2021-2022学年，应传 2021
	SchoolYear string `protobuf:"bytes,1,opt,name=schoolYear,proto3" json:"schoolYear,omitempty"`
	// 学期，枚举：第一学期 | 第二学期
	Semester string `protobuf:"bytes,2,opt,name=semester,proto3" json:"semester,omitempty"`
}

func (x *SemesterRequest) Reset() {
	*x = SemesterRequest{}
	mi := &file_campusapis_staff_v1_campus_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SemesterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SemesterRequest) ProtoMessage() {}

func (x *SemesterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_campusapis_staff_v1_campus_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SemesterRequest.ProtoReflect.Descriptor instead.
func (*SemesterRequest) Descriptor() ([]byte, []int) {
	return file_campusapis_staff_v1_campus_proto_rawDescGZIP(), []int{8}
}

func (x *SemesterRequest) GetSchoolYear() string {
	if x != nil {
		return x.SchoolYear
	}
	return ""
}

func (x *SemesterRequest) GetSemester() string {
	if x != nil {
		return x.Semester
	}
	return ""
}

// GetStudentInfoResponse 查询学生信息返回体
type GetStudentInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error int32        `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Msg   string       `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data  *StudentInfo `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetStudentInfoResponse) Reset() {
	*x = GetStudentInfoResponse{}
	mi := &file_campusapis_staff_v1_campus_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetStudentInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStudentInfoResponse) ProtoMessage() {}

func (x *GetStudentInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_campusapis_staff_v1_campus_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStudentInfoResponse.ProtoReflect.Descriptor instead.
func (*GetStudentInfoResponse) Descriptor() ([]byte, []int) {
	return file_campusapis_staff_v1_campus_proto_rawDescGZIP(), []int{9}
}

func (x *GetStudentInfoResponse) GetError() int32 {
	if x != nil {
		return x.Error
	}
	return 0
}

func (x *GetStudentInfoResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetStudentInfoResponse) GetData() *StudentInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type StudentInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 学号
	StaffId string `protobuf:"bytes,1,opt,name=staffId,proto3" json:"staffId,omitempty"`
	// 学生姓名
	StaffName string `protobuf:"bytes,2,opt,name=staffName,proto3" json:"staffName,omitempty"`
	// 学生班级号
	ClassId string `protobuf:"bytes,3,opt,name=classId,proto3" json:"classId,omitempty"`
	// 学生学院编号
	UnitId string `protobuf:"bytes,4,opt,name=unitId,proto3" json:"unitId,omitempty"`
	// 学生学院名称
	UnitName string `protobuf:"bytes,5,opt,name=unitName,proto3" json:"unitName,omitempty"`
	// 学生专业编号
	MajorId string `protobuf:"bytes,6,opt,name=majorId,proto3" json:"majorId,omitempty"`
	// 学生专业名称
	MajorName string `protobuf:"bytes,7,opt,name=majorName,proto3" json:"majorName,omitempty"`
	// 学生辅导员工号
	TeacherId string `protobuf:"bytes,8,opt,name=teacherId,proto3" json:"teacherId,omitempty"`
	// 学生辅导员姓名
	TeacherName string `protobuf:"bytes,9,opt,name=teacherName,proto3" json:"teacherName,omitempty"`
}

func (x *StudentInfo) Reset() {
	*x = StudentInfo{}
	mi := &file_campusapis_staff_v1_campus_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StudentInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StudentInfo) ProtoMessage() {}

func (x *StudentInfo) ProtoReflect() protoreflect.Message {
	mi := &file_campusapis_staff_v1_campus_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StudentInfo.ProtoReflect.Descriptor instead.
func (*StudentInfo) Descriptor() ([]byte, []int) {
	return file_campusapis_staff_v1_campus_proto_rawDescGZIP(), []int{10}
}

func (x *StudentInfo) GetStaffId() string {
	if x != nil {
		return x.StaffId
	}
	return ""
}

func (x *StudentInfo) GetStaffName() string {
	if x != nil {
		return x.StaffName
	}
	return ""
}

func (x *StudentInfo) GetClassId() string {
	if x != nil {
		return x.ClassId
	}
	return ""
}

func (x *StudentInfo) GetUnitId() string {
	if x != nil {
		return x.UnitId
	}
	return ""
}

func (x *StudentInfo) GetUnitName() string {
	if x != nil {
		return x.UnitName
	}
	return ""
}

func (x *StudentInfo) GetMajorId() string {
	if x != nil {
		return x.MajorId
	}
	return ""
}

func (x *StudentInfo) GetMajorName() string {
	if x != nil {
		return x.MajorName
	}
	return ""
}

func (x *StudentInfo) GetTeacherId() string {
	if x != nil {
		return x.TeacherId
	}
	return ""
}

func (x *StudentInfo) GetTeacherName() string {
	if x != nil {
		return x.TeacherName
	}
	return ""
}

// 查询学生学籍状态返回体
type GetStudentSchoolRollStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error int32                    `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Msg   string                   `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data  *StudentSchoolRollStatus `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetStudentSchoolRollStatusResponse) Reset() {
	*x = GetStudentSchoolRollStatusResponse{}
	mi := &file_campusapis_staff_v1_campus_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetStudentSchoolRollStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStudentSchoolRollStatusResponse) ProtoMessage() {}

func (x *GetStudentSchoolRollStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_campusapis_staff_v1_campus_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStudentSchoolRollStatusResponse.ProtoReflect.Descriptor instead.
func (*GetStudentSchoolRollStatusResponse) Descriptor() ([]byte, []int) {
	return file_campusapis_staff_v1_campus_proto_rawDescGZIP(), []int{11}
}

func (x *GetStudentSchoolRollStatusResponse) GetError() int32 {
	if x != nil {
		return x.Error
	}
	return 0
}

func (x *GetStudentSchoolRollStatusResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetStudentSchoolRollStatusResponse) GetData() *StudentSchoolRollStatus {
	if x != nil {
		return x.Data
	}
	return nil
}

// 学生学籍状态
type StudentSchoolRollStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 学号
	StaffId string `protobuf:"bytes,1,opt,name=staffId,proto3" json:"staffId,omitempty"`
	// 学生姓名
	StaffName string `protobuf:"bytes,2,opt,name=staffName,proto3" json:"staffName,omitempty"`
	// 学籍状态代码
	StatusCode string `protobuf:"bytes,3,opt,name=statusCode,proto3" json:"statusCode,omitempty"`
	// 学籍状态中文描述
	StatusDesc string `protobuf:"bytes,4,opt,name=statusDesc,proto3" json:"statusDesc,omitempty"`
}

func (x *StudentSchoolRollStatus) Reset() {
	*x = StudentSchoolRollStatus{}
	mi := &file_campusapis_staff_v1_campus_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StudentSchoolRollStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StudentSchoolRollStatus) ProtoMessage() {}

func (x *StudentSchoolRollStatus) ProtoReflect() protoreflect.Message {
	mi := &file_campusapis_staff_v1_campus_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StudentSchoolRollStatus.ProtoReflect.Descriptor instead.
func (*StudentSchoolRollStatus) Descriptor() ([]byte, []int) {
	return file_campusapis_staff_v1_campus_proto_rawDescGZIP(), []int{12}
}

func (x *StudentSchoolRollStatus) GetStaffId() string {
	if x != nil {
		return x.StaffId
	}
	return ""
}

func (x *StudentSchoolRollStatus) GetStaffName() string {
	if x != nil {
		return x.StaffName
	}
	return ""
}

func (x *StudentSchoolRollStatus) GetStatusCode() string {
	if x != nil {
		return x.StatusCode
	}
	return ""
}

func (x *StudentSchoolRollStatus) GetStatusDesc() string {
	if x != nil {
		return x.StatusDesc
	}
	return ""
}

// 查询贫困生信息返回体
type GetStudentNeedyInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error int32             `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Msg   string            `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data  *StudentNeedyInfo `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetStudentNeedyInfoResponse) Reset() {
	*x = GetStudentNeedyInfoResponse{}
	mi := &file_campusapis_staff_v1_campus_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetStudentNeedyInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStudentNeedyInfoResponse) ProtoMessage() {}

func (x *GetStudentNeedyInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_campusapis_staff_v1_campus_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStudentNeedyInfoResponse.ProtoReflect.Descriptor instead.
func (*GetStudentNeedyInfoResponse) Descriptor() ([]byte, []int) {
	return file_campusapis_staff_v1_campus_proto_rawDescGZIP(), []int{13}
}

func (x *GetStudentNeedyInfoResponse) GetError() int32 {
	if x != nil {
		return x.Error
	}
	return 0
}

func (x *GetStudentNeedyInfoResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetStudentNeedyInfoResponse) GetData() *StudentNeedyInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

// 贫困生信息
type StudentNeedyInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 学工号
	StaffId string `protobuf:"bytes,1,opt,name=staffId,proto3" json:"staffId,omitempty"`
	// 姓名
	StaffName string `protobuf:"bytes,2,opt,name=staffName,proto3" json:"staffName,omitempty"`
	// 性别，枚举及含义：1->男 | 2->女
	Sex int32 `protobuf:"varint,3,opt,name=sex,proto3" json:"sex,omitempty"`
	// 是否贫困生
	NeedyStudent bool `protobuf:"varint,4,opt,name=needyStudent,proto3" json:"needyStudent,omitempty"`
	// 每学年贫困详情
	Items []*StudentNeedyInfo_Nested `protobuf:"bytes,5,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *StudentNeedyInfo) Reset() {
	*x = StudentNeedyInfo{}
	mi := &file_campusapis_staff_v1_campus_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StudentNeedyInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StudentNeedyInfo) ProtoMessage() {}

func (x *StudentNeedyInfo) ProtoReflect() protoreflect.Message {
	mi := &file_campusapis_staff_v1_campus_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StudentNeedyInfo.ProtoReflect.Descriptor instead.
func (*StudentNeedyInfo) Descriptor() ([]byte, []int) {
	return file_campusapis_staff_v1_campus_proto_rawDescGZIP(), []int{14}
}

func (x *StudentNeedyInfo) GetStaffId() string {
	if x != nil {
		return x.StaffId
	}
	return ""
}

func (x *StudentNeedyInfo) GetStaffName() string {
	if x != nil {
		return x.StaffName
	}
	return ""
}

func (x *StudentNeedyInfo) GetSex() int32 {
	if x != nil {
		return x.Sex
	}
	return 0
}

func (x *StudentNeedyInfo) GetNeedyStudent() bool {
	if x != nil {
		return x.NeedyStudent
	}
	return false
}

func (x *StudentNeedyInfo) GetItems() []*StudentNeedyInfo_Nested {
	if x != nil {
		return x.Items
	}
	return nil
}

// 查询学生寝室信息返回体
type GetStudentDormInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error int32     `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Msg   string    `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data  *DormInfo `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetStudentDormInfoResponse) Reset() {
	*x = GetStudentDormInfoResponse{}
	mi := &file_campusapis_staff_v1_campus_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetStudentDormInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStudentDormInfoResponse) ProtoMessage() {}

func (x *GetStudentDormInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_campusapis_staff_v1_campus_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStudentDormInfoResponse.ProtoReflect.Descriptor instead.
func (*GetStudentDormInfoResponse) Descriptor() ([]byte, []int) {
	return file_campusapis_staff_v1_campus_proto_rawDescGZIP(), []int{15}
}

func (x *GetStudentDormInfoResponse) GetError() int32 {
	if x != nil {
		return x.Error
	}
	return 0
}

func (x *GetStudentDormInfoResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetStudentDormInfoResponse) GetData() *DormInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type DormInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 学工号
	StaffId string `protobuf:"bytes,1,opt,name=staffId,proto3" json:"staffId,omitempty"`
	// 楼号
	Building string `protobuf:"bytes,2,opt,name=building,proto3" json:"building,omitempty"`
	// 寝室号
	Room string `protobuf:"bytes,3,opt,name=room,proto3" json:"room,omitempty"`
}

func (x *DormInfo) Reset() {
	*x = DormInfo{}
	mi := &file_campusapis_staff_v1_campus_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DormInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DormInfo) ProtoMessage() {}

func (x *DormInfo) ProtoReflect() protoreflect.Message {
	mi := &file_campusapis_staff_v1_campus_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DormInfo.ProtoReflect.Descriptor instead.
func (*DormInfo) Descriptor() ([]byte, []int) {
	return file_campusapis_staff_v1_campus_proto_rawDescGZIP(), []int{16}
}

func (x *DormInfo) GetStaffId() string {
	if x != nil {
		return x.StaffId
	}
	return ""
}

func (x *DormInfo) GetBuilding() string {
	if x != nil {
		return x.Building
	}
	return ""
}

func (x *DormInfo) GetRoom() string {
	if x != nil {
		return x.Room
	}
	return ""
}

// GetStudentBirthdayInfoResponse 学生生日查询返回体
type GetStudentBirthdayInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error int32                `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Msg   string               `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data  *StudentBirthdayInfo `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetStudentBirthdayInfoResponse) Reset() {
	*x = GetStudentBirthdayInfoResponse{}
	mi := &file_campusapis_staff_v1_campus_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetStudentBirthdayInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStudentBirthdayInfoResponse) ProtoMessage() {}

func (x *GetStudentBirthdayInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_campusapis_staff_v1_campus_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStudentBirthdayInfoResponse.ProtoReflect.Descriptor instead.
func (*GetStudentBirthdayInfoResponse) Descriptor() ([]byte, []int) {
	return file_campusapis_staff_v1_campus_proto_rawDescGZIP(), []int{17}
}

func (x *GetStudentBirthdayInfoResponse) GetError() int32 {
	if x != nil {
		return x.Error
	}
	return 0
}

func (x *GetStudentBirthdayInfoResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetStudentBirthdayInfoResponse) GetData() *StudentBirthdayInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

// 学生生日信息
type StudentBirthdayInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 学工号
	StaffId string `protobuf:"bytes,1,opt,name=staffId,proto3" json:"staffId,omitempty"`
	// 姓名
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// 生日
	Birthday string `protobuf:"bytes,3,opt,name=birthday,proto3" json:"birthday,omitempty"`
}

func (x *StudentBirthdayInfo) Reset() {
	*x = StudentBirthdayInfo{}
	mi := &file_campusapis_staff_v1_campus_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StudentBirthdayInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StudentBirthdayInfo) ProtoMessage() {}

func (x *StudentBirthdayInfo) ProtoReflect() protoreflect.Message {
	mi := &file_campusapis_staff_v1_campus_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StudentBirthdayInfo.ProtoReflect.Descriptor instead.
func (*StudentBirthdayInfo) Descriptor() ([]byte, []int) {
	return file_campusapis_staff_v1_campus_proto_rawDescGZIP(), []int{18}
}

func (x *StudentBirthdayInfo) GetStaffId() string {
	if x != nil {
		return x.StaffId
	}
	return ""
}

func (x *StudentBirthdayInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StudentBirthdayInfo) GetBirthday() string {
	if x != nil {
		return x.Birthday
	}
	return ""
}

// 查询某天生日所有人员-请求关键字
type GetStudentBirthdaysInRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 人员类型
	Type staff.Type `protobuf:"varint,1,opt,name=type,proto3,enum=campusapis.staff.Type" json:"type,omitempty"`
	// 月
	Month int32 `protobuf:"varint,2,opt,name=month,proto3" json:"month,omitempty"`
	// 日
	Day int32 `protobuf:"varint,3,opt,name=day,proto3" json:"day,omitempty"`
}

func (x *GetStudentBirthdaysInRequest) Reset() {
	*x = GetStudentBirthdaysInRequest{}
	mi := &file_campusapis_staff_v1_campus_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetStudentBirthdaysInRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStudentBirthdaysInRequest) ProtoMessage() {}

func (x *GetStudentBirthdaysInRequest) ProtoReflect() protoreflect.Message {
	mi := &file_campusapis_staff_v1_campus_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStudentBirthdaysInRequest.ProtoReflect.Descriptor instead.
func (*GetStudentBirthdaysInRequest) Descriptor() ([]byte, []int) {
	return file_campusapis_staff_v1_campus_proto_rawDescGZIP(), []int{19}
}

func (x *GetStudentBirthdaysInRequest) GetType() staff.Type {
	if x != nil {
		return x.Type
	}
	return staff.Type(0)
}

func (x *GetStudentBirthdaysInRequest) GetMonth() int32 {
	if x != nil {
		return x.Month
	}
	return 0
}

func (x *GetStudentBirthdaysInRequest) GetDay() int32 {
	if x != nil {
		return x.Day
	}
	return 0
}

// GetStudentBirthdaysInResponse 查询某天生日所有人员-返回体
type GetStudentBirthdaysInResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error int32  `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Msg   string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	// 生日详情列表
	Data []*StudentBirthdayInfo `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetStudentBirthdaysInResponse) Reset() {
	*x = GetStudentBirthdaysInResponse{}
	mi := &file_campusapis_staff_v1_campus_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetStudentBirthdaysInResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStudentBirthdaysInResponse) ProtoMessage() {}

func (x *GetStudentBirthdaysInResponse) ProtoReflect() protoreflect.Message {
	mi := &file_campusapis_staff_v1_campus_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStudentBirthdaysInResponse.ProtoReflect.Descriptor instead.
func (*GetStudentBirthdaysInResponse) Descriptor() ([]byte, []int) {
	return file_campusapis_staff_v1_campus_proto_rawDescGZIP(), []int{20}
}

func (x *GetStudentBirthdaysInResponse) GetError() int32 {
	if x != nil {
		return x.Error
	}
	return 0
}

func (x *GetStudentBirthdaysInResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetStudentBirthdaysInResponse) GetData() []*StudentBirthdayInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

// GetStudentRewardsResponse 奖学金查询返回体
type GetStudentRewardsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error int32  `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Msg   string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	// 奖学金列表
	Data []*StudentReward `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetStudentRewardsResponse) Reset() {
	*x = GetStudentRewardsResponse{}
	mi := &file_campusapis_staff_v1_campus_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetStudentRewardsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStudentRewardsResponse) ProtoMessage() {}

func (x *GetStudentRewardsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_campusapis_staff_v1_campus_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStudentRewardsResponse.ProtoReflect.Descriptor instead.
func (*GetStudentRewardsResponse) Descriptor() ([]byte, []int) {
	return file_campusapis_staff_v1_campus_proto_rawDescGZIP(), []int{21}
}

func (x *GetStudentRewardsResponse) GetError() int32 {
	if x != nil {
		return x.Error
	}
	return 0
}

func (x *GetStudentRewardsResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetStudentRewardsResponse) GetData() []*StudentReward {
	if x != nil {
		return x.Data
	}
	return nil
}

// 奖学金信息
type StudentReward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 学工号
	StaffID string `protobuf:"bytes,1,opt,name=staffID,proto3" json:"staffID,omitempty"`
	// 姓名
	StaffName string `protobuf:"bytes,2,opt,name=staffName,proto3" json:"staffName,omitempty"`
	// 奖项名
	RewardName string `protobuf:"bytes,3,opt,name=rewardName,proto3" json:"rewardName,omitempty"`
	// 学年
	SchoolYear string `protobuf:"bytes,4,opt,name=schoolYear,proto3" json:"schoolYear,omitempty"`
	// 学期
	Semester string `protobuf:"bytes,5,opt,name=semester,proto3" json:"semester,omitempty"`
	// 奖项等级
	RewardLevel string `protobuf:"bytes,6,opt,name=rewardLevel,proto3" json:"rewardLevel,omitempty"`
}

func (x *StudentReward) Reset() {
	*x = StudentReward{}
	mi := &file_campusapis_staff_v1_campus_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StudentReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StudentReward) ProtoMessage() {}

func (x *StudentReward) ProtoReflect() protoreflect.Message {
	mi := &file_campusapis_staff_v1_campus_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StudentReward.ProtoReflect.Descriptor instead.
func (*StudentReward) Descriptor() ([]byte, []int) {
	return file_campusapis_staff_v1_campus_proto_rawDescGZIP(), []int{22}
}

func (x *StudentReward) GetStaffID() string {
	if x != nil {
		return x.StaffID
	}
	return ""
}

func (x *StudentReward) GetStaffName() string {
	if x != nil {
		return x.StaffName
	}
	return ""
}

func (x *StudentReward) GetRewardName() string {
	if x != nil {
		return x.RewardName
	}
	return ""
}

func (x *StudentReward) GetSchoolYear() string {
	if x != nil {
		return x.SchoolYear
	}
	return ""
}

func (x *StudentReward) GetSemester() string {
	if x != nil {
		return x.Semester
	}
	return ""
}

func (x *StudentReward) GetRewardLevel() string {
	if x != nil {
		return x.RewardLevel
	}
	return ""
}

// 学生选课查询返回体
type GetStudentCourseSelectionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error int32  `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Msg   string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	// 详情列表
	Data []*StudentCourseSelection `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetStudentCourseSelectionsResponse) Reset() {
	*x = GetStudentCourseSelectionsResponse{}
	mi := &file_campusapis_staff_v1_campus_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetStudentCourseSelectionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStudentCourseSelectionsResponse) ProtoMessage() {}

func (x *GetStudentCourseSelectionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_campusapis_staff_v1_campus_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStudentCourseSelectionsResponse.ProtoReflect.Descriptor instead.
func (*GetStudentCourseSelectionsResponse) Descriptor() ([]byte, []int) {
	return file_campusapis_staff_v1_campus_proto_rawDescGZIP(), []int{23}
}

func (x *GetStudentCourseSelectionsResponse) GetError() int32 {
	if x != nil {
		return x.Error
	}
	return 0
}

func (x *GetStudentCourseSelectionsResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetStudentCourseSelectionsResponse) GetData() []*StudentCourseSelection {
	if x != nil {
		return x.Data
	}
	return nil
}

// 选课详情
type StudentCourseSelection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 学年
	SchoolYear string `protobuf:"bytes,1,opt,name=schoolYear,proto3" json:"schoolYear,omitempty"`
	// 学期
	Semester string `protobuf:"bytes,2,opt,name=semester,proto3" json:"semester,omitempty"`
	// 学号
	StaffID string `protobuf:"bytes,3,opt,name=staffID,proto3" json:"staffID,omitempty"`
	// 姓名
	StaffName string `protobuf:"bytes,4,opt,name=staffName,proto3" json:"staffName,omitempty"`
	// 选课号
	SelectCode string `protobuf:"bytes,5,opt,name=selectCode,proto3" json:"selectCode,omitempty"`
	// 课程中文名
	CourseName string `protobuf:"bytes,6,opt,name=courseName,proto3" json:"courseName,omitempty"`
	// 课程号
	CourseCode string `protobuf:"bytes,7,opt,name=courseCode,proto3" json:"courseCode,omitempty"`
	// 教师工号
	TeacherID string `protobuf:"bytes,8,opt,name=teacherID,proto3" json:"teacherID,omitempty"`
	// 教师姓名
	TeacherName string `protobuf:"bytes,9,opt,name=teacherName,proto3" json:"teacherName,omitempty"`
	// 上课时间中文描述
	ClassTime string `protobuf:"bytes,10,opt,name=classTime,proto3" json:"classTime,omitempty"`
	// 教室
	ClassRoom string `protobuf:"bytes,11,opt,name=classRoom,proto3" json:"classRoom,omitempty"`
}

func (x *StudentCourseSelection) Reset() {
	*x = StudentCourseSelection{}
	mi := &file_campusapis_staff_v1_campus_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StudentCourseSelection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StudentCourseSelection) ProtoMessage() {}

func (x *StudentCourseSelection) ProtoReflect() protoreflect.Message {
	mi := &file_campusapis_staff_v1_campus_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StudentCourseSelection.ProtoReflect.Descriptor instead.
func (*StudentCourseSelection) Descriptor() ([]byte, []int) {
	return file_campusapis_staff_v1_campus_proto_rawDescGZIP(), []int{24}
}

func (x *StudentCourseSelection) GetSchoolYear() string {
	if x != nil {
		return x.SchoolYear
	}
	return ""
}

func (x *StudentCourseSelection) GetSemester() string {
	if x != nil {
		return x.Semester
	}
	return ""
}

func (x *StudentCourseSelection) GetStaffID() string {
	if x != nil {
		return x.StaffID
	}
	return ""
}

func (x *StudentCourseSelection) GetStaffName() string {
	if x != nil {
		return x.StaffName
	}
	return ""
}

func (x *StudentCourseSelection) GetSelectCode() string {
	if x != nil {
		return x.SelectCode
	}
	return ""
}

func (x *StudentCourseSelection) GetCourseName() string {
	if x != nil {
		return x.CourseName
	}
	return ""
}

func (x *StudentCourseSelection) GetCourseCode() string {
	if x != nil {
		return x.CourseCode
	}
	return ""
}

func (x *StudentCourseSelection) GetTeacherID() string {
	if x != nil {
		return x.TeacherID
	}
	return ""
}

func (x *StudentCourseSelection) GetTeacherName() string {
	if x != nil {
		return x.TeacherName
	}
	return ""
}

func (x *StudentCourseSelection) GetClassTime() string {
	if x != nil {
		return x.ClassTime
	}
	return ""
}

func (x *StudentCourseSelection) GetClassRoom() string {
	if x != nil {
		return x.ClassRoom
	}
	return ""
}

// 查询学生成绩返回体
type GetStudentGradeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error int32  `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Msg   string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	// 成绩详情列表
	Data []*StudentGrade `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetStudentGradeResponse) Reset() {
	*x = GetStudentGradeResponse{}
	mi := &file_campusapis_staff_v1_campus_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetStudentGradeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStudentGradeResponse) ProtoMessage() {}

func (x *GetStudentGradeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_campusapis_staff_v1_campus_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStudentGradeResponse.ProtoReflect.Descriptor instead.
func (*GetStudentGradeResponse) Descriptor() ([]byte, []int) {
	return file_campusapis_staff_v1_campus_proto_rawDescGZIP(), []int{25}
}

func (x *GetStudentGradeResponse) GetError() int32 {
	if x != nil {
		return x.Error
	}
	return 0
}

func (x *GetStudentGradeResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetStudentGradeResponse) GetData() []*StudentGrade {
	if x != nil {
		return x.Data
	}
	return nil
}

// 成绩详情
type StudentGrade struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 学年
	SchoolYear string `protobuf:"bytes,1,opt,name=schoolYear,proto3" json:"schoolYear,omitempty"`
	// 学期
	Semester string `protobuf:"bytes,2,opt,name=semester,proto3" json:"semester,omitempty"`
	// 选课号
	SelectCode string `protobuf:"bytes,3,opt,name=selectCode,proto3" json:"selectCode,omitempty"`
	// 最后分数
	Score string `protobuf:"bytes,4,opt,name=score,proto3" json:"score,omitempty"`
	// 平时分
	ScoreDaily string `protobuf:"bytes,5,opt,name=scoreDaily,proto3" json:"scoreDaily,omitempty"`
	// 期中分数
	ScoreMidTerm string `protobuf:"bytes,6,opt,name=scoreMidTerm,proto3" json:"scoreMidTerm,omitempty"`
	// 期末分数
	ScoreFinal string `protobuf:"bytes,7,opt,name=scoreFinal,proto3" json:"scoreFinal,omitempty"`
	// 补考分数
	ScoreSubstitute string `protobuf:"bytes,8,opt,name=scoreSubstitute,proto3" json:"scoreSubstitute,omitempty"`
	// 实验分数
	ScorePractice string `protobuf:"bytes,9,opt,name=scorePractice,proto3" json:"scorePractice,omitempty"`
	// 课程号
	CourseCode string `protobuf:"bytes,10,opt,name=courseCode,proto3" json:"courseCode,omitempty"`
	// 课程名
	Course string `protobuf:"bytes,11,opt,name=course,proto3" json:"course,omitempty"`
	// 学号
	StaffId string `protobuf:"bytes,12,opt,name=staffId,proto3" json:"staffId,omitempty"`
	// 姓名
	StaffName string `protobuf:"bytes,13,opt,name=staffName,proto3" json:"staffName,omitempty"`
	// 学分
	Credit string `protobuf:"bytes,14,opt,name=credit,proto3" json:"credit,omitempty"`
	// GPA
	GPA string `protobuf:"bytes,15,opt,name=GPA,proto3" json:"GPA,omitempty"`
}

func (x *StudentGrade) Reset() {
	*x = StudentGrade{}
	mi := &file_campusapis_staff_v1_campus_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StudentGrade) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StudentGrade) ProtoMessage() {}

func (x *StudentGrade) ProtoReflect() protoreflect.Message {
	mi := &file_campusapis_staff_v1_campus_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StudentGrade.ProtoReflect.Descriptor instead.
func (*StudentGrade) Descriptor() ([]byte, []int) {
	return file_campusapis_staff_v1_campus_proto_rawDescGZIP(), []int{26}
}

func (x *StudentGrade) GetSchoolYear() string {
	if x != nil {
		return x.SchoolYear
	}
	return ""
}

func (x *StudentGrade) GetSemester() string {
	if x != nil {
		return x.Semester
	}
	return ""
}

func (x *StudentGrade) GetSelectCode() string {
	if x != nil {
		return x.SelectCode
	}
	return ""
}

func (x *StudentGrade) GetScore() string {
	if x != nil {
		return x.Score
	}
	return ""
}

func (x *StudentGrade) GetScoreDaily() string {
	if x != nil {
		return x.ScoreDaily
	}
	return ""
}

func (x *StudentGrade) GetScoreMidTerm() string {
	if x != nil {
		return x.ScoreMidTerm
	}
	return ""
}

func (x *StudentGrade) GetScoreFinal() string {
	if x != nil {
		return x.ScoreFinal
	}
	return ""
}

func (x *StudentGrade) GetScoreSubstitute() string {
	if x != nil {
		return x.ScoreSubstitute
	}
	return ""
}

func (x *StudentGrade) GetScorePractice() string {
	if x != nil {
		return x.ScorePractice
	}
	return ""
}

func (x *StudentGrade) GetCourseCode() string {
	if x != nil {
		return x.CourseCode
	}
	return ""
}

func (x *StudentGrade) GetCourse() string {
	if x != nil {
		return x.Course
	}
	return ""
}

func (x *StudentGrade) GetStaffId() string {
	if x != nil {
		return x.StaffId
	}
	return ""
}

func (x *StudentGrade) GetStaffName() string {
	if x != nil {
		return x.StaffName
	}
	return ""
}

func (x *StudentGrade) GetCredit() string {
	if x != nil {
		return x.Credit
	}
	return ""
}

func (x *StudentGrade) GetGPA() string {
	if x != nil {
		return x.GPA
	}
	return ""
}

type GetGlobalStudentGradeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error int32                 `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Msg   string                `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data  []*GlobalStudentGrade `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetGlobalStudentGradeResponse) Reset() {
	*x = GetGlobalStudentGradeResponse{}
	mi := &file_campusapis_staff_v1_campus_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetGlobalStudentGradeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGlobalStudentGradeResponse) ProtoMessage() {}

func (x *GetGlobalStudentGradeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_campusapis_staff_v1_campus_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGlobalStudentGradeResponse.ProtoReflect.Descriptor instead.
func (*GetGlobalStudentGradeResponse) Descriptor() ([]byte, []int) {
	return file_campusapis_staff_v1_campus_proto_rawDescGZIP(), []int{27}
}

func (x *GetGlobalStudentGradeResponse) GetError() int32 {
	if x != nil {
		return x.Error
	}
	return 0
}

func (x *GetGlobalStudentGradeResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetGlobalStudentGradeResponse) GetData() []*GlobalStudentGrade {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetDailyExamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error int32  `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Msg   string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	// 考试详情列表
	Data []*StudentExam `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetDailyExamResponse) Reset() {
	*x = GetDailyExamResponse{}
	mi := &file_campusapis_staff_v1_campus_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDailyExamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDailyExamResponse) ProtoMessage() {}

func (x *GetDailyExamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_campusapis_staff_v1_campus_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDailyExamResponse.ProtoReflect.Descriptor instead.
func (*GetDailyExamResponse) Descriptor() ([]byte, []int) {
	return file_campusapis_staff_v1_campus_proto_rawDescGZIP(), []int{28}
}

func (x *GetDailyExamResponse) GetError() int32 {
	if x != nil {
		return x.Error
	}
	return 0
}

func (x *GetDailyExamResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetDailyExamResponse) GetData() []*StudentExam {
	if x != nil {
		return x.Data
	}
	return nil
}

// 成绩详情
type GlobalStudentGrade struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 学年
	SchoolYear string `protobuf:"bytes,1,opt,name=schoolYear,proto3" json:"schoolYear,omitempty"`
	// 学期
	Semester string `protobuf:"bytes,2,opt,name=semester,proto3" json:"semester,omitempty"`
	// 课程号
	CourseCode string `protobuf:"bytes,3,opt,name=courseCode,proto3" json:"courseCode,omitempty"`
	// 课程名
	Course string `protobuf:"bytes,4,opt,name=course,proto3" json:"course,omitempty"`
	// 学号
	StaffId string `protobuf:"bytes,5,opt,name=staffId,proto3" json:"staffId,omitempty"`
	// 总成绩
	Score string `protobuf:"bytes,6,opt,name=score,proto3" json:"score,omitempty"`
	// 操作时间
	UpdateAt string `protobuf:"bytes,7,opt,name=updateAt,proto3" json:"updateAt,omitempty"`
}

func (x *GlobalStudentGrade) Reset() {
	*x = GlobalStudentGrade{}
	mi := &file_campusapis_staff_v1_campus_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GlobalStudentGrade) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GlobalStudentGrade) ProtoMessage() {}

func (x *GlobalStudentGrade) ProtoReflect() protoreflect.Message {
	mi := &file_campusapis_staff_v1_campus_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GlobalStudentGrade.ProtoReflect.Descriptor instead.
func (*GlobalStudentGrade) Descriptor() ([]byte, []int) {
	return file_campusapis_staff_v1_campus_proto_rawDescGZIP(), []int{29}
}

func (x *GlobalStudentGrade) GetSchoolYear() string {
	if x != nil {
		return x.SchoolYear
	}
	return ""
}

func (x *GlobalStudentGrade) GetSemester() string {
	if x != nil {
		return x.Semester
	}
	return ""
}

func (x *GlobalStudentGrade) GetCourseCode() string {
	if x != nil {
		return x.CourseCode
	}
	return ""
}

func (x *GlobalStudentGrade) GetCourse() string {
	if x != nil {
		return x.Course
	}
	return ""
}

func (x *GlobalStudentGrade) GetStaffId() string {
	if x != nil {
		return x.StaffId
	}
	return ""
}

func (x *GlobalStudentGrade) GetScore() string {
	if x != nil {
		return x.Score
	}
	return ""
}

func (x *GlobalStudentGrade) GetUpdateAt() string {
	if x != nil {
		return x.UpdateAt
	}
	return ""
}

// 查询学生考试返回体
type GetStudentExamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error int32  `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Msg   string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	// 考试详情列表
	Data []*StudentExam `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetStudentExamResponse) Reset() {
	*x = GetStudentExamResponse{}
	mi := &file_campusapis_staff_v1_campus_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetStudentExamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStudentExamResponse) ProtoMessage() {}

func (x *GetStudentExamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_campusapis_staff_v1_campus_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStudentExamResponse.ProtoReflect.Descriptor instead.
func (*GetStudentExamResponse) Descriptor() ([]byte, []int) {
	return file_campusapis_staff_v1_campus_proto_rawDescGZIP(), []int{30}
}

func (x *GetStudentExamResponse) GetError() int32 {
	if x != nil {
		return x.Error
	}
	return 0
}

func (x *GetStudentExamResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetStudentExamResponse) GetData() []*StudentExam {
	if x != nil {
		return x.Data
	}
	return nil
}

// 考试详情
type StudentExam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 教室
	Classroom string `protobuf:"bytes,1,opt,name=classroom,proto3" json:"classroom,omitempty"`
	// 课程
	Course string `protobuf:"bytes,2,opt,name=course,proto3" json:"course,omitempty"`
	// 考试时间
	ExamTime string `protobuf:"bytes,3,opt,name=examTime,proto3" json:"examTime,omitempty"`
	// 考试类型
	ExamType string `protobuf:"bytes,4,opt,name=examType,proto3" json:"examType,omitempty"`
	// 学年
	SchoolYear string `protobuf:"bytes,5,opt,name=schoolYear,proto3" json:"schoolYear,omitempty"`
	// 学期
	Semester string `protobuf:"bytes,6,opt,name=semester,proto3" json:"semester,omitempty"`
	// 座位号
	Seat string `protobuf:"bytes,7,opt,name=seat,proto3" json:"seat,omitempty"`
	// 课程号
	SelectCode string `protobuf:"bytes,8,opt,name=selectCode,proto3" json:"selectCode,omitempty"`
	// 学号
	StaffId string `protobuf:"bytes,9,opt,name=staffId,proto3" json:"staffId,omitempty"`
}

func (x *StudentExam) Reset() {
	*x = StudentExam{}
	mi := &file_campusapis_staff_v1_campus_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StudentExam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StudentExam) ProtoMessage() {}

func (x *StudentExam) ProtoReflect() protoreflect.Message {
	mi := &file_campusapis_staff_v1_campus_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StudentExam.ProtoReflect.Descriptor instead.
func (*StudentExam) Descriptor() ([]byte, []int) {
	return file_campusapis_staff_v1_campus_proto_rawDescGZIP(), []int{31}
}

func (x *StudentExam) GetClassroom() string {
	if x != nil {
		return x.Classroom
	}
	return ""
}

func (x *StudentExam) GetCourse() string {
	if x != nil {
		return x.Course
	}
	return ""
}

func (x *StudentExam) GetExamTime() string {
	if x != nil {
		return x.ExamTime
	}
	return ""
}

func (x *StudentExam) GetExamType() string {
	if x != nil {
		return x.ExamType
	}
	return ""
}

func (x *StudentExam) GetSchoolYear() string {
	if x != nil {
		return x.SchoolYear
	}
	return ""
}

func (x *StudentExam) GetSemester() string {
	if x != nil {
		return x.Semester
	}
	return ""
}

func (x *StudentExam) GetSeat() string {
	if x != nil {
		return x.Seat
	}
	return ""
}

func (x *StudentExam) GetSelectCode() string {
	if x != nil {
		return x.SelectCode
	}
	return ""
}

func (x *StudentExam) GetStaffId() string {
	if x != nil {
		return x.StaffId
	}
	return ""
}

// 查询学生GPA返回体
type GetStudentGPAResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error int32  `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Msg   string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	// 绩点详情
	Data *StudentGPA `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetStudentGPAResponse) Reset() {
	*x = GetStudentGPAResponse{}
	mi := &file_campusapis_staff_v1_campus_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetStudentGPAResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStudentGPAResponse) ProtoMessage() {}

func (x *GetStudentGPAResponse) ProtoReflect() protoreflect.Message {
	mi := &file_campusapis_staff_v1_campus_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStudentGPAResponse.ProtoReflect.Descriptor instead.
func (*GetStudentGPAResponse) Descriptor() ([]byte, []int) {
	return file_campusapis_staff_v1_campus_proto_rawDescGZIP(), []int{32}
}

func (x *GetStudentGPAResponse) GetError() int32 {
	if x != nil {
		return x.Error
	}
	return 0
}

func (x *GetStudentGPAResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetStudentGPAResponse) GetData() *StudentGPA {
	if x != nil {
		return x.Data
	}
	return nil
}

// 考试详情
type StudentGPA struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 每学期绩点
	PerSemester []*GPAPerSemester `protobuf:"bytes,1,rep,name=perSemester,proto3" json:"perSemester,omitempty"`
	// 总绩点
	Total *GPATotal `protobuf:"bytes,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *StudentGPA) Reset() {
	*x = StudentGPA{}
	mi := &file_campusapis_staff_v1_campus_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StudentGPA) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StudentGPA) ProtoMessage() {}

func (x *StudentGPA) ProtoReflect() protoreflect.Message {
	mi := &file_campusapis_staff_v1_campus_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StudentGPA.ProtoReflect.Descriptor instead.
func (*StudentGPA) Descriptor() ([]byte, []int) {
	return file_campusapis_staff_v1_campus_proto_rawDescGZIP(), []int{33}
}

func (x *StudentGPA) GetPerSemester() []*GPAPerSemester {
	if x != nil {
		return x.PerSemester
	}
	return nil
}

func (x *StudentGPA) GetTotal() *GPATotal {
	if x != nil {
		return x.Total
	}
	return nil
}

type GPAPerSemester struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 学年
	SchoolYear string `protobuf:"bytes,1,opt,name=schoolYear,proto3" json:"schoolYear,omitempty"`
	// 学期
	Semester string `protobuf:"bytes,2,opt,name=semester,proto3" json:"semester,omitempty"`
	// 绩点
	GradePointAverage string `protobuf:"bytes,3,opt,name=gradePointAverage,proto3" json:"gradePointAverage,omitempty"`
	// 学号
	StaffID string `protobuf:"bytes,4,opt,name=staffID,proto3" json:"staffID,omitempty"`
}

func (x *GPAPerSemester) Reset() {
	*x = GPAPerSemester{}
	mi := &file_campusapis_staff_v1_campus_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GPAPerSemester) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GPAPerSemester) ProtoMessage() {}

func (x *GPAPerSemester) ProtoReflect() protoreflect.Message {
	mi := &file_campusapis_staff_v1_campus_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GPAPerSemester.ProtoReflect.Descriptor instead.
func (*GPAPerSemester) Descriptor() ([]byte, []int) {
	return file_campusapis_staff_v1_campus_proto_rawDescGZIP(), []int{34}
}

func (x *GPAPerSemester) GetSchoolYear() string {
	if x != nil {
		return x.SchoolYear
	}
	return ""
}

func (x *GPAPerSemester) GetSemester() string {
	if x != nil {
		return x.Semester
	}
	return ""
}

func (x *GPAPerSemester) GetGradePointAverage() string {
	if x != nil {
		return x.GradePointAverage
	}
	return ""
}

func (x *GPAPerSemester) GetStaffID() string {
	if x != nil {
		return x.StaffID
	}
	return ""
}

type GPATotal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 绩点
	GradePointAverage string `protobuf:"bytes,1,opt,name=gradePointAverage,proto3" json:"gradePointAverage,omitempty"`
	// 学号
	StaffID string `protobuf:"bytes,2,opt,name=staffID,proto3" json:"staffID,omitempty"`
}

func (x *GPATotal) Reset() {
	*x = GPATotal{}
	mi := &file_campusapis_staff_v1_campus_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GPATotal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GPATotal) ProtoMessage() {}

func (x *GPATotal) ProtoReflect() protoreflect.Message {
	mi := &file_campusapis_staff_v1_campus_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GPATotal.ProtoReflect.Descriptor instead.
func (*GPATotal) Descriptor() ([]byte, []int) {
	return file_campusapis_staff_v1_campus_proto_rawDescGZIP(), []int{35}
}

func (x *GPATotal) GetGradePointAverage() string {
	if x != nil {
		return x.GradePointAverage
	}
	return ""
}

func (x *GPATotal) GetStaffID() string {
	if x != nil {
		return x.StaffID
	}
	return ""
}

// 推送学生门禁通行信息-请求关键字
type PostStudentGateAccessRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 学工号（重要）
	StaffId string `protobuf:"bytes,1,opt,name=staffId,proto3" json:"staffId,omitempty"`
	// 请假类型，数字，一个数字对应一大类请假，枚举及含义：
	// 0->临时请假 | 1->当天假 | 2->单位实习（目前没用）|
	// 3->特殊（目前没用） | 4->身份码（目前没用） |
	// 5->离校 | 6->按周（目前没用） | 7->按月（目前没用）
	DayOffType string `protobuf:"bytes,2,opt,name=dayOffType,proto3" json:"dayOffType,omitempty"`
	// 请假类型，中文名
	DayOffName string `protobuf:"bytes,3,opt,name=dayOffName,proto3" json:"dayOffName,omitempty"`
	// 开始时间（重要）
	TimeStart string `protobuf:"bytes,4,opt,name=timeStart,proto3" json:"timeStart,omitempty"`
	// 结束时间（重要）
	TimeEnd string `protobuf:"bytes,5,opt,name=timeEnd,proto3" json:"timeEnd,omitempty"`
	// 假条 uid
	Uid string `protobuf:"bytes,6,opt,name=uid,proto3" json:"uid,omitempty"`
	// 闸机牌子（重要），枚举及含义：hikvision -> 海康 | uniview -> 宇视
	Target string `protobuf:"bytes,7,opt,name=Target,proto3" json:"Target,omitempty"`
}

func (x *PostStudentGateAccessRequest) Reset() {
	*x = PostStudentGateAccessRequest{}
	mi := &file_campusapis_staff_v1_campus_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PostStudentGateAccessRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostStudentGateAccessRequest) ProtoMessage() {}

func (x *PostStudentGateAccessRequest) ProtoReflect() protoreflect.Message {
	mi := &file_campusapis_staff_v1_campus_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostStudentGateAccessRequest.ProtoReflect.Descriptor instead.
func (*PostStudentGateAccessRequest) Descriptor() ([]byte, []int) {
	return file_campusapis_staff_v1_campus_proto_rawDescGZIP(), []int{36}
}

func (x *PostStudentGateAccessRequest) GetStaffId() string {
	if x != nil {
		return x.StaffId
	}
	return ""
}

func (x *PostStudentGateAccessRequest) GetDayOffType() string {
	if x != nil {
		return x.DayOffType
	}
	return ""
}

func (x *PostStudentGateAccessRequest) GetDayOffName() string {
	if x != nil {
		return x.DayOffName
	}
	return ""
}

func (x *PostStudentGateAccessRequest) GetTimeStart() string {
	if x != nil {
		return x.TimeStart
	}
	return ""
}

func (x *PostStudentGateAccessRequest) GetTimeEnd() string {
	if x != nil {
		return x.TimeEnd
	}
	return ""
}

func (x *PostStudentGateAccessRequest) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *PostStudentGateAccessRequest) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

// PostStudentGateAccessResponse  推送学生门禁通行信息
type PostStudentGateAccessResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error int32                               `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Msg   string                              `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data  *PostStudentGateAccessResponse_Data `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *PostStudentGateAccessResponse) Reset() {
	*x = PostStudentGateAccessResponse{}
	mi := &file_campusapis_staff_v1_campus_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PostStudentGateAccessResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostStudentGateAccessResponse) ProtoMessage() {}

func (x *PostStudentGateAccessResponse) ProtoReflect() protoreflect.Message {
	mi := &file_campusapis_staff_v1_campus_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostStudentGateAccessResponse.ProtoReflect.Descriptor instead.
func (*PostStudentGateAccessResponse) Descriptor() ([]byte, []int) {
	return file_campusapis_staff_v1_campus_proto_rawDescGZIP(), []int{37}
}

func (x *PostStudentGateAccessResponse) GetError() int32 {
	if x != nil {
		return x.Error
	}
	return 0
}

func (x *PostStudentGateAccessResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *PostStudentGateAccessResponse) GetData() *PostStudentGateAccessResponse_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

// 留校生信息查询-返回体
type GetStudentStaySchoolInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error int32                  `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Msg   string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data  *StudentStaySchoolInfo `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetStudentStaySchoolInfoResponse) Reset() {
	*x = GetStudentStaySchoolInfoResponse{}
	mi := &file_campusapis_staff_v1_campus_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetStudentStaySchoolInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStudentStaySchoolInfoResponse) ProtoMessage() {}

func (x *GetStudentStaySchoolInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_campusapis_staff_v1_campus_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStudentStaySchoolInfoResponse.ProtoReflect.Descriptor instead.
func (*GetStudentStaySchoolInfoResponse) Descriptor() ([]byte, []int) {
	return file_campusapis_staff_v1_campus_proto_rawDescGZIP(), []int{38}
}

func (x *GetStudentStaySchoolInfoResponse) GetError() int32 {
	if x != nil {
		return x.Error
	}
	return 0
}

func (x *GetStudentStaySchoolInfoResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetStudentStaySchoolInfoResponse) GetData() *StudentStaySchoolInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

// 留校生信息
type StudentStaySchoolInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 学工号
	StaffId string `protobuf:"bytes,1,opt,name=staffId,proto3" json:"staffId,omitempty"`
	// 姓名
	StaffName string `protobuf:"bytes,2,opt,name=staffName,proto3" json:"staffName,omitempty"`
	// 报告日期
	ReportTime string `protobuf:"bytes,3,opt,name=reportTime,proto3" json:"reportTime,omitempty"`
	// 原因
	Reason string `protobuf:"bytes,4,opt,name=reason,proto3" json:"reason,omitempty"`
	// 时间段1-开始
	Time1Start string `protobuf:"bytes,5,opt,name=time1Start,proto3" json:"time1Start,omitempty"`
	// 时间段1-结束
	Time1End string `protobuf:"bytes,6,opt,name=time1End,proto3" json:"time1End,omitempty"`
	// 时间段2-开始
	Time2Start string `protobuf:"bytes,7,opt,name=time2Start,proto3" json:"time2Start,omitempty"`
	// 时间段2-结束
	Time2End string `protobuf:"bytes,8,opt,name=time2End,proto3" json:"time2End,omitempty"`
	// 辅导员审批状态，枚举及含义：0->未审批 | 1->审批通过 | 2->拒绝
	TeacherStatus string `protobuf:"bytes,9,opt,name=teacherStatus,proto3" json:"teacherStatus,omitempty"`
	// 辅导员审批备注
	TeacherRemark string `protobuf:"bytes,10,opt,name=teacherRemark,proto3" json:"teacherRemark,omitempty"`
	// 辅导员审批时间
	TeacherReviewTime string `protobuf:"bytes,11,opt,name=teacherReviewTime,proto3" json:"teacherReviewTime,omitempty"`
	// 学院审批状态，枚举及含义：0->未审批 | 1->审批通过 | 2->拒绝
	UnitStatus string `protobuf:"bytes,12,opt,name=unitStatus,proto3" json:"unitStatus,omitempty"`
	// 学院审批备注
	UnitRemark string `protobuf:"bytes,13,opt,name=unitRemark,proto3" json:"unitRemark,omitempty"`
	// 学院审批时间
	UnitReviewTime string `protobuf:"bytes,14,opt,name=unitReviewTime,proto3" json:"unitReviewTime,omitempty"`
	// 撤回状态，枚举及含义：1->未撤回 | 2->已撤回
	CancelStatus string `protobuf:"bytes,15,opt,name=cancelStatus,proto3" json:"cancelStatus,omitempty"`
}

func (x *StudentStaySchoolInfo) Reset() {
	*x = StudentStaySchoolInfo{}
	mi := &file_campusapis_staff_v1_campus_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StudentStaySchoolInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StudentStaySchoolInfo) ProtoMessage() {}

func (x *StudentStaySchoolInfo) ProtoReflect() protoreflect.Message {
	mi := &file_campusapis_staff_v1_campus_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StudentStaySchoolInfo.ProtoReflect.Descriptor instead.
func (*StudentStaySchoolInfo) Descriptor() ([]byte, []int) {
	return file_campusapis_staff_v1_campus_proto_rawDescGZIP(), []int{39}
}

func (x *StudentStaySchoolInfo) GetStaffId() string {
	if x != nil {
		return x.StaffId
	}
	return ""
}

func (x *StudentStaySchoolInfo) GetStaffName() string {
	if x != nil {
		return x.StaffName
	}
	return ""
}

func (x *StudentStaySchoolInfo) GetReportTime() string {
	if x != nil {
		return x.ReportTime
	}
	return ""
}

func (x *StudentStaySchoolInfo) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *StudentStaySchoolInfo) GetTime1Start() string {
	if x != nil {
		return x.Time1Start
	}
	return ""
}

func (x *StudentStaySchoolInfo) GetTime1End() string {
	if x != nil {
		return x.Time1End
	}
	return ""
}

func (x *StudentStaySchoolInfo) GetTime2Start() string {
	if x != nil {
		return x.Time2Start
	}
	return ""
}

func (x *StudentStaySchoolInfo) GetTime2End() string {
	if x != nil {
		return x.Time2End
	}
	return ""
}

func (x *StudentStaySchoolInfo) GetTeacherStatus() string {
	if x != nil {
		return x.TeacherStatus
	}
	return ""
}

func (x *StudentStaySchoolInfo) GetTeacherRemark() string {
	if x != nil {
		return x.TeacherRemark
	}
	return ""
}

func (x *StudentStaySchoolInfo) GetTeacherReviewTime() string {
	if x != nil {
		return x.TeacherReviewTime
	}
	return ""
}

func (x *StudentStaySchoolInfo) GetUnitStatus() string {
	if x != nil {
		return x.UnitStatus
	}
	return ""
}

func (x *StudentStaySchoolInfo) GetUnitRemark() string {
	if x != nil {
		return x.UnitRemark
	}
	return ""
}

func (x *StudentStaySchoolInfo) GetUnitReviewTime() string {
	if x != nil {
		return x.UnitReviewTime
	}
	return ""
}

func (x *StudentStaySchoolInfo) GetCancelStatus() string {
	if x != nil {
		return x.CancelStatus
	}
	return ""
}

type GetFreshmanBaseInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 学号
	StaffId string `protobuf:"bytes,1,opt,name=staffId,proto3" json:"staffId,omitempty"`
	// 录取通知书号或者是准考证号，不同省份并不一样
	OfferId string `protobuf:"bytes,2,opt,name=offerId,proto3" json:"offerId,omitempty"`
	// 身份证号
	IdCardNo string `protobuf:"bytes,3,opt,name=idCardNo,proto3" json:"idCardNo,omitempty"`
}

func (x *GetFreshmanBaseInfoRequest) Reset() {
	*x = GetFreshmanBaseInfoRequest{}
	mi := &file_campusapis_staff_v1_campus_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFreshmanBaseInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFreshmanBaseInfoRequest) ProtoMessage() {}

func (x *GetFreshmanBaseInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_campusapis_staff_v1_campus_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFreshmanBaseInfoRequest.ProtoReflect.Descriptor instead.
func (*GetFreshmanBaseInfoRequest) Descriptor() ([]byte, []int) {
	return file_campusapis_staff_v1_campus_proto_rawDescGZIP(), []int{40}
}

func (x *GetFreshmanBaseInfoRequest) GetStaffId() string {
	if x != nil {
		return x.StaffId
	}
	return ""
}

func (x *GetFreshmanBaseInfoRequest) GetOfferId() string {
	if x != nil {
		return x.OfferId
	}
	return ""
}

func (x *GetFreshmanBaseInfoRequest) GetIdCardNo() string {
	if x != nil {
		return x.IdCardNo
	}
	return ""
}

type GetFreshmanDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 学号
	StaffId string `protobuf:"bytes,1,opt,name=staffId,proto3" json:"staffId,omitempty"`
	// 录取通知书号或者是准考证号，不同省份并不一样
	OfferId string `protobuf:"bytes,2,opt,name=offerId,proto3" json:"offerId,omitempty"`
	// 身份证号
	IdCardNo string `protobuf:"bytes,3,opt,name=idCardNo,proto3" json:"idCardNo,omitempty"`
}

func (x *GetFreshmanDetailRequest) Reset() {
	*x = GetFreshmanDetailRequest{}
	mi := &file_campusapis_staff_v1_campus_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFreshmanDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFreshmanDetailRequest) ProtoMessage() {}

func (x *GetFreshmanDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_campusapis_staff_v1_campus_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFreshmanDetailRequest.ProtoReflect.Descriptor instead.
func (*GetFreshmanDetailRequest) Descriptor() ([]byte, []int) {
	return file_campusapis_staff_v1_campus_proto_rawDescGZIP(), []int{41}
}

func (x *GetFreshmanDetailRequest) GetStaffId() string {
	if x != nil {
		return x.StaffId
	}
	return ""
}

func (x *GetFreshmanDetailRequest) GetOfferId() string {
	if x != nil {
		return x.OfferId
	}
	return ""
}

func (x *GetFreshmanDetailRequest) GetIdCardNo() string {
	if x != nil {
		return x.IdCardNo
	}
	return ""
}

type GetFreshmanRoommatesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 学号
	StaffId string `protobuf:"bytes,1,opt,name=staffId,proto3" json:"staffId,omitempty"`
	// 录取通知书号或者是准考证号，不同省份并不一样
	OfferId string `protobuf:"bytes,2,opt,name=offerId,proto3" json:"offerId,omitempty"`
	// 身份证号
	IdCardNo string `protobuf:"bytes,3,opt,name=idCardNo,proto3" json:"idCardNo,omitempty"`
}

func (x *GetFreshmanRoommatesRequest) Reset() {
	*x = GetFreshmanRoommatesRequest{}
	mi := &file_campusapis_staff_v1_campus_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFreshmanRoommatesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFreshmanRoommatesRequest) ProtoMessage() {}

func (x *GetFreshmanRoommatesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_campusapis_staff_v1_campus_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFreshmanRoommatesRequest.ProtoReflect.Descriptor instead.
func (*GetFreshmanRoommatesRequest) Descriptor() ([]byte, []int) {
	return file_campusapis_staff_v1_campus_proto_rawDescGZIP(), []int{42}
}

func (x *GetFreshmanRoommatesRequest) GetStaffId() string {
	if x != nil {
		return x.StaffId
	}
	return ""
}

func (x *GetFreshmanRoommatesRequest) GetOfferId() string {
	if x != nil {
		return x.OfferId
	}
	return ""
}

func (x *GetFreshmanRoommatesRequest) GetIdCardNo() string {
	if x != nil {
		return x.IdCardNo
	}
	return ""
}

// 新生三要素请求，依次判断（学号）、（录取通知书或准考证号）、（身份证号），要求其中最少两项不为空
// 有鉴权时接受鉴权内学号，忽略请求参数
type FreshmanKeywordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 学号
	StaffId string `protobuf:"bytes,1,opt,name=staffId,proto3" json:"staffId,omitempty"`
	// 录取通知书号或者是准考证号，不同省份并不一样
	OfferId string `protobuf:"bytes,2,opt,name=offerId,proto3" json:"offerId,omitempty"`
	// 身份证号
	IdCardNo string `protobuf:"bytes,3,opt,name=idCardNo,proto3" json:"idCardNo,omitempty"`
}

func (x *FreshmanKeywordRequest) Reset() {
	*x = FreshmanKeywordRequest{}
	mi := &file_campusapis_staff_v1_campus_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FreshmanKeywordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FreshmanKeywordRequest) ProtoMessage() {}

func (x *FreshmanKeywordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_campusapis_staff_v1_campus_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FreshmanKeywordRequest.ProtoReflect.Descriptor instead.
func (*FreshmanKeywordRequest) Descriptor() ([]byte, []int) {
	return file_campusapis_staff_v1_campus_proto_rawDescGZIP(), []int{43}
}

func (x *FreshmanKeywordRequest) GetStaffId() string {
	if x != nil {
		return x.StaffId
	}
	return ""
}

func (x *FreshmanKeywordRequest) GetOfferId() string {
	if x != nil {
		return x.OfferId
	}
	return ""
}

func (x *FreshmanKeywordRequest) GetIdCardNo() string {
	if x != nil {
		return x.IdCardNo
	}
	return ""
}

type GetFreshmanBaseInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error int32             `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Msg   string            `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data  *FreshmanBaseInfo `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetFreshmanBaseInfoResponse) Reset() {
	*x = GetFreshmanBaseInfoResponse{}
	mi := &file_campusapis_staff_v1_campus_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFreshmanBaseInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFreshmanBaseInfoResponse) ProtoMessage() {}

func (x *GetFreshmanBaseInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_campusapis_staff_v1_campus_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFreshmanBaseInfoResponse.ProtoReflect.Descriptor instead.
func (*GetFreshmanBaseInfoResponse) Descriptor() ([]byte, []int) {
	return file_campusapis_staff_v1_campus_proto_rawDescGZIP(), []int{44}
}

func (x *GetFreshmanBaseInfoResponse) GetError() int32 {
	if x != nil {
		return x.Error
	}
	return 0
}

func (x *GetFreshmanBaseInfoResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetFreshmanBaseInfoResponse) GetData() *FreshmanBaseInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

// 新生基本信息
type FreshmanBaseInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 学号
	StaffId string `protobuf:"bytes,1,opt,name=staffId,proto3" json:"staffId,omitempty"`
	// 姓名
	StaffName string `protobuf:"bytes,2,opt,name=staffName,proto3" json:"staffName,omitempty"`
	// 录取通知书号或者是准考证号，不同省份并不一样
	OfferId string `protobuf:"bytes,3,opt,name=offerId,proto3" json:"offerId,omitempty"`
	// 身份证号
	IdCardNo string `protobuf:"bytes,4,opt,name=idCardNo,proto3" json:"idCardNo,omitempty"`
	// 录取时间
	OfferTime string `protobuf:"bytes,5,opt,name=offerTime,proto3" json:"offerTime,omitempty"`
	// 省份
	Province string `protobuf:"bytes,6,opt,name=province,proto3" json:"province,omitempty"`
}

func (x *FreshmanBaseInfo) Reset() {
	*x = FreshmanBaseInfo{}
	mi := &file_campusapis_staff_v1_campus_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FreshmanBaseInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FreshmanBaseInfo) ProtoMessage() {}

func (x *FreshmanBaseInfo) ProtoReflect() protoreflect.Message {
	mi := &file_campusapis_staff_v1_campus_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FreshmanBaseInfo.ProtoReflect.Descriptor instead.
func (*FreshmanBaseInfo) Descriptor() ([]byte, []int) {
	return file_campusapis_staff_v1_campus_proto_rawDescGZIP(), []int{45}
}

func (x *FreshmanBaseInfo) GetStaffId() string {
	if x != nil {
		return x.StaffId
	}
	return ""
}

func (x *FreshmanBaseInfo) GetStaffName() string {
	if x != nil {
		return x.StaffName
	}
	return ""
}

func (x *FreshmanBaseInfo) GetOfferId() string {
	if x != nil {
		return x.OfferId
	}
	return ""
}

func (x *FreshmanBaseInfo) GetIdCardNo() string {
	if x != nil {
		return x.IdCardNo
	}
	return ""
}

func (x *FreshmanBaseInfo) GetOfferTime() string {
	if x != nil {
		return x.OfferTime
	}
	return ""
}

func (x *FreshmanBaseInfo) GetProvince() string {
	if x != nil {
		return x.Province
	}
	return ""
}

type GetFreshmanDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error int32           `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Msg   string          `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data  *FreshmanDetail `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetFreshmanDetailResponse) Reset() {
	*x = GetFreshmanDetailResponse{}
	mi := &file_campusapis_staff_v1_campus_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFreshmanDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFreshmanDetailResponse) ProtoMessage() {}

func (x *GetFreshmanDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_campusapis_staff_v1_campus_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFreshmanDetailResponse.ProtoReflect.Descriptor instead.
func (*GetFreshmanDetailResponse) Descriptor() ([]byte, []int) {
	return file_campusapis_staff_v1_campus_proto_rawDescGZIP(), []int{46}
}

func (x *GetFreshmanDetailResponse) GetError() int32 {
	if x != nil {
		return x.Error
	}
	return 0
}

func (x *GetFreshmanDetailResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetFreshmanDetailResponse) GetData() *FreshmanDetail {
	if x != nil {
		return x.Data
	}
	return nil
}

// 新生详细信息
type FreshmanDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 学号
	StaffId string `protobuf:"bytes,1,opt,name=staffId,proto3" json:"staffId,omitempty"`
	// 姓名
	StaffName string `protobuf:"bytes,2,opt,name=staffName,proto3" json:"staffName,omitempty"`
	// 班级名称
	ClassName string `protobuf:"bytes,3,opt,name=className,proto3" json:"className,omitempty"`
	// 宿舍房间名称
	RoomName string `protobuf:"bytes,4,opt,name=roomName,proto3" json:"roomName,omitempty"`
	// 注册状态（是否入学）
	RegStatus string `protobuf:"bytes,5,opt,name=regStatus,proto3" json:"regStatus,omitempty"`
	// 学院编号
	SchoolID string `protobuf:"bytes,6,opt,name=schoolID,proto3" json:"schoolID,omitempty"`
	// 学院名称
	SchoolName string `protobuf:"bytes,7,opt,name=schoolName,proto3" json:"schoolName,omitempty"`
	// 专业名称
	MajorName string `protobuf:"bytes,8,opt,name=majorName,proto3" json:"majorName,omitempty"`
	// 身份证号
	CardID string `protobuf:"bytes,9,opt,name=cardID,proto3" json:"cardID,omitempty"`
	// 辅导员姓名
	TeacherName  string `protobuf:"bytes,10,opt,name=teacherName,proto3" json:"teacherName,omitempty"`
	TeacherPhone string `protobuf:"bytes,11,opt,name=teacherPhone,proto3" json:"teacherPhone,omitempty"`
	// 班助姓名
	AssistantName string `protobuf:"bytes,12,opt,name=assistantName,proto3" json:"assistantName,omitempty"`
	// 班助电话
	AssistantPhone string `protobuf:"bytes,13,opt,name=assistantPhone,proto3" json:"assistantPhone,omitempty"`
	// 是否支付学费
	HasPaid string `protobuf:"bytes,14,opt,name=hasPaid,proto3" json:"hasPaid,omitempty"`
	// 绿色通道
	LSTD   string `protobuf:"bytes,15,opt,name=LSTD,proto3" json:"LSTD,omitempty"`
	LSTDXY string `protobuf:"bytes,16,opt,name=LSTDXY,proto3" json:"LSTDXY,omitempty"`
	LSTDZX string `protobuf:"bytes,17,opt,name=LSTDZX,proto3" json:"LSTDZX,omitempty"`
	// 电话
	Phone string `protobuf:"bytes,18,opt,name=phone,proto3" json:"phone,omitempty"`
	// QQ
	Qq string `protobuf:"bytes,19,opt,name=qq,proto3" json:"qq,omitempty"`
	// 楼号
	RoomBuilding string `protobuf:"bytes,20,opt,name=roomBuilding,proto3" json:"roomBuilding,omitempty"`
	// 寝室号
	RoomRoom string `protobuf:"bytes,21,opt,name=roomRoom,proto3" json:"roomRoom,omitempty"`
	// 床号
	RoomBed string `protobuf:"bytes,22,opt,name=roomBed,proto3" json:"roomBed,omitempty"`
	// 报到日期
	ComeDate string `protobuf:"bytes,23,opt,name=comeDate,proto3" json:"comeDate,omitempty"`
	// 身高（厘米）
	High string `protobuf:"bytes,24,opt,name=high,proto3" json:"high,omitempty"`
	// 火车区间
	Station string `protobuf:"bytes,25,opt,name=station,proto3" json:"station,omitempty"`
}

func (x *FreshmanDetail) Reset() {
	*x = FreshmanDetail{}
	mi := &file_campusapis_staff_v1_campus_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FreshmanDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FreshmanDetail) ProtoMessage() {}

func (x *FreshmanDetail) ProtoReflect() protoreflect.Message {
	mi := &file_campusapis_staff_v1_campus_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FreshmanDetail.ProtoReflect.Descriptor instead.
func (*FreshmanDetail) Descriptor() ([]byte, []int) {
	return file_campusapis_staff_v1_campus_proto_rawDescGZIP(), []int{47}
}

func (x *FreshmanDetail) GetStaffId() string {
	if x != nil {
		return x.StaffId
	}
	return ""
}

func (x *FreshmanDetail) GetStaffName() string {
	if x != nil {
		return x.StaffName
	}
	return ""
}

func (x *FreshmanDetail) GetClassName() string {
	if x != nil {
		return x.ClassName
	}
	return ""
}

func (x *FreshmanDetail) GetRoomName() string {
	if x != nil {
		return x.RoomName
	}
	return ""
}

func (x *FreshmanDetail) GetRegStatus() string {
	if x != nil {
		return x.RegStatus
	}
	return ""
}

func (x *FreshmanDetail) GetSchoolID() string {
	if x != nil {
		return x.SchoolID
	}
	return ""
}

func (x *FreshmanDetail) GetSchoolName() string {
	if x != nil {
		return x.SchoolName
	}
	return ""
}

func (x *FreshmanDetail) GetMajorName() string {
	if x != nil {
		return x.MajorName
	}
	return ""
}

func (x *FreshmanDetail) GetCardID() string {
	if x != nil {
		return x.CardID
	}
	return ""
}

func (x *FreshmanDetail) GetTeacherName() string {
	if x != nil {
		return x.TeacherName
	}
	return ""
}

func (x *FreshmanDetail) GetTeacherPhone() string {
	if x != nil {
		return x.TeacherPhone
	}
	return ""
}

func (x *FreshmanDetail) GetAssistantName() string {
	if x != nil {
		return x.AssistantName
	}
	return ""
}

func (x *FreshmanDetail) GetAssistantPhone() string {
	if x != nil {
		return x.AssistantPhone
	}
	return ""
}

func (x *FreshmanDetail) GetHasPaid() string {
	if x != nil {
		return x.HasPaid
	}
	return ""
}

func (x *FreshmanDetail) GetLSTD() string {
	if x != nil {
		return x.LSTD
	}
	return ""
}

func (x *FreshmanDetail) GetLSTDXY() string {
	if x != nil {
		return x.LSTDXY
	}
	return ""
}

func (x *FreshmanDetail) GetLSTDZX() string {
	if x != nil {
		return x.LSTDZX
	}
	return ""
}

func (x *FreshmanDetail) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *FreshmanDetail) GetQq() string {
	if x != nil {
		return x.Qq
	}
	return ""
}

func (x *FreshmanDetail) GetRoomBuilding() string {
	if x != nil {
		return x.RoomBuilding
	}
	return ""
}

func (x *FreshmanDetail) GetRoomRoom() string {
	if x != nil {
		return x.RoomRoom
	}
	return ""
}

func (x *FreshmanDetail) GetRoomBed() string {
	if x != nil {
		return x.RoomBed
	}
	return ""
}

func (x *FreshmanDetail) GetComeDate() string {
	if x != nil {
		return x.ComeDate
	}
	return ""
}

func (x *FreshmanDetail) GetHigh() string {
	if x != nil {
		return x.High
	}
	return ""
}

func (x *FreshmanDetail) GetStation() string {
	if x != nil {
		return x.Station
	}
	return ""
}

// 新生室友查询
type GetFreshmanRoommatesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error int32  `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Msg   string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	// 室友列表
	Data []*FreshmanRoommate `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetFreshmanRoommatesResponse) Reset() {
	*x = GetFreshmanRoommatesResponse{}
	mi := &file_campusapis_staff_v1_campus_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFreshmanRoommatesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFreshmanRoommatesResponse) ProtoMessage() {}

func (x *GetFreshmanRoommatesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_campusapis_staff_v1_campus_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFreshmanRoommatesResponse.ProtoReflect.Descriptor instead.
func (*GetFreshmanRoommatesResponse) Descriptor() ([]byte, []int) {
	return file_campusapis_staff_v1_campus_proto_rawDescGZIP(), []int{48}
}

func (x *GetFreshmanRoommatesResponse) GetError() int32 {
	if x != nil {
		return x.Error
	}
	return 0
}

func (x *GetFreshmanRoommatesResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetFreshmanRoommatesResponse) GetData() []*FreshmanRoommate {
	if x != nil {
		return x.Data
	}
	return nil
}

type FreshmanRoommate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 室友姓名
	StaffName string `protobuf:"bytes,1,opt,name=staffName,proto3" json:"staffName,omitempty"`
	Qq        string `protobuf:"bytes,2,opt,name=qq,proto3" json:"qq,omitempty"`
	Phone     string `protobuf:"bytes,3,opt,name=phone,proto3" json:"phone,omitempty"`
}

func (x *FreshmanRoommate) Reset() {
	*x = FreshmanRoommate{}
	mi := &file_campusapis_staff_v1_campus_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FreshmanRoommate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FreshmanRoommate) ProtoMessage() {}

func (x *FreshmanRoommate) ProtoReflect() protoreflect.Message {
	mi := &file_campusapis_staff_v1_campus_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FreshmanRoommate.ProtoReflect.Descriptor instead.
func (*FreshmanRoommate) Descriptor() ([]byte, []int) {
	return file_campusapis_staff_v1_campus_proto_rawDescGZIP(), []int{49}
}

func (x *FreshmanRoommate) GetStaffName() string {
	if x != nil {
		return x.StaffName
	}
	return ""
}

func (x *FreshmanRoommate) GetQq() string {
	if x != nil {
		return x.Qq
	}
	return ""
}

func (x *FreshmanRoommate) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

// 请求消息，添加年级筛选条件
type GetStudentCountByDivisionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Grade []string `protobuf:"bytes,1,rep,name=grade,proto3" json:"grade,omitempty"` // 年级:如 2022
}

func (x *GetStudentCountByDivisionRequest) Reset() {
	*x = GetStudentCountByDivisionRequest{}
	mi := &file_campusapis_staff_v1_campus_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetStudentCountByDivisionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStudentCountByDivisionRequest) ProtoMessage() {}

func (x *GetStudentCountByDivisionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_campusapis_staff_v1_campus_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStudentCountByDivisionRequest.ProtoReflect.Descriptor instead.
func (*GetStudentCountByDivisionRequest) Descriptor() ([]byte, []int) {
	return file_campusapis_staff_v1_campus_proto_rawDescGZIP(), []int{50}
}

func (x *GetStudentCountByDivisionRequest) GetGrade() []string {
	if x != nil {
		return x.Grade
	}
	return nil
}

// 定义响应消息
type NiceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error int32  `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Msg   string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data  string `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *NiceResponse) Reset() {
	*x = NiceResponse{}
	mi := &file_campusapis_staff_v1_campus_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NiceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NiceResponse) ProtoMessage() {}

func (x *NiceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_campusapis_staff_v1_campus_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NiceResponse.ProtoReflect.Descriptor instead.
func (*NiceResponse) Descriptor() ([]byte, []int) {
	return file_campusapis_staff_v1_campus_proto_rawDescGZIP(), []int{51}
}

func (x *NiceResponse) GetError() int32 {
	if x != nil {
		return x.Error
	}
	return 0
}

func (x *NiceResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *NiceResponse) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

// 某年贫困详情
type StudentNeedyInfo_Nested struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 特定学年
	SchoolYear int32 `protobuf:"varint,1,opt,name=schoolYear,proto3" json:"schoolYear,omitempty"`
	// 是否是贫困生
	NeedyStudent bool `protobuf:"varint,2,opt,name=needyStudent,proto3" json:"needyStudent,omitempty"`
}

func (x *StudentNeedyInfo_Nested) Reset() {
	*x = StudentNeedyInfo_Nested{}
	mi := &file_campusapis_staff_v1_campus_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StudentNeedyInfo_Nested) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StudentNeedyInfo_Nested) ProtoMessage() {}

func (x *StudentNeedyInfo_Nested) ProtoReflect() protoreflect.Message {
	mi := &file_campusapis_staff_v1_campus_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StudentNeedyInfo_Nested.ProtoReflect.Descriptor instead.
func (*StudentNeedyInfo_Nested) Descriptor() ([]byte, []int) {
	return file_campusapis_staff_v1_campus_proto_rawDescGZIP(), []int{14, 0}
}

func (x *StudentNeedyInfo_Nested) GetSchoolYear() int32 {
	if x != nil {
		return x.SchoolYear
	}
	return 0
}

func (x *StudentNeedyInfo_Nested) GetNeedyStudent() bool {
	if x != nil {
		return x.NeedyStudent
	}
	return false
}

type PostStudentGateAccessResponse_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Done    bool   `protobuf:"varint,1,opt,name=done,proto3" json:"done,omitempty"`      //是否完成
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"` //完成信息
}

func (x *PostStudentGateAccessResponse_Data) Reset() {
	*x = PostStudentGateAccessResponse_Data{}
	mi := &file_campusapis_staff_v1_campus_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PostStudentGateAccessResponse_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostStudentGateAccessResponse_Data) ProtoMessage() {}

func (x *PostStudentGateAccessResponse_Data) ProtoReflect() protoreflect.Message {
	mi := &file_campusapis_staff_v1_campus_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostStudentGateAccessResponse_Data.ProtoReflect.Descriptor instead.
func (*PostStudentGateAccessResponse_Data) Descriptor() ([]byte, []int) {
	return file_campusapis_staff_v1_campus_proto_rawDescGZIP(), []int{37, 0}
}

func (x *PostStudentGateAccessResponse_Data) GetDone() bool {
	if x != nil {
		return x.Done
	}
	return false
}

func (x *PostStudentGateAccessResponse_Data) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_campusapis_staff_v1_campus_proto protoreflect.FileDescriptor

var file_campusapis_staff_v1_campus_proto_rawDesc = []byte{
	0x0a, 0x20, 0x63, 0x61, 0x6d, 0x70, 0x75, 0x73, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x73, 0x74, 0x61,
	0x66, 0x66, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x61, 0x6d, 0x70, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x13, 0x63, 0x61, 0x6d, 0x70, 0x75, 0x73, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73,
	0x74, 0x61, 0x66, 0x66, 0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x63, 0x61, 0x6d, 0x70, 0x75, 0x73, 0x61,
	0x70, 0x69, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x66, 0x66, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x74, 0x0a, 0x15, 0x47, 0x65,
	0x74, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x33, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x61, 0x6d, 0x70,
	0x75, 0x73, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x74, 0x61, 0x66, 0x66, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0xb4, 0x01, 0x0a, 0x0a, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x66, 0x66, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x73, 0x74, 0x61, 0x66, 0x66, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61,
	0x66, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x66, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x66, 0x66,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61,
	0x66, 0x66, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x66, 0x66,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x66,
	0x66, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x72, 0x61, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x67, 0x72, 0x61, 0x64, 0x65, 0x22, 0x56, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x53, 0x74,
	0x75, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x59, 0x65, 0x61,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x59,
	0x65, 0x61, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x6d, 0x65, 0x73, 0x74, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x6d, 0x65, 0x73, 0x74, 0x65, 0x72, 0x22,
	0x5f, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75,
	0x72, 0x73, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x59, 0x65,
	0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c,
	0x59, 0x65, 0x61, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x6d, 0x65, 0x73, 0x74, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x6d, 0x65, 0x73, 0x74, 0x65, 0x72,
	0x22, 0x54, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x47, 0x72,
	0x61, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x63,
	0x68, 0x6f, 0x6f, 0x6c, 0x59, 0x65, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x59, 0x65, 0x61, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65,
	0x6d, 0x65, 0x73, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65,
	0x6d, 0x65, 0x73, 0x74, 0x65, 0x72, 0x22, 0x94, 0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x47, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x61, 0x64, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x63, 0x68, 0x6f, 0x6f,
	0x6c, 0x59, 0x65, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x63, 0x68,
	0x6f, 0x6f, 0x6c, 0x59, 0x65, 0x61, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x6d, 0x65, 0x73,
	0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x6d, 0x65, 0x73,
	0x74, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x53, 0x0a,
	0x15, 0x47, 0x65, 0x74, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c,
	0x59, 0x65, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x6f,
	0x6f, 0x6c, 0x59, 0x65, 0x61, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x6d, 0x65, 0x73, 0x74,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x6d, 0x65, 0x73, 0x74,
	0x65, 0x72, 0x22, 0x29, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x45, 0x78,
	0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x22, 0x4d, 0x0a,
	0x0f, 0x53, 0x65, 0x6d, 0x65, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x59, 0x65, 0x61, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x59, 0x65, 0x61, 0x72,
	0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x6d, 0x65, 0x73, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x6d, 0x65, 0x73, 0x74, 0x65, 0x72, 0x22, 0x76, 0x0a, 0x16,
	0x47, 0x65, 0x74, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x10, 0x0a, 0x03,
	0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x34,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63,
	0x61, 0x6d, 0x70, 0x75, 0x73, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x74, 0x61, 0x66, 0x66, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x8b, 0x02, 0x0a, 0x0b, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x66, 0x66, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x74, 0x61, 0x66, 0x66, 0x49, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x74, 0x61, 0x66, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x66, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x6e, 0x69, 0x74, 0x49, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x6e, 0x69, 0x74, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x75, 0x6e, 0x69, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x75, 0x6e, 0x69, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61,
	0x6a, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x6a,
	0x6f, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x20, 0x0a, 0x0b, 0x74, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0x8e, 0x01, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e,
	0x74, 0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x52, 0x6f, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73,
	0x67, 0x12, 0x40, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x63, 0x61, 0x6d, 0x70, 0x75, 0x73, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x74, 0x61,
	0x66, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x68,
	0x6f, 0x6f, 0x6c, 0x52, 0x6f, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x91, 0x01, 0x0a, 0x17, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x53,
	0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x52, 0x6f, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x66, 0x66, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x73, 0x74, 0x61, 0x66, 0x66, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61,
	0x66, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x66, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x44, 0x65, 0x73, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x44, 0x65, 0x73, 0x63, 0x22, 0x80, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x53,
	0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x4e, 0x65, 0x65, 0x64, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x10, 0x0a,
	0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12,
	0x39, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x63, 0x61, 0x6d, 0x70, 0x75, 0x73, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x74, 0x61, 0x66, 0x66,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x4e, 0x65, 0x65, 0x64, 0x79,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x92, 0x02, 0x0a, 0x10, 0x53,
	0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x4e, 0x65, 0x65, 0x64, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x66, 0x66, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x73, 0x74, 0x61, 0x66, 0x66, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61,
	0x66, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x66, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x78, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x73, 0x65, 0x78, 0x12, 0x22, 0x0a, 0x0c, 0x6e, 0x65, 0x65,
	0x64, 0x79, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0c, 0x6e, 0x65, 0x65, 0x64, 0x79, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x12, 0x42, 0x0a,
	0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63,
	0x61, 0x6d, 0x70, 0x75, 0x73, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x74, 0x61, 0x66, 0x66, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x4e, 0x65, 0x65, 0x64, 0x79, 0x49,
	0x6e, 0x66, 0x6f, 0x2e, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x1a, 0x4c, 0x0a, 0x06, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x73,
	0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x59, 0x65, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x59, 0x65, 0x61, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x6e,
	0x65, 0x65, 0x64, 0x79, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0c, 0x6e, 0x65, 0x65, 0x64, 0x79, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x22,
	0x77, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x44, 0x6f, 0x72,
	0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x31, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x61, 0x6d, 0x70, 0x75, 0x73, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x73, 0x74, 0x61, 0x66, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x72, 0x6d, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x54, 0x0a, 0x08, 0x44, 0x6f, 0x72, 0x6d,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x66, 0x66, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x74, 0x61, 0x66, 0x66, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f,
	0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6f, 0x6d, 0x22, 0x86,
	0x01, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x42, 0x69, 0x72,
	0x74, 0x68, 0x64, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x3c, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x61, 0x6d, 0x70, 0x75, 0x73,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x74, 0x61, 0x66, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74,
	0x75, 0x64, 0x65, 0x6e, 0x74, 0x42, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x5f, 0x0a, 0x13, 0x53, 0x74, 0x75, 0x64, 0x65,
	0x6e, 0x74, 0x42, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x74, 0x61, 0x66, 0x66, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x73, 0x74, 0x61, 0x66, 0x66, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x22, 0x72, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x53,
	0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x42, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x73, 0x49,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x63, 0x61, 0x6d, 0x70, 0x75, 0x73, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x73, 0x74, 0x61, 0x66, 0x66, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x61,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x64, 0x61, 0x79, 0x22, 0x85, 0x01, 0x0a,
	0x1d, 0x47, 0x65, 0x74, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x42, 0x69, 0x72, 0x74, 0x68,
	0x64, 0x61, 0x79, 0x73, 0x49, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x3c, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x61, 0x6d, 0x70, 0x75, 0x73, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x73, 0x74, 0x61, 0x66, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x65,
	0x6e, 0x74, 0x42, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x7b, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x53, 0x74, 0x75, 0x64, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x36, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x61, 0x6d, 0x70, 0x75, 0x73,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x74, 0x61, 0x66, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74,
	0x75, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0xc5, 0x01, 0x0a, 0x0d, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x66, 0x66, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x74, 0x61, 0x66, 0x66, 0x49, 0x44, 0x12, 0x1c, 0x0a,
	0x09, 0x73, 0x74, 0x61, 0x66, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x74, 0x61, 0x66, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73,
	0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x59, 0x65, 0x61, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x59, 0x65, 0x61, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x73,
	0x65, 0x6d, 0x65, 0x73, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73,
	0x65, 0x6d, 0x65, 0x73, 0x74, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x8d, 0x01, 0x0a, 0x22, 0x47, 0x65,
	0x74, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x3f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x61, 0x6d, 0x70, 0x75, 0x73, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x73, 0x74, 0x61, 0x66, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x75,
	0x64, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xe8, 0x02, 0x0a, 0x16, 0x53, 0x74,
	0x75, 0x64, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x59, 0x65,
	0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c,
	0x59, 0x65, 0x61, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x6d, 0x65, 0x73, 0x74, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x6d, 0x65, 0x73, 0x74, 0x65, 0x72,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x66, 0x66, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x73, 0x74, 0x61, 0x66, 0x66, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74,
	0x61, 0x66, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x66, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x75, 0x72,
	0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f,
	0x75, 0x72, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x75, 0x72,
	0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f,
	0x75, 0x72, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x65, 0x61, 0x63,
	0x68, 0x65, 0x72, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x65, 0x61,
	0x63, 0x68, 0x65, 0x72, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x65, 0x61, 0x63, 0x68, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x65, 0x61,
	0x63, 0x68, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x52,
	0x6f, 0x6f, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x52, 0x6f, 0x6f, 0x6d, 0x22, 0x78, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x53, 0x74, 0x75, 0x64, 0x65,
	0x6e, 0x74, 0x47, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x35, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x61, 0x6d, 0x70, 0x75, 0x73, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x73, 0x74, 0x61, 0x66, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x75, 0x64,
	0x65, 0x6e, 0x74, 0x47, 0x72, 0x61, 0x64, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xce,
	0x03, 0x0a, 0x0c, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x61, 0x64, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x59, 0x65, 0x61, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x59, 0x65, 0x61, 0x72, 0x12,
	0x1a, 0x0a, 0x08, 0x73, 0x65, 0x6d, 0x65, 0x73, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x73, 0x65, 0x6d, 0x65, 0x73, 0x74, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x44, 0x61, 0x69, 0x6c,
	0x79, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x4d, 0x69, 0x64, 0x54, 0x65, 0x72,
	0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x4d, 0x69,
	0x64, 0x54, 0x65, 0x72, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x46, 0x69,
	0x6e, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x46, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x53, 0x75,
	0x62, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x53, 0x75, 0x62, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x65, 0x12,
	0x24, 0x0a, 0x0d, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x63, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x50, 0x72, 0x61,
	0x63, 0x74, 0x69, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x75, 0x72, 0x73,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x74, 0x61, 0x66, 0x66, 0x49, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x73, 0x74, 0x61, 0x66, 0x66, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x66, 0x66,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x66,
	0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x47, 0x50, 0x41, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x47, 0x50, 0x41, 0x22,
	0x84, 0x01, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x53, 0x74, 0x75,
	0x64, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x3b, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x61, 0x6d, 0x70, 0x75, 0x73,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x74, 0x61, 0x66, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x61, 0x64, 0x65,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x74, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x44, 0x61, 0x69,
	0x6c, 0x79, 0x45, 0x78, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x34, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x61, 0x6d, 0x70, 0x75, 0x73, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x73, 0x74, 0x61, 0x66, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x65,
	0x6e, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xd4, 0x01, 0x0a,
	0x12, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x47, 0x72,
	0x61, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x59, 0x65, 0x61,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x59,
	0x65, 0x61, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x6d, 0x65, 0x73, 0x74, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x6d, 0x65, 0x73, 0x74, 0x65, 0x72, 0x12,
	0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x66, 0x66,
	0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x74, 0x61, 0x66, 0x66, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x41, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x41, 0x74, 0x22, 0x76, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e,
	0x74, 0x45, 0x78, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x34, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x61, 0x6d, 0x70, 0x75, 0x73, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x73, 0x74, 0x61, 0x66, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e,
	0x74, 0x45, 0x78, 0x61, 0x6d, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x85, 0x02, 0x0a, 0x0b,
	0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x72, 0x6f, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x72, 0x6f, 0x6f, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x75,
	0x72, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x75, 0x72, 0x73,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x61, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x78, 0x61, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x65, 0x78, 0x61, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x65, 0x78, 0x61, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x63, 0x68,
	0x6f, 0x6f, 0x6c, 0x59, 0x65, 0x61, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73,
	0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x59, 0x65, 0x61, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x6d,
	0x65, 0x73, 0x74, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x6d,
	0x65, 0x73, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x65, 0x61, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x65, 0x61, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x61,
	0x66, 0x66, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x74, 0x61, 0x66,
	0x66, 0x49, 0x64, 0x22, 0x74, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e,
	0x74, 0x47, 0x50, 0x41, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6d, 0x73, 0x67, 0x12, 0x33, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x61, 0x6d, 0x70, 0x75, 0x73, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x73, 0x74, 0x61, 0x66, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74,
	0x47, 0x50, 0x41, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x88, 0x01, 0x0a, 0x0a, 0x53, 0x74,
	0x75, 0x64, 0x65, 0x6e, 0x74, 0x47, 0x50, 0x41, 0x12, 0x45, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x53,
	0x65, 0x6d, 0x65, 0x73, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x63, 0x61, 0x6d, 0x70, 0x75, 0x73, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x74, 0x61, 0x66, 0x66,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x50, 0x41, 0x50, 0x65, 0x72, 0x53, 0x65, 0x6d, 0x65, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x53, 0x65, 0x6d, 0x65, 0x73, 0x74, 0x65, 0x72, 0x12,
	0x33, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x63, 0x61, 0x6d, 0x70, 0x75, 0x73, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x74, 0x61, 0x66,
	0x66, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x50, 0x41, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x22, 0x94, 0x01, 0x0a, 0x0e, 0x47, 0x50, 0x41, 0x50, 0x65, 0x72, 0x53,
	0x65, 0x6d, 0x65, 0x73, 0x74, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x63, 0x68, 0x6f, 0x6f,
	0x6c, 0x59, 0x65, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x63, 0x68,
	0x6f, 0x6f, 0x6c, 0x59, 0x65, 0x61, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x6d, 0x65, 0x73,
	0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x6d, 0x65, 0x73,
	0x74, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x67, 0x72, 0x61, 0x64, 0x65, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x67, 0x72, 0x61, 0x64, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x66, 0x66, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x73, 0x74, 0x61, 0x66, 0x66, 0x49, 0x44, 0x22, 0x52, 0x0a, 0x08, 0x47,
	0x50, 0x41, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2c, 0x0a, 0x11, 0x67, 0x72, 0x61, 0x64, 0x65,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x67, 0x72, 0x61, 0x64, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x41, 0x76,
	0x65, 0x72, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x66, 0x66, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x74, 0x61, 0x66, 0x66, 0x49, 0x44, 0x22,
	0xda, 0x01, 0x0a, 0x1c, 0x50, 0x6f, 0x73, 0x74, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x47,
	0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x66, 0x66, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x73, 0x74, 0x61, 0x66, 0x66, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x61,
	0x79, 0x4f, 0x66, 0x66, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x64, 0x61, 0x79, 0x4f, 0x66, 0x66, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x61,
	0x79, 0x4f, 0x66, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x64, 0x61, 0x79, 0x4f, 0x66, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65,
	0x45, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x45,
	0x6e, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x75, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x22, 0xca, 0x01, 0x0a,
	0x1d, 0x50, 0x6f, 0x73, 0x74, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x47, 0x61, 0x74, 0x65,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x4b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x63, 0x61, 0x6d, 0x70, 0x75, 0x73, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x73, 0x74, 0x61, 0x66, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x53,
	0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x47, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x1a, 0x34, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x6f, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x64, 0x6f, 0x6e, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x8a, 0x01, 0x0a, 0x20, 0x47, 0x65,
	0x74, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x79, 0x53, 0x63, 0x68, 0x6f,
	0x6f, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x3e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x61, 0x6d, 0x70, 0x75, 0x73, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x73, 0x74, 0x61, 0x66, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x65,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x79, 0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x85, 0x04, 0x0a, 0x15, 0x53, 0x74, 0x75, 0x64, 0x65,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x79, 0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x66, 0x66, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x73, 0x74, 0x61, 0x66, 0x66, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74,
	0x61, 0x66, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x66, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x31, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x31, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x31, 0x45, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x31, 0x45, 0x6e, 0x64, 0x12, 0x1e, 0x0a, 0x0a,
	0x74, 0x69, 0x6d, 0x65, 0x32, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x32, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x74, 0x69, 0x6d, 0x65, 0x32, 0x45, 0x6e, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x74, 0x69, 0x6d, 0x65, 0x32, 0x45, 0x6e, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x65, 0x61, 0x63,
	0x68, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x74, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x24,
	0x0a, 0x0d, 0x74, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x52, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x12, 0x2c, 0x0a, 0x11, 0x74, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x52,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x74, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x6e, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x6e, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x6d, 0x61,
	0x72, 0x6b, 0x12, 0x26, 0x0a, 0x0e, 0x75, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x75, 0x6e, 0x69, 0x74,
	0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x6c,
	0x0a, 0x1a, 0x47, 0x65, 0x74, 0x46, 0x72, 0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e, 0x42, 0x61, 0x73,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x74, 0x61, 0x66, 0x66, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73,
	0x74, 0x61, 0x66, 0x66, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x69, 0x64, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x6f, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x69, 0x64, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x6f, 0x22, 0x6a, 0x0a, 0x18,
	0x47, 0x65, 0x74, 0x46, 0x72, 0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x66,
	0x66, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x74, 0x61, 0x66, 0x66,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x69, 0x64, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x69, 0x64, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x6f, 0x22, 0x6d, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x46,
	0x72, 0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e, 0x52, 0x6f, 0x6f, 0x6d, 0x6d, 0x61, 0x74, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x66, 0x66,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x74, 0x61, 0x66, 0x66, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69,
	0x64, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69,
	0x64, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x6f, 0x22, 0x68, 0x0a, 0x16, 0x46, 0x72, 0x65, 0x73, 0x68,
	0x6d, 0x61, 0x6e, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x66, 0x66, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x73, 0x74, 0x61, 0x66, 0x66, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6f,
	0x66, 0x66, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x66,
	0x66, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x64, 0x43, 0x61, 0x72, 0x64, 0x4e,
	0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x64, 0x43, 0x61, 0x72, 0x64, 0x4e,
	0x6f, 0x22, 0x80, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x46, 0x72, 0x65, 0x73, 0x68, 0x6d, 0x61,
	0x6e, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x39, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x61, 0x6d, 0x70, 0x75, 0x73,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x74, 0x61, 0x66, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x72,
	0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0xba, 0x01, 0x0a, 0x10, 0x46, 0x72, 0x65, 0x73, 0x68, 0x6d, 0x61,
	0x6e, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x61,
	0x66, 0x66, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x74, 0x61, 0x66,
	0x66, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x66, 0x66, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x66, 0x66, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69,
	0x64, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69,
	0x64, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x66, 0x66, 0x65, 0x72,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x66, 0x66, 0x65,
	0x72, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63,
	0x65, 0x22, 0x7c, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x46, 0x72, 0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x37, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x61, 0x6d, 0x70, 0x75, 0x73, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x73, 0x74, 0x61, 0x66, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x72, 0x65, 0x73, 0x68,
	0x6d, 0x61, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0xce, 0x05, 0x0a, 0x0e, 0x46, 0x72, 0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x66, 0x66, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x74, 0x61, 0x66, 0x66, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x73, 0x74, 0x61, 0x66, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x74, 0x61, 0x66, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x6f, 0x6f, 0x6d,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x6f, 0x6f, 0x6d,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x67, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x49, 0x44, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x49, 0x44, 0x12, 0x1e,
	0x0a, 0x0a, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x63, 0x61, 0x72, 0x64, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x61,
	0x72, 0x64, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x65, 0x61, 0x63, 0x68,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x65, 0x61, 0x63, 0x68, 0x65,
	0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x65,
	0x61, 0x63, 0x68, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x73,
	0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x26, 0x0a, 0x0e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x50, 0x68, 0x6f,
	0x6e, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x61, 0x73, 0x50,
	0x61, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x68, 0x61, 0x73, 0x50, 0x61,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x4c, 0x53, 0x54, 0x44, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x4c, 0x53, 0x54, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x4c, 0x53, 0x54, 0x44, 0x58, 0x59,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x4c, 0x53, 0x54, 0x44, 0x58, 0x59, 0x12, 0x16,
	0x0a, 0x06, 0x4c, 0x53, 0x54, 0x44, 0x5a, 0x58, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x4c, 0x53, 0x54, 0x44, 0x5a, 0x58, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x71, 0x71, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x71, 0x71, 0x12, 0x22, 0x0a, 0x0c,
	0x72, 0x6f, 0x6f, 0x6d, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x72, 0x6f, 0x6f, 0x6d, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67,
	0x12, 0x1a, 0x0a, 0x08, 0x72, 0x6f, 0x6f, 0x6d, 0x52, 0x6f, 0x6f, 0x6d, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x72, 0x6f, 0x6f, 0x6d, 0x52, 0x6f, 0x6f, 0x6d, 0x12, 0x18, 0x0a, 0x07,
	0x72, 0x6f, 0x6f, 0x6d, 0x42, 0x65, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72,
	0x6f, 0x6f, 0x6d, 0x42, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x65, 0x44, 0x61,
	0x74, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x65, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x69, 0x67, 0x68, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x68, 0x69, 0x67, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x81, 0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x46, 0x72, 0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e,
	0x52, 0x6f, 0x6f, 0x6d, 0x6d, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x39, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x61, 0x6d, 0x70, 0x75, 0x73,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x74, 0x61, 0x66, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x72,
	0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e, 0x52, 0x6f, 0x6f, 0x6d, 0x6d, 0x61, 0x74, 0x65, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x56, 0x0a, 0x10, 0x46, 0x72, 0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e,
	0x52, 0x6f, 0x6f, 0x6d, 0x6d, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x66,
	0x66, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x66, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x71, 0x71, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x71, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x22, 0x38, 0x0a, 0x20,
	0x47, 0x65, 0x74, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42,
	0x79, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x67, 0x72, 0x61, 0x64, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x05, 0x67, 0x72, 0x61, 0x64, 0x65, 0x22, 0x4a, 0x0a, 0x0c, 0x4e, 0x69, 0x63, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x10, 0x0a, 0x03,
	0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x32, 0xb1, 0x18, 0x0a, 0x0d, 0x43, 0x61, 0x6d, 0x70, 0x75, 0x73, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x82, 0x01, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x50, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x2a,
	0x2e, 0x63, 0x61, 0x6d, 0x70, 0x75, 0x73, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x74, 0x61, 0x66,
	0x66, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2d, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x27, 0x5a, 0x0e, 0x12, 0x0c, 0x2f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2f, 0x69, 0x6e,
	0x66, 0x6f, 0x12, 0x15, 0x2f, 0x73, 0x74, 0x61, 0x66, 0x66, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x2f, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x86, 0x01, 0x0a, 0x0e, 0x47, 0x65,
	0x74, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x1a, 0x2b, 0x2e, 0x63, 0x61, 0x6d, 0x70, 0x75, 0x73, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x73, 0x74, 0x61, 0x66, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74,
	0x75, 0x64, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x2f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x5a, 0x0f, 0x12, 0x0d, 0x2f, 0x73, 0x74,
	0x75, 0x64, 0x65, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x2f, 0x73, 0x74, 0x61,
	0x66, 0x66, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x2f, 0x69, 0x6e,
	0x66, 0x6f, 0x12, 0xa8, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x35, 0x2e, 0x63, 0x61, 0x6d, 0x70, 0x75, 0x73, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x74,
	0x61, 0x66, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x63, 0x61, 0x6d, 0x70, 0x75, 0x73,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x74, 0x61, 0x66, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x69,
	0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x31, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x2b, 0x5a, 0x10, 0x12, 0x0e, 0x2f, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x2f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x17, 0x2f, 0x73, 0x74, 0x61, 0x66, 0x66, 0x2f, 0x76, 0x31, 0x2f,
	0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0xb6, 0x01,
	0x0a, 0x1a, 0x47, 0x65, 0x74, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x68, 0x6f,
	0x6f, 0x6c, 0x52, 0x6f, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x1a, 0x37, 0x2e, 0x63, 0x61, 0x6d, 0x70, 0x75, 0x73, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x73, 0x74, 0x61, 0x66, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74,
	0x75, 0x64, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x52, 0x6f, 0x6c, 0x6c, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x47, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x41, 0x5a, 0x1b, 0x12, 0x19, 0x2f, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e,
	0x74, 0x2f, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x52, 0x6f, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x22, 0x2f, 0x73, 0x74, 0x61, 0x66, 0x66, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74,
	0x75, 0x64, 0x65, 0x6e, 0x74, 0x2f, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x52, 0x6f, 0x6c, 0x6c,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x8e, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x53, 0x74,
	0x75, 0x64, 0x65, 0x6e, 0x74, 0x44, 0x6f, 0x72, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x2f, 0x2e, 0x63, 0x61, 0x6d, 0x70, 0x75, 0x73, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x73, 0x74, 0x61, 0x66, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53,
	0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x44, 0x6f, 0x72, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x5a, 0x0f,
	0x12, 0x0d, 0x2f, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x2f, 0x64, 0x6f, 0x72, 0x6d, 0x12,
	0x16, 0x2f, 0x73, 0x74, 0x61, 0x66, 0x66, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x75, 0x64, 0x65,
	0x6e, 0x74, 0x2f, 0x64, 0x6f, 0x72, 0x6d, 0x12, 0x9e, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x53,
	0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x42, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x33, 0x2e, 0x63, 0x61, 0x6d,
	0x70, 0x75, 0x73, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x74, 0x61, 0x66, 0x66, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x42, 0x69, 0x72, 0x74, 0x68,
	0x64, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x37, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x31, 0x5a, 0x13, 0x12, 0x11, 0x2f, 0x73, 0x74, 0x75, 0x64,
	0x65, 0x6e, 0x74, 0x2f, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x12, 0x1a, 0x2f, 0x73,
	0x74, 0x61, 0x66, 0x66, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x2f,
	0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x12, 0xb9, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74,
	0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x42, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x73,
	0x49, 0x6e, 0x12, 0x31, 0x2e, 0x63, 0x61, 0x6d, 0x70, 0x75, 0x73, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x73, 0x74, 0x61, 0x66, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x75, 0x64,
	0x65, 0x6e, 0x74, 0x42, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x73, 0x49, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x63, 0x61, 0x6d, 0x70, 0x75, 0x73, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x73, 0x74, 0x61, 0x66, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53,
	0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x42, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x73, 0x49,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x39, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x33, 0x5a, 0x14, 0x12, 0x12, 0x2f, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x2f, 0x62, 0x69,
	0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x73, 0x12, 0x1b, 0x2f, 0x73, 0x74, 0x61, 0x66, 0x66, 0x2f,
	0x76, 0x31, 0x2f, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x2f, 0x62, 0x69, 0x72, 0x74, 0x68,
	0x64, 0x61, 0x79, 0x73, 0x12, 0xa7, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x53, 0x74, 0x75, 0x64,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x2d, 0x2e, 0x63, 0x61, 0x6d,
	0x70, 0x75, 0x73, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x74, 0x61, 0x66, 0x66, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x63, 0x61, 0x6d, 0x70,
	0x75, 0x73, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x74, 0x61, 0x66, 0x66, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x33, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x2d, 0x5a, 0x11, 0x12, 0x0f, 0x2f, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x2f, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x12, 0x18, 0x2f, 0x73, 0x74, 0x61, 0x66, 0x66, 0x2f, 0x76, 0x31, 0x2f,
	0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x2f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0xc2,
	0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75,
	0x72, 0x73, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x36, 0x2e,
	0x63, 0x61, 0x6d, 0x70, 0x75, 0x73, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x74, 0x61, 0x66, 0x66,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x75, 0x72, 0x73, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x63, 0x61, 0x6d, 0x70, 0x75, 0x73, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x73, 0x74, 0x61, 0x66, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53,
	0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x33,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x5a, 0x11, 0x12, 0x0f, 0x2f, 0x73, 0x74, 0x75, 0x64, 0x65,
	0x6e, 0x74, 0x2f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x12, 0x18, 0x2f, 0x73, 0x74, 0x61, 0x66,
	0x66, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x2f, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x12, 0x9f, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x53, 0x74, 0x75, 0x64, 0x65,
	0x6e, 0x74, 0x47, 0x72, 0x61, 0x64, 0x65, 0x12, 0x2b, 0x2e, 0x63, 0x61, 0x6d, 0x70, 0x75, 0x73,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x74, 0x61, 0x66, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x63, 0x61, 0x6d, 0x70, 0x75, 0x73, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x73, 0x74, 0x61, 0x66, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74,
	0x75, 0x64, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x31, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x5a, 0x10, 0x12, 0x0e, 0x2f, 0x73,
	0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x2f, 0x67, 0x72, 0x61, 0x64, 0x65, 0x12, 0x17, 0x2f, 0x73,
	0x74, 0x61, 0x66, 0x66, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x2f,
	0x67, 0x72, 0x61, 0x64, 0x65, 0x12, 0xae, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x47, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x61, 0x64, 0x65, 0x12,
	0x31, 0x2e, 0x63, 0x61, 0x6d, 0x70, 0x75, 0x73, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x74, 0x61,
	0x66, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x53,
	0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x32, 0x2e, 0x63, 0x61, 0x6d, 0x70, 0x75, 0x73, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x73, 0x74, 0x61, 0x66, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x12, 0x26,
	0x2f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x66, 0x66, 0x2f, 0x76,
	0x31, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74,
	0x2f, 0x67, 0x72, 0x61, 0x64, 0x65, 0x12, 0x9a, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x53, 0x74,
	0x75, 0x64, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x12, 0x2a, 0x2e, 0x63, 0x61, 0x6d, 0x70,
	0x75, 0x73, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x74, 0x61, 0x66, 0x66, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x63, 0x61, 0x6d, 0x70, 0x75, 0x73, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x73, 0x74, 0x61, 0x66, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53,
	0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x2f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x5a, 0x0f, 0x12, 0x0d, 0x2f, 0x73,
	0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x2f, 0x65, 0x78, 0x61, 0x6d, 0x12, 0x16, 0x2f, 0x73, 0x74,
	0x61, 0x66, 0x66, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x2f, 0x65,
	0x78, 0x61, 0x6d, 0x12, 0x9e, 0x01, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x44, 0x61, 0x69, 0x6c, 0x79,
	0x45, 0x78, 0x61, 0x6d, 0x12, 0x28, 0x2e, 0x63, 0x61, 0x6d, 0x70, 0x75, 0x73, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x73, 0x74, 0x61, 0x66, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61,
	0x69, 0x6c, 0x79, 0x45, 0x78, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29,
	0x2e, 0x63, 0x61, 0x6d, 0x70, 0x75, 0x73, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x74, 0x61, 0x66,
	0x66, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x45, 0x78, 0x61,
	0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x39, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x33, 0x5a, 0x14, 0x12, 0x12, 0x2f, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x2f, 0x64, 0x61,
	0x69, 0x6c, 0x79, 0x45, 0x78, 0x61, 0x6d, 0x12, 0x1b, 0x2f, 0x73, 0x74, 0x61, 0x66, 0x66, 0x2f,
	0x76, 0x31, 0x2f, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x2f, 0x64, 0x61, 0x69, 0x6c, 0x79,
	0x45, 0x78, 0x61, 0x6d, 0x12, 0x82, 0x01, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x53, 0x74, 0x75, 0x64,
	0x65, 0x6e, 0x74, 0x47, 0x50, 0x41, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x2a,
	0x2e, 0x63, 0x61, 0x6d, 0x70, 0x75, 0x73, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x74, 0x61, 0x66,
	0x66, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x47,
	0x50, 0x41, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2d, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x27, 0x5a, 0x0e, 0x12, 0x0c, 0x2f, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x2f, 0x67,
	0x70, 0x61, 0x12, 0x15, 0x2f, 0x73, 0x74, 0x61, 0x66, 0x66, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74,
	0x75, 0x64, 0x65, 0x6e, 0x74, 0x2f, 0x67, 0x70, 0x61, 0x12, 0x80, 0x01, 0x0a, 0x15, 0x50, 0x6f,
	0x73, 0x74, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x47, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x12, 0x31, 0x2e, 0x63, 0x61, 0x6d, 0x70, 0x75, 0x73, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x73, 0x74, 0x61, 0x66, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x53, 0x74,
	0x75, 0x64, 0x65, 0x6e, 0x74, 0x47, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x63, 0x61, 0x6d, 0x70, 0x75, 0x73, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x73, 0x74, 0x61, 0x66, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73,
	0x74, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x47, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xa8, 0x01, 0x0a,
	0x18, 0x47, 0x65, 0x74, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x79, 0x53,
	0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x35, 0x2e, 0x63, 0x61, 0x6d, 0x70, 0x75, 0x73, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73,
	0x74, 0x61, 0x66, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x75, 0x64, 0x65,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x79, 0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x37,
	0x5a, 0x16, 0x12, 0x14, 0x2f, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x2f, 0x68, 0x6f, 0x6c,
	0x69, 0x64, 0x61, 0x79, 0x53, 0x74, 0x61, 0x79, 0x12, 0x1d, 0x2f, 0x73, 0x74, 0x61, 0x66, 0x66,
	0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x2f, 0x68, 0x6f, 0x6c, 0x69,
	0x64, 0x61, 0x79, 0x53, 0x74, 0x61, 0x79, 0x12, 0xab, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x46,
	0x72, 0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x2f, 0x2e, 0x63, 0x61, 0x6d, 0x70, 0x75, 0x73, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x74, 0x61,
	0x66, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x72, 0x65, 0x73, 0x68, 0x6d, 0x61,
	0x6e, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x30, 0x2e, 0x63, 0x61, 0x6d, 0x70, 0x75, 0x73, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x74,
	0x61, 0x66, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x72, 0x65, 0x73, 0x68, 0x6d,
	0x61, 0x6e, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x31, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x5a, 0x10, 0x12, 0x0e, 0x2f, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x12, 0x17, 0x2f, 0x73,
	0x74, 0x61, 0x66, 0x66, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x72, 0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e,
	0x2f, 0x62, 0x61, 0x73, 0x65, 0x12, 0xa5, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x46, 0x72, 0x65,
	0x73, 0x68, 0x6d, 0x61, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x2d, 0x2e, 0x63, 0x61,
	0x6d, 0x70, 0x75, 0x73, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x74, 0x61, 0x66, 0x66, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x72, 0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x63, 0x61, 0x6d,
	0x70, 0x75, 0x73, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x74, 0x61, 0x66, 0x66, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x46, 0x72, 0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x31, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x2b, 0x5a, 0x10, 0x12, 0x0e, 0x2f, 0x66, 0x72, 0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e, 0x2f,
	0x69, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x2f, 0x73, 0x74, 0x61, 0x66, 0x66, 0x2f, 0x76, 0x31, 0x2f,
	0x66, 0x72, 0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e, 0x2f, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0xb6, 0x01,
	0x0a, 0x14, 0x47, 0x65, 0x74, 0x46, 0x72, 0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e, 0x52, 0x6f, 0x6f,
	0x6d, 0x6d, 0x61, 0x74, 0x65, 0x73, 0x12, 0x30, 0x2e, 0x63, 0x61, 0x6d, 0x70, 0x75, 0x73, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x73, 0x74, 0x61, 0x66, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x46, 0x72, 0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e, 0x52, 0x6f, 0x6f, 0x6d, 0x6d, 0x61, 0x74, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x63, 0x61, 0x6d, 0x70, 0x75,
	0x73, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x74, 0x61, 0x66, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x46, 0x72, 0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e, 0x52, 0x6f, 0x6f, 0x6d, 0x6d, 0x61,
	0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x39, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x33, 0x5a, 0x14, 0x12, 0x12, 0x2f, 0x66, 0x72, 0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e,
	0x2f, 0x72, 0x6f, 0x6f, 0x6d, 0x6d, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x2f, 0x73, 0x74, 0x61, 0x66,
	0x66, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x72, 0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e, 0x2f, 0x72, 0x6f,
	0x6f, 0x6d, 0x6d, 0x61, 0x74, 0x65, 0x42, 0xd1, 0x01, 0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x61, 0x6d, 0x70, 0x75, 0x73, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x74, 0x61, 0x66, 0x66, 0x2e,
	0x76, 0x31, 0x42, 0x0b, 0x43, 0x61, 0x6d, 0x70, 0x75, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50,
	0x01, 0x5a, 0x3b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x68, 0x64,
	0x75, 0x68, 0x65, 0x6c, 0x70, 0x2f, 0x61, 0x70, 0x69, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x73,
	0x64, 0x6b, 0x2f, 0x63, 0x61, 0x6d, 0x70, 0x75, 0x73, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x73, 0x74,
	0x61, 0x66, 0x66, 0x2f, 0x76, 0x31, 0x3b, 0x73, 0x74, 0x61, 0x66, 0x66, 0x76, 0x31, 0xa2, 0x02,
	0x03, 0x43, 0x53, 0x58, 0xaa, 0x02, 0x13, 0x43, 0x61, 0x6d, 0x70, 0x75, 0x73, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x53, 0x74, 0x61, 0x66, 0x66, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x13, 0x43, 0x61, 0x6d,
	0x70, 0x75, 0x73, 0x61, 0x70, 0x69, 0x73, 0x5c, 0x53, 0x74, 0x61, 0x66, 0x66, 0x5c, 0x56, 0x31,
	0xe2, 0x02, 0x1f, 0x43, 0x61, 0x6d, 0x70, 0x75, 0x73, 0x61, 0x70, 0x69, 0x73, 0x5c, 0x53, 0x74,
	0x61, 0x66, 0x66, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0xea, 0x02, 0x15, 0x43, 0x61, 0x6d, 0x70, 0x75, 0x73, 0x61, 0x70, 0x69, 0x73, 0x3a,
	0x3a, 0x53, 0x74, 0x61, 0x66, 0x66, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_campusapis_staff_v1_campus_proto_rawDescOnce sync.Once
	file_campusapis_staff_v1_campus_proto_rawDescData = file_campusapis_staff_v1_campus_proto_rawDesc
)

func file_campusapis_staff_v1_campus_proto_rawDescGZIP() []byte {
	file_campusapis_staff_v1_campus_proto_rawDescOnce.Do(func() {
		file_campusapis_staff_v1_campus_proto_rawDescData = protoimpl.X.CompressGZIP(file_campusapis_staff_v1_campus_proto_rawDescData)
	})
	return file_campusapis_staff_v1_campus_proto_rawDescData
}

var file_campusapis_staff_v1_campus_proto_msgTypes = make([]protoimpl.MessageInfo, 54)
var file_campusapis_staff_v1_campus_proto_goTypes = []any{
	(*GetPersonInfoResponse)(nil),              // 0: campusapis.staff.v1.GetPersonInfoResponse
	(*PersonInfo)(nil),                         // 1: campusapis.staff.v1.PersonInfo
	(*GetStudentRewardsRequest)(nil),           // 2: campusapis.staff.v1.GetStudentRewardsRequest
	(*GetStudentCourseSelectionsRequest)(nil),  // 3: campusapis.staff.v1.GetStudentCourseSelectionsRequest
	(*GetStudentGradeRequest)(nil),             // 4: campusapis.staff.v1.GetStudentGradeRequest
	(*GetGlobalStudentGradeRequest)(nil),       // 5: campusapis.staff.v1.GetGlobalStudentGradeRequest
	(*GetStudentExamRequest)(nil),              // 6: campusapis.staff.v1.GetStudentExamRequest
	(*GetDailyExamRequest)(nil),                // 7: campusapis.staff.v1.GetDailyExamRequest
	(*SemesterRequest)(nil),                    // 8: campusapis.staff.v1.SemesterRequest
	(*GetStudentInfoResponse)(nil),             // 9: campusapis.staff.v1.GetStudentInfoResponse
	(*StudentInfo)(nil),                        // 10: campusapis.staff.v1.StudentInfo
	(*GetStudentSchoolRollStatusResponse)(nil), // 11: campusapis.staff.v1.GetStudentSchoolRollStatusResponse
	(*StudentSchoolRollStatus)(nil),            // 12: campusapis.staff.v1.StudentSchoolRollStatus
	(*GetStudentNeedyInfoResponse)(nil),        // 13: campusapis.staff.v1.GetStudentNeedyInfoResponse
	(*StudentNeedyInfo)(nil),                   // 14: campusapis.staff.v1.StudentNeedyInfo
	(*GetStudentDormInfoResponse)(nil),         // 15: campusapis.staff.v1.GetStudentDormInfoResponse
	(*DormInfo)(nil),                           // 16: campusapis.staff.v1.DormInfo
	(*GetStudentBirthdayInfoResponse)(nil),     // 17: campusapis.staff.v1.GetStudentBirthdayInfoResponse
	(*StudentBirthdayInfo)(nil),                // 18: campusapis.staff.v1.StudentBirthdayInfo
	(*GetStudentBirthdaysInRequest)(nil),       // 19: campusapis.staff.v1.GetStudentBirthdaysInRequest
	(*GetStudentBirthdaysInResponse)(nil),      // 20: campusapis.staff.v1.GetStudentBirthdaysInResponse
	(*GetStudentRewardsResponse)(nil),          // 21: campusapis.staff.v1.GetStudentRewardsResponse
	(*StudentReward)(nil),                      // 22: campusapis.staff.v1.StudentReward
	(*GetStudentCourseSelectionsResponse)(nil), // 23: campusapis.staff.v1.GetStudentCourseSelectionsResponse
	(*StudentCourseSelection)(nil),             // 24: campusapis.staff.v1.StudentCourseSelection
	(*GetStudentGradeResponse)(nil),            // 25: campusapis.staff.v1.GetStudentGradeResponse
	(*StudentGrade)(nil),                       // 26: campusapis.staff.v1.StudentGrade
	(*GetGlobalStudentGradeResponse)(nil),      // 27: campusapis.staff.v1.GetGlobalStudentGradeResponse
	(*GetDailyExamResponse)(nil),               // 28: campusapis.staff.v1.GetDailyExamResponse
	(*GlobalStudentGrade)(nil),                 // 29: campusapis.staff.v1.GlobalStudentGrade
	(*GetStudentExamResponse)(nil),             // 30: campusapis.staff.v1.GetStudentExamResponse
	(*StudentExam)(nil),                        // 31: campusapis.staff.v1.StudentExam
	(*GetStudentGPAResponse)(nil),              // 32: campusapis.staff.v1.GetStudentGPAResponse
	(*StudentGPA)(nil),                         // 33: campusapis.staff.v1.StudentGPA
	(*GPAPerSemester)(nil),                     // 34: campusapis.staff.v1.GPAPerSemester
	(*GPATotal)(nil),                           // 35: campusapis.staff.v1.GPATotal
	(*PostStudentGateAccessRequest)(nil),       // 36: campusapis.staff.v1.PostStudentGateAccessRequest
	(*PostStudentGateAccessResponse)(nil),      // 37: campusapis.staff.v1.PostStudentGateAccessResponse
	(*GetStudentStaySchoolInfoResponse)(nil),   // 38: campusapis.staff.v1.GetStudentStaySchoolInfoResponse
	(*StudentStaySchoolInfo)(nil),              // 39: campusapis.staff.v1.StudentStaySchoolInfo
	(*GetFreshmanBaseInfoRequest)(nil),         // 40: campusapis.staff.v1.GetFreshmanBaseInfoRequest
	(*GetFreshmanDetailRequest)(nil),           // 41: campusapis.staff.v1.GetFreshmanDetailRequest
	(*GetFreshmanRoommatesRequest)(nil),        // 42: campusapis.staff.v1.GetFreshmanRoommatesRequest
	(*FreshmanKeywordRequest)(nil),             // 43: campusapis.staff.v1.FreshmanKeywordRequest
	(*GetFreshmanBaseInfoResponse)(nil),        // 44: campusapis.staff.v1.GetFreshmanBaseInfoResponse
	(*FreshmanBaseInfo)(nil),                   // 45: campusapis.staff.v1.FreshmanBaseInfo
	(*GetFreshmanDetailResponse)(nil),          // 46: campusapis.staff.v1.GetFreshmanDetailResponse
	(*FreshmanDetail)(nil),                     // 47: campusapis.staff.v1.FreshmanDetail
	(*GetFreshmanRoommatesResponse)(nil),       // 48: campusapis.staff.v1.GetFreshmanRoommatesResponse
	(*FreshmanRoommate)(nil),                   // 49: campusapis.staff.v1.FreshmanRoommate
	(*GetStudentCountByDivisionRequest)(nil),   // 50: campusapis.staff.v1.GetStudentCountByDivisionRequest
	(*NiceResponse)(nil),                       // 51: campusapis.staff.v1.NiceResponse
	(*StudentNeedyInfo_Nested)(nil),            // 52: campusapis.staff.v1.StudentNeedyInfo.Nested
	(*PostStudentGateAccessResponse_Data)(nil), // 53: campusapis.staff.v1.PostStudentGateAccessResponse.Data
	(staff.Type)(0),                            // 54: campusapis.staff.Type
	(*emptypb.Empty)(nil),                      // 55: google.protobuf.Empty
}
var file_campusapis_staff_v1_campus_proto_depIdxs = []int32{
	1,  // 0: campusapis.staff.v1.GetPersonInfoResponse.data:type_name -> campusapis.staff.v1.PersonInfo
	10, // 1: campusapis.staff.v1.GetStudentInfoResponse.data:type_name -> campusapis.staff.v1.StudentInfo
	12, // 2: campusapis.staff.v1.GetStudentSchoolRollStatusResponse.data:type_name -> campusapis.staff.v1.StudentSchoolRollStatus
	14, // 3: campusapis.staff.v1.GetStudentNeedyInfoResponse.data:type_name -> campusapis.staff.v1.StudentNeedyInfo
	52, // 4: campusapis.staff.v1.StudentNeedyInfo.items:type_name -> campusapis.staff.v1.StudentNeedyInfo.Nested
	16, // 5: campusapis.staff.v1.GetStudentDormInfoResponse.data:type_name -> campusapis.staff.v1.DormInfo
	18, // 6: campusapis.staff.v1.GetStudentBirthdayInfoResponse.data:type_name -> campusapis.staff.v1.StudentBirthdayInfo
	54, // 7: campusapis.staff.v1.GetStudentBirthdaysInRequest.type:type_name -> campusapis.staff.Type
	18, // 8: campusapis.staff.v1.GetStudentBirthdaysInResponse.data:type_name -> campusapis.staff.v1.StudentBirthdayInfo
	22, // 9: campusapis.staff.v1.GetStudentRewardsResponse.data:type_name -> campusapis.staff.v1.StudentReward
	24, // 10: campusapis.staff.v1.GetStudentCourseSelectionsResponse.data:type_name -> campusapis.staff.v1.StudentCourseSelection
	26, // 11: campusapis.staff.v1.GetStudentGradeResponse.data:type_name -> campusapis.staff.v1.StudentGrade
	29, // 12: campusapis.staff.v1.GetGlobalStudentGradeResponse.data:type_name -> campusapis.staff.v1.GlobalStudentGrade
	31, // 13: campusapis.staff.v1.GetDailyExamResponse.data:type_name -> campusapis.staff.v1.StudentExam
	31, // 14: campusapis.staff.v1.GetStudentExamResponse.data:type_name -> campusapis.staff.v1.StudentExam
	33, // 15: campusapis.staff.v1.GetStudentGPAResponse.data:type_name -> campusapis.staff.v1.StudentGPA
	34, // 16: campusapis.staff.v1.StudentGPA.perSemester:type_name -> campusapis.staff.v1.GPAPerSemester
	35, // 17: campusapis.staff.v1.StudentGPA.total:type_name -> campusapis.staff.v1.GPATotal
	53, // 18: campusapis.staff.v1.PostStudentGateAccessResponse.data:type_name -> campusapis.staff.v1.PostStudentGateAccessResponse.Data
	39, // 19: campusapis.staff.v1.GetStudentStaySchoolInfoResponse.data:type_name -> campusapis.staff.v1.StudentStaySchoolInfo
	45, // 20: campusapis.staff.v1.GetFreshmanBaseInfoResponse.data:type_name -> campusapis.staff.v1.FreshmanBaseInfo
	47, // 21: campusapis.staff.v1.GetFreshmanDetailResponse.data:type_name -> campusapis.staff.v1.FreshmanDetail
	49, // 22: campusapis.staff.v1.GetFreshmanRoommatesResponse.data:type_name -> campusapis.staff.v1.FreshmanRoommate
	55, // 23: campusapis.staff.v1.CampusService.GetPersonInfo:input_type -> google.protobuf.Empty
	55, // 24: campusapis.staff.v1.CampusService.GetStudentInfo:input_type -> google.protobuf.Empty
	50, // 25: campusapis.staff.v1.CampusService.GetStudentCountByDivision:input_type -> campusapis.staff.v1.GetStudentCountByDivisionRequest
	55, // 26: campusapis.staff.v1.CampusService.GetStudentSchoolRollStatus:input_type -> google.protobuf.Empty
	55, // 27: campusapis.staff.v1.CampusService.GetStudentDormInfo:input_type -> google.protobuf.Empty
	55, // 28: campusapis.staff.v1.CampusService.GetStudentBirthdayInfo:input_type -> google.protobuf.Empty
	19, // 29: campusapis.staff.v1.CampusService.GetStudentBirthdaysIn:input_type -> campusapis.staff.v1.GetStudentBirthdaysInRequest
	2,  // 30: campusapis.staff.v1.CampusService.GetStudentRewards:input_type -> campusapis.staff.v1.GetStudentRewardsRequest
	3,  // 31: campusapis.staff.v1.CampusService.GetStudentCourseSelections:input_type -> campusapis.staff.v1.GetStudentCourseSelectionsRequest
	4,  // 32: campusapis.staff.v1.CampusService.GetStudentGrade:input_type -> campusapis.staff.v1.GetStudentGradeRequest
	5,  // 33: campusapis.staff.v1.CampusService.GetGlobalStudentGrade:input_type -> campusapis.staff.v1.GetGlobalStudentGradeRequest
	6,  // 34: campusapis.staff.v1.CampusService.GetStudentExam:input_type -> campusapis.staff.v1.GetStudentExamRequest
	7,  // 35: campusapis.staff.v1.CampusService.GetDailyExam:input_type -> campusapis.staff.v1.GetDailyExamRequest
	55, // 36: campusapis.staff.v1.CampusService.GetStudentGPA:input_type -> google.protobuf.Empty
	36, // 37: campusapis.staff.v1.CampusService.PostStudentGateAccess:input_type -> campusapis.staff.v1.PostStudentGateAccessRequest
	55, // 38: campusapis.staff.v1.CampusService.GetStudentStaySchoolInfo:input_type -> google.protobuf.Empty
	40, // 39: campusapis.staff.v1.CampusService.GetFreshmanBaseInfo:input_type -> campusapis.staff.v1.GetFreshmanBaseInfoRequest
	41, // 40: campusapis.staff.v1.CampusService.GetFreshmanDetail:input_type -> campusapis.staff.v1.GetFreshmanDetailRequest
	42, // 41: campusapis.staff.v1.CampusService.GetFreshmanRoommates:input_type -> campusapis.staff.v1.GetFreshmanRoommatesRequest
	0,  // 42: campusapis.staff.v1.CampusService.GetPersonInfo:output_type -> campusapis.staff.v1.GetPersonInfoResponse
	9,  // 43: campusapis.staff.v1.CampusService.GetStudentInfo:output_type -> campusapis.staff.v1.GetStudentInfoResponse
	51, // 44: campusapis.staff.v1.CampusService.GetStudentCountByDivision:output_type -> campusapis.staff.v1.NiceResponse
	11, // 45: campusapis.staff.v1.CampusService.GetStudentSchoolRollStatus:output_type -> campusapis.staff.v1.GetStudentSchoolRollStatusResponse
	15, // 46: campusapis.staff.v1.CampusService.GetStudentDormInfo:output_type -> campusapis.staff.v1.GetStudentDormInfoResponse
	17, // 47: campusapis.staff.v1.CampusService.GetStudentBirthdayInfo:output_type -> campusapis.staff.v1.GetStudentBirthdayInfoResponse
	20, // 48: campusapis.staff.v1.CampusService.GetStudentBirthdaysIn:output_type -> campusapis.staff.v1.GetStudentBirthdaysInResponse
	21, // 49: campusapis.staff.v1.CampusService.GetStudentRewards:output_type -> campusapis.staff.v1.GetStudentRewardsResponse
	23, // 50: campusapis.staff.v1.CampusService.GetStudentCourseSelections:output_type -> campusapis.staff.v1.GetStudentCourseSelectionsResponse
	25, // 51: campusapis.staff.v1.CampusService.GetStudentGrade:output_type -> campusapis.staff.v1.GetStudentGradeResponse
	27, // 52: campusapis.staff.v1.CampusService.GetGlobalStudentGrade:output_type -> campusapis.staff.v1.GetGlobalStudentGradeResponse
	30, // 53: campusapis.staff.v1.CampusService.GetStudentExam:output_type -> campusapis.staff.v1.GetStudentExamResponse
	28, // 54: campusapis.staff.v1.CampusService.GetDailyExam:output_type -> campusapis.staff.v1.GetDailyExamResponse
	32, // 55: campusapis.staff.v1.CampusService.GetStudentGPA:output_type -> campusapis.staff.v1.GetStudentGPAResponse
	37, // 56: campusapis.staff.v1.CampusService.PostStudentGateAccess:output_type -> campusapis.staff.v1.PostStudentGateAccessResponse
	38, // 57: campusapis.staff.v1.CampusService.GetStudentStaySchoolInfo:output_type -> campusapis.staff.v1.GetStudentStaySchoolInfoResponse
	44, // 58: campusapis.staff.v1.CampusService.GetFreshmanBaseInfo:output_type -> campusapis.staff.v1.GetFreshmanBaseInfoResponse
	46, // 59: campusapis.staff.v1.CampusService.GetFreshmanDetail:output_type -> campusapis.staff.v1.GetFreshmanDetailResponse
	48, // 60: campusapis.staff.v1.CampusService.GetFreshmanRoommates:output_type -> campusapis.staff.v1.GetFreshmanRoommatesResponse
	42, // [42:61] is the sub-list for method output_type
	23, // [23:42] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { file_campusapis_staff_v1_campus_proto_init() }
func file_campusapis_staff_v1_campus_proto_init() {
	if File_campusapis_staff_v1_campus_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_campusapis_staff_v1_campus_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   54,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_campusapis_staff_v1_campus_proto_goTypes,
		DependencyIndexes: file_campusapis_staff_v1_campus_proto_depIdxs,
		MessageInfos:      file_campusapis_staff_v1_campus_proto_msgTypes,
	}.Build()
	File_campusapis_staff_v1_campus_proto = out.File
	file_campusapis_staff_v1_campus_proto_rawDesc = nil
	file_campusapis_staff_v1_campus_proto_goTypes = nil
	file_campusapis_staff_v1_campus_proto_depIdxs = nil
}
