// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: campusapis/staff/v1/campus.proto

package staffv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CampusServiceClient is the client API for CampusService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CampusServiceClient interface {
	//获取员工信息
	GetPersonInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetPersonInfoResponse, error)
	//获取学生基本信息
	GetStudentInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetStudentInfoResponse, error)
	//获取学生贫困生申请记录
	GetStudentNeedyInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetStudentNeedyInfoResponse, error)
	//获取学生宿舍信息
	GetStudentDormInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetStudentDormInfoResponse, error)
	//获取学生生日信息
	GetStudentBirthdayInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetStudentBirthdayResponse, error)
	//获取生日为指定日期的学生列表
	GetStudentBirthdaysIn(ctx context.Context, in *GetStudentBirthdaysInRequest, opts ...grpc.CallOption) (*GetStudentBirthdaysInResponse, error)
	//获取学生奖学金信息
	GetStudentRewards(ctx context.Context, in *SemesterRequest, opts ...grpc.CallOption) (*GetStudentRewardsResponse, error)
	//获取学生选课信息
	GetStudentSelect(ctx context.Context, in *SemesterRequest, opts ...grpc.CallOption) (*GetStudentSelectResponse, error)
	//获取学生成绩信息
	GetStudentGrade(ctx context.Context, in *GetStudentGradeRequest, opts ...grpc.CallOption) (*GetStudentGradeResponse, error)
	//获取学生考试信息
	GetStudentExam(ctx context.Context, in *GetStudentExamRequest, opts ...grpc.CallOption) (*GetStudentExamResponse, error)
	//获取学生GPA信息
	GetStudentGPA(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetStudentGPAResponse, error)
	//推送学生门禁通行信息
	PostStudentGateAccess(ctx context.Context, in *PostStudentGateAccessRequest, opts ...grpc.CallOption) (*PostStudentGateAccessResponse, error)
	//获取学生留校信息
	GetStudentStaySchoolInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetStudentStaySchoolInfoResponse, error)
	//获取新生基本信息
	GetFreshmanBaseInfo(ctx context.Context, in *FreshmanKeywordRequest, opts ...grpc.CallOption) (*GetFreshmanBaseInfoResponse, error)
	//获取新生详细信息
	GetFreshmanInfo(ctx context.Context, in *FreshmanKeywordRequest, opts ...grpc.CallOption) (*GetFreshmanInfoResponse, error)
	//获取新生宿舍信息
	GetFreshmanRoommates(ctx context.Context, in *FreshmanKeywordRequest, opts ...grpc.CallOption) (*GetFreshmanRoommatesResponse, error)
}

type campusServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCampusServiceClient(cc grpc.ClientConnInterface) CampusServiceClient {
	return &campusServiceClient{cc}
}

func (c *campusServiceClient) GetPersonInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetPersonInfoResponse, error) {
	out := new(GetPersonInfoResponse)
	err := c.cc.Invoke(ctx, "/campusapis.staff.v1.CampusService/GetPersonInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *campusServiceClient) GetStudentInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetStudentInfoResponse, error) {
	out := new(GetStudentInfoResponse)
	err := c.cc.Invoke(ctx, "/campusapis.staff.v1.CampusService/GetStudentInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *campusServiceClient) GetStudentNeedyInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetStudentNeedyInfoResponse, error) {
	out := new(GetStudentNeedyInfoResponse)
	err := c.cc.Invoke(ctx, "/campusapis.staff.v1.CampusService/GetStudentNeedyInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *campusServiceClient) GetStudentDormInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetStudentDormInfoResponse, error) {
	out := new(GetStudentDormInfoResponse)
	err := c.cc.Invoke(ctx, "/campusapis.staff.v1.CampusService/GetStudentDormInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *campusServiceClient) GetStudentBirthdayInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetStudentBirthdayResponse, error) {
	out := new(GetStudentBirthdayResponse)
	err := c.cc.Invoke(ctx, "/campusapis.staff.v1.CampusService/GetStudentBirthdayInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *campusServiceClient) GetStudentBirthdaysIn(ctx context.Context, in *GetStudentBirthdaysInRequest, opts ...grpc.CallOption) (*GetStudentBirthdaysInResponse, error) {
	out := new(GetStudentBirthdaysInResponse)
	err := c.cc.Invoke(ctx, "/campusapis.staff.v1.CampusService/GetStudentBirthdaysIn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *campusServiceClient) GetStudentRewards(ctx context.Context, in *SemesterRequest, opts ...grpc.CallOption) (*GetStudentRewardsResponse, error) {
	out := new(GetStudentRewardsResponse)
	err := c.cc.Invoke(ctx, "/campusapis.staff.v1.CampusService/GetStudentRewards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *campusServiceClient) GetStudentSelect(ctx context.Context, in *SemesterRequest, opts ...grpc.CallOption) (*GetStudentSelectResponse, error) {
	out := new(GetStudentSelectResponse)
	err := c.cc.Invoke(ctx, "/campusapis.staff.v1.CampusService/GetStudentSelect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *campusServiceClient) GetStudentGrade(ctx context.Context, in *GetStudentGradeRequest, opts ...grpc.CallOption) (*GetStudentGradeResponse, error) {
	out := new(GetStudentGradeResponse)
	err := c.cc.Invoke(ctx, "/campusapis.staff.v1.CampusService/GetStudentGrade", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *campusServiceClient) GetStudentExam(ctx context.Context, in *GetStudentExamRequest, opts ...grpc.CallOption) (*GetStudentExamResponse, error) {
	out := new(GetStudentExamResponse)
	err := c.cc.Invoke(ctx, "/campusapis.staff.v1.CampusService/GetStudentExam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *campusServiceClient) GetStudentGPA(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetStudentGPAResponse, error) {
	out := new(GetStudentGPAResponse)
	err := c.cc.Invoke(ctx, "/campusapis.staff.v1.CampusService/GetStudentGPA", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *campusServiceClient) PostStudentGateAccess(ctx context.Context, in *PostStudentGateAccessRequest, opts ...grpc.CallOption) (*PostStudentGateAccessResponse, error) {
	out := new(PostStudentGateAccessResponse)
	err := c.cc.Invoke(ctx, "/campusapis.staff.v1.CampusService/PostStudentGateAccess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *campusServiceClient) GetStudentStaySchoolInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetStudentStaySchoolInfoResponse, error) {
	out := new(GetStudentStaySchoolInfoResponse)
	err := c.cc.Invoke(ctx, "/campusapis.staff.v1.CampusService/GetStudentStaySchoolInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *campusServiceClient) GetFreshmanBaseInfo(ctx context.Context, in *FreshmanKeywordRequest, opts ...grpc.CallOption) (*GetFreshmanBaseInfoResponse, error) {
	out := new(GetFreshmanBaseInfoResponse)
	err := c.cc.Invoke(ctx, "/campusapis.staff.v1.CampusService/GetFreshmanBaseInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *campusServiceClient) GetFreshmanInfo(ctx context.Context, in *FreshmanKeywordRequest, opts ...grpc.CallOption) (*GetFreshmanInfoResponse, error) {
	out := new(GetFreshmanInfoResponse)
	err := c.cc.Invoke(ctx, "/campusapis.staff.v1.CampusService/GetFreshmanInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *campusServiceClient) GetFreshmanRoommates(ctx context.Context, in *FreshmanKeywordRequest, opts ...grpc.CallOption) (*GetFreshmanRoommatesResponse, error) {
	out := new(GetFreshmanRoommatesResponse)
	err := c.cc.Invoke(ctx, "/campusapis.staff.v1.CampusService/GetFreshmanRoommates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CampusServiceServer is the server API for CampusService service.
// All implementations should embed UnimplementedCampusServiceServer
// for forward compatibility
type CampusServiceServer interface {
	//获取员工信息
	GetPersonInfo(context.Context, *emptypb.Empty) (*GetPersonInfoResponse, error)
	//获取学生基本信息
	GetStudentInfo(context.Context, *emptypb.Empty) (*GetStudentInfoResponse, error)
	//获取学生贫困生申请记录
	GetStudentNeedyInfo(context.Context, *emptypb.Empty) (*GetStudentNeedyInfoResponse, error)
	//获取学生宿舍信息
	GetStudentDormInfo(context.Context, *emptypb.Empty) (*GetStudentDormInfoResponse, error)
	//获取学生生日信息
	GetStudentBirthdayInfo(context.Context, *emptypb.Empty) (*GetStudentBirthdayResponse, error)
	//获取生日为指定日期的学生列表
	GetStudentBirthdaysIn(context.Context, *GetStudentBirthdaysInRequest) (*GetStudentBirthdaysInResponse, error)
	//获取学生奖学金信息
	GetStudentRewards(context.Context, *SemesterRequest) (*GetStudentRewardsResponse, error)
	//获取学生选课信息
	GetStudentSelect(context.Context, *SemesterRequest) (*GetStudentSelectResponse, error)
	//获取学生成绩信息
	GetStudentGrade(context.Context, *GetStudentGradeRequest) (*GetStudentGradeResponse, error)
	//获取学生考试信息
	GetStudentExam(context.Context, *GetStudentExamRequest) (*GetStudentExamResponse, error)
	//获取学生GPA信息
	GetStudentGPA(context.Context, *emptypb.Empty) (*GetStudentGPAResponse, error)
	//推送学生门禁通行信息
	PostStudentGateAccess(context.Context, *PostStudentGateAccessRequest) (*PostStudentGateAccessResponse, error)
	//获取学生留校信息
	GetStudentStaySchoolInfo(context.Context, *emptypb.Empty) (*GetStudentStaySchoolInfoResponse, error)
	//获取新生基本信息
	GetFreshmanBaseInfo(context.Context, *FreshmanKeywordRequest) (*GetFreshmanBaseInfoResponse, error)
	//获取新生详细信息
	GetFreshmanInfo(context.Context, *FreshmanKeywordRequest) (*GetFreshmanInfoResponse, error)
	//获取新生宿舍信息
	GetFreshmanRoommates(context.Context, *FreshmanKeywordRequest) (*GetFreshmanRoommatesResponse, error)
}

// UnimplementedCampusServiceServer should be embedded to have forward compatible implementations.
type UnimplementedCampusServiceServer struct {
}

func (UnimplementedCampusServiceServer) GetPersonInfo(context.Context, *emptypb.Empty) (*GetPersonInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPersonInfo not implemented")
}
func (UnimplementedCampusServiceServer) GetStudentInfo(context.Context, *emptypb.Empty) (*GetStudentInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStudentInfo not implemented")
}
func (UnimplementedCampusServiceServer) GetStudentNeedyInfo(context.Context, *emptypb.Empty) (*GetStudentNeedyInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStudentNeedyInfo not implemented")
}
func (UnimplementedCampusServiceServer) GetStudentDormInfo(context.Context, *emptypb.Empty) (*GetStudentDormInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStudentDormInfo not implemented")
}
func (UnimplementedCampusServiceServer) GetStudentBirthdayInfo(context.Context, *emptypb.Empty) (*GetStudentBirthdayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStudentBirthdayInfo not implemented")
}
func (UnimplementedCampusServiceServer) GetStudentBirthdaysIn(context.Context, *GetStudentBirthdaysInRequest) (*GetStudentBirthdaysInResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStudentBirthdaysIn not implemented")
}
func (UnimplementedCampusServiceServer) GetStudentRewards(context.Context, *SemesterRequest) (*GetStudentRewardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStudentRewards not implemented")
}
func (UnimplementedCampusServiceServer) GetStudentSelect(context.Context, *SemesterRequest) (*GetStudentSelectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStudentSelect not implemented")
}
func (UnimplementedCampusServiceServer) GetStudentGrade(context.Context, *GetStudentGradeRequest) (*GetStudentGradeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStudentGrade not implemented")
}
func (UnimplementedCampusServiceServer) GetStudentExam(context.Context, *GetStudentExamRequest) (*GetStudentExamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStudentExam not implemented")
}
func (UnimplementedCampusServiceServer) GetStudentGPA(context.Context, *emptypb.Empty) (*GetStudentGPAResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStudentGPA not implemented")
}
func (UnimplementedCampusServiceServer) PostStudentGateAccess(context.Context, *PostStudentGateAccessRequest) (*PostStudentGateAccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostStudentGateAccess not implemented")
}
func (UnimplementedCampusServiceServer) GetStudentStaySchoolInfo(context.Context, *emptypb.Empty) (*GetStudentStaySchoolInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStudentStaySchoolInfo not implemented")
}
func (UnimplementedCampusServiceServer) GetFreshmanBaseInfo(context.Context, *FreshmanKeywordRequest) (*GetFreshmanBaseInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFreshmanBaseInfo not implemented")
}
func (UnimplementedCampusServiceServer) GetFreshmanInfo(context.Context, *FreshmanKeywordRequest) (*GetFreshmanInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFreshmanInfo not implemented")
}
func (UnimplementedCampusServiceServer) GetFreshmanRoommates(context.Context, *FreshmanKeywordRequest) (*GetFreshmanRoommatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFreshmanRoommates not implemented")
}

// UnsafeCampusServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CampusServiceServer will
// result in compilation errors.
type UnsafeCampusServiceServer interface {
	mustEmbedUnimplementedCampusServiceServer()
}

func RegisterCampusServiceServer(s grpc.ServiceRegistrar, srv CampusServiceServer) {
	s.RegisterService(&CampusService_ServiceDesc, srv)
}

func _CampusService_GetPersonInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampusServiceServer).GetPersonInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/campusapis.staff.v1.CampusService/GetPersonInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampusServiceServer).GetPersonInfo(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CampusService_GetStudentInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampusServiceServer).GetStudentInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/campusapis.staff.v1.CampusService/GetStudentInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampusServiceServer).GetStudentInfo(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CampusService_GetStudentNeedyInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampusServiceServer).GetStudentNeedyInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/campusapis.staff.v1.CampusService/GetStudentNeedyInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampusServiceServer).GetStudentNeedyInfo(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CampusService_GetStudentDormInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampusServiceServer).GetStudentDormInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/campusapis.staff.v1.CampusService/GetStudentDormInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampusServiceServer).GetStudentDormInfo(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CampusService_GetStudentBirthdayInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampusServiceServer).GetStudentBirthdayInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/campusapis.staff.v1.CampusService/GetStudentBirthdayInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampusServiceServer).GetStudentBirthdayInfo(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CampusService_GetStudentBirthdaysIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStudentBirthdaysInRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampusServiceServer).GetStudentBirthdaysIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/campusapis.staff.v1.CampusService/GetStudentBirthdaysIn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampusServiceServer).GetStudentBirthdaysIn(ctx, req.(*GetStudentBirthdaysInRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CampusService_GetStudentRewards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SemesterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampusServiceServer).GetStudentRewards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/campusapis.staff.v1.CampusService/GetStudentRewards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampusServiceServer).GetStudentRewards(ctx, req.(*SemesterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CampusService_GetStudentSelect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SemesterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampusServiceServer).GetStudentSelect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/campusapis.staff.v1.CampusService/GetStudentSelect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampusServiceServer).GetStudentSelect(ctx, req.(*SemesterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CampusService_GetStudentGrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStudentGradeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampusServiceServer).GetStudentGrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/campusapis.staff.v1.CampusService/GetStudentGrade",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampusServiceServer).GetStudentGrade(ctx, req.(*GetStudentGradeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CampusService_GetStudentExam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStudentExamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampusServiceServer).GetStudentExam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/campusapis.staff.v1.CampusService/GetStudentExam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampusServiceServer).GetStudentExam(ctx, req.(*GetStudentExamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CampusService_GetStudentGPA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampusServiceServer).GetStudentGPA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/campusapis.staff.v1.CampusService/GetStudentGPA",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampusServiceServer).GetStudentGPA(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CampusService_PostStudentGateAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostStudentGateAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampusServiceServer).PostStudentGateAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/campusapis.staff.v1.CampusService/PostStudentGateAccess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampusServiceServer).PostStudentGateAccess(ctx, req.(*PostStudentGateAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CampusService_GetStudentStaySchoolInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampusServiceServer).GetStudentStaySchoolInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/campusapis.staff.v1.CampusService/GetStudentStaySchoolInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampusServiceServer).GetStudentStaySchoolInfo(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CampusService_GetFreshmanBaseInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FreshmanKeywordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampusServiceServer).GetFreshmanBaseInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/campusapis.staff.v1.CampusService/GetFreshmanBaseInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampusServiceServer).GetFreshmanBaseInfo(ctx, req.(*FreshmanKeywordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CampusService_GetFreshmanInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FreshmanKeywordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampusServiceServer).GetFreshmanInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/campusapis.staff.v1.CampusService/GetFreshmanInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampusServiceServer).GetFreshmanInfo(ctx, req.(*FreshmanKeywordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CampusService_GetFreshmanRoommates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FreshmanKeywordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampusServiceServer).GetFreshmanRoommates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/campusapis.staff.v1.CampusService/GetFreshmanRoommates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampusServiceServer).GetFreshmanRoommates(ctx, req.(*FreshmanKeywordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CampusService_ServiceDesc is the grpc.ServiceDesc for CampusService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CampusService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "campusapis.staff.v1.CampusService",
	HandlerType: (*CampusServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPersonInfo",
			Handler:    _CampusService_GetPersonInfo_Handler,
		},
		{
			MethodName: "GetStudentInfo",
			Handler:    _CampusService_GetStudentInfo_Handler,
		},
		{
			MethodName: "GetStudentNeedyInfo",
			Handler:    _CampusService_GetStudentNeedyInfo_Handler,
		},
		{
			MethodName: "GetStudentDormInfo",
			Handler:    _CampusService_GetStudentDormInfo_Handler,
		},
		{
			MethodName: "GetStudentBirthdayInfo",
			Handler:    _CampusService_GetStudentBirthdayInfo_Handler,
		},
		{
			MethodName: "GetStudentBirthdaysIn",
			Handler:    _CampusService_GetStudentBirthdaysIn_Handler,
		},
		{
			MethodName: "GetStudentRewards",
			Handler:    _CampusService_GetStudentRewards_Handler,
		},
		{
			MethodName: "GetStudentSelect",
			Handler:    _CampusService_GetStudentSelect_Handler,
		},
		{
			MethodName: "GetStudentGrade",
			Handler:    _CampusService_GetStudentGrade_Handler,
		},
		{
			MethodName: "GetStudentExam",
			Handler:    _CampusService_GetStudentExam_Handler,
		},
		{
			MethodName: "GetStudentGPA",
			Handler:    _CampusService_GetStudentGPA_Handler,
		},
		{
			MethodName: "PostStudentGateAccess",
			Handler:    _CampusService_PostStudentGateAccess_Handler,
		},
		{
			MethodName: "GetStudentStaySchoolInfo",
			Handler:    _CampusService_GetStudentStaySchoolInfo_Handler,
		},
		{
			MethodName: "GetFreshmanBaseInfo",
			Handler:    _CampusService_GetFreshmanBaseInfo_Handler,
		},
		{
			MethodName: "GetFreshmanInfo",
			Handler:    _CampusService_GetFreshmanInfo_Handler,
		},
		{
			MethodName: "GetFreshmanRoommates",
			Handler:    _CampusService_GetFreshmanRoommates_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "campusapis/staff/v1/campus.proto",
}
