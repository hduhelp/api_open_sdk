// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: gatewayapis/server/v1/register.proto

package serverv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ServerRegisterServiceClient is the client API for ServerRegisterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServerRegisterServiceClient interface {
	//注册服务实例
	PostRegistServiceInstance(ctx context.Context, in *PostRegistServiceInstanceRequest, opts ...grpc.CallOption) (*PostRegistServiceInstanceResponse, error)
	//注册服务HTTP路由
	PostRegistHTTPRouters(ctx context.Context, in *PostRegistHTTPRoutersRequest, opts ...grpc.CallOption) (*PostRegistHTTPRoutersResponse, error)
	//注册服务GRPC方法
	PostRegistGRPCMethods(ctx context.Context, in *PostRegistGRPCMethodsRequest, opts ...grpc.CallOption) (*PostRegistGRPCMethodsResponse, error)
}

type serverRegisterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewServerRegisterServiceClient(cc grpc.ClientConnInterface) ServerRegisterServiceClient {
	return &serverRegisterServiceClient{cc}
}

func (c *serverRegisterServiceClient) PostRegistServiceInstance(ctx context.Context, in *PostRegistServiceInstanceRequest, opts ...grpc.CallOption) (*PostRegistServiceInstanceResponse, error) {
	out := new(PostRegistServiceInstanceResponse)
	err := c.cc.Invoke(ctx, "/gatewayapis.server.v1.ServerRegisterService/PostRegistServiceInstance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverRegisterServiceClient) PostRegistHTTPRouters(ctx context.Context, in *PostRegistHTTPRoutersRequest, opts ...grpc.CallOption) (*PostRegistHTTPRoutersResponse, error) {
	out := new(PostRegistHTTPRoutersResponse)
	err := c.cc.Invoke(ctx, "/gatewayapis.server.v1.ServerRegisterService/PostRegistHTTPRouters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverRegisterServiceClient) PostRegistGRPCMethods(ctx context.Context, in *PostRegistGRPCMethodsRequest, opts ...grpc.CallOption) (*PostRegistGRPCMethodsResponse, error) {
	out := new(PostRegistGRPCMethodsResponse)
	err := c.cc.Invoke(ctx, "/gatewayapis.server.v1.ServerRegisterService/PostRegistGRPCMethods", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServerRegisterServiceServer is the server API for ServerRegisterService service.
// All implementations should embed UnimplementedServerRegisterServiceServer
// for forward compatibility
type ServerRegisterServiceServer interface {
	//注册服务实例
	PostRegistServiceInstance(context.Context, *PostRegistServiceInstanceRequest) (*PostRegistServiceInstanceResponse, error)
	//注册服务HTTP路由
	PostRegistHTTPRouters(context.Context, *PostRegistHTTPRoutersRequest) (*PostRegistHTTPRoutersResponse, error)
	//注册服务GRPC方法
	PostRegistGRPCMethods(context.Context, *PostRegistGRPCMethodsRequest) (*PostRegistGRPCMethodsResponse, error)
}

// UnimplementedServerRegisterServiceServer should be embedded to have forward compatible implementations.
type UnimplementedServerRegisterServiceServer struct {
}

func (UnimplementedServerRegisterServiceServer) PostRegistServiceInstance(context.Context, *PostRegistServiceInstanceRequest) (*PostRegistServiceInstanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostRegistServiceInstance not implemented")
}
func (UnimplementedServerRegisterServiceServer) PostRegistHTTPRouters(context.Context, *PostRegistHTTPRoutersRequest) (*PostRegistHTTPRoutersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostRegistHTTPRouters not implemented")
}
func (UnimplementedServerRegisterServiceServer) PostRegistGRPCMethods(context.Context, *PostRegistGRPCMethodsRequest) (*PostRegistGRPCMethodsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostRegistGRPCMethods not implemented")
}

// UnsafeServerRegisterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServerRegisterServiceServer will
// result in compilation errors.
type UnsafeServerRegisterServiceServer interface {
	mustEmbedUnimplementedServerRegisterServiceServer()
}

func RegisterServerRegisterServiceServer(s grpc.ServiceRegistrar, srv ServerRegisterServiceServer) {
	s.RegisterService(&ServerRegisterService_ServiceDesc, srv)
}

func _ServerRegisterService_PostRegistServiceInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostRegistServiceInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerRegisterServiceServer).PostRegistServiceInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gatewayapis.server.v1.ServerRegisterService/PostRegistServiceInstance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerRegisterServiceServer).PostRegistServiceInstance(ctx, req.(*PostRegistServiceInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerRegisterService_PostRegistHTTPRouters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostRegistHTTPRoutersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerRegisterServiceServer).PostRegistHTTPRouters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gatewayapis.server.v1.ServerRegisterService/PostRegistHTTPRouters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerRegisterServiceServer).PostRegistHTTPRouters(ctx, req.(*PostRegistHTTPRoutersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerRegisterService_PostRegistGRPCMethods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostRegistGRPCMethodsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerRegisterServiceServer).PostRegistGRPCMethods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gatewayapis.server.v1.ServerRegisterService/PostRegistGRPCMethods",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerRegisterServiceServer).PostRegistGRPCMethods(ctx, req.(*PostRegistGRPCMethodsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ServerRegisterService_ServiceDesc is the grpc.ServiceDesc for ServerRegisterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServerRegisterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gatewayapis.server.v1.ServerRegisterService",
	HandlerType: (*ServerRegisterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PostRegistServiceInstance",
			Handler:    _ServerRegisterService_PostRegistServiceInstance_Handler,
		},
		{
			MethodName: "PostRegistHTTPRouters",
			Handler:    _ServerRegisterService_PostRegistHTTPRouters_Handler,
		},
		{
			MethodName: "PostRegistGRPCMethods",
			Handler:    _ServerRegisterService_PostRegistGRPCMethods_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gatewayapis/server/v1/register.proto",
}
